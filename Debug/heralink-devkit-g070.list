
heralink-devkit-g070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009908  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba4  08009ba4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08009ba4  08009ba4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ba4  08009ba4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f5c  20000070  08009c18  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fcc  08009c18  00021fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000236c4  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005728  00000000  00000000  0004379b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  00048ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016da  00000000  00000000  0004ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c345  00000000  00000000  0004c352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026a4c  00000000  00000000  00068697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6f47  00000000  00000000  0008f0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d8c  00000000  00000000  0013602c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0013cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080099b0 	.word	0x080099b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080099b0 	.word	0x080099b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9d1 	bl	80007a4 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f95d 	bl	80006cc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9c3 	bl	80007a4 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9b9 	bl	80007a4 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f969 	bl	8000718 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f95f 	bl	8000718 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fcc5 	bl	8000e08 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fb1f 	bl	8000ac8 <__aeabi_fsub>
 800048a:	f000 fcbd 	bl	8000e08 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fdiv>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	464f      	mov	r7, r9
 800049c:	4646      	mov	r6, r8
 800049e:	46d6      	mov	lr, sl
 80004a0:	0245      	lsls	r5, r0, #9
 80004a2:	b5c0      	push	{r6, r7, lr}
 80004a4:	0047      	lsls	r7, r0, #1
 80004a6:	1c0c      	adds	r4, r1, #0
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	0e3f      	lsrs	r7, r7, #24
 80004ac:	0fc6      	lsrs	r6, r0, #31
 80004ae:	2f00      	cmp	r7, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fdiv+0x1c>
 80004b2:	e06f      	b.n	8000594 <__aeabi_fdiv+0xfc>
 80004b4:	2fff      	cmp	r7, #255	; 0xff
 80004b6:	d100      	bne.n	80004ba <__aeabi_fdiv+0x22>
 80004b8:	e074      	b.n	80005a4 <__aeabi_fdiv+0x10c>
 80004ba:	2300      	movs	r3, #0
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	4699      	mov	r9, r3
 80004c0:	469a      	mov	sl, r3
 80004c2:	00ed      	lsls	r5, r5, #3
 80004c4:	04d2      	lsls	r2, r2, #19
 80004c6:	4315      	orrs	r5, r2
 80004c8:	3f7f      	subs	r7, #127	; 0x7f
 80004ca:	0263      	lsls	r3, r4, #9
 80004cc:	0a5b      	lsrs	r3, r3, #9
 80004ce:	4698      	mov	r8, r3
 80004d0:	0063      	lsls	r3, r4, #1
 80004d2:	0e1b      	lsrs	r3, r3, #24
 80004d4:	0fe4      	lsrs	r4, r4, #31
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d04d      	beq.n	8000576 <__aeabi_fdiv+0xde>
 80004da:	2bff      	cmp	r3, #255	; 0xff
 80004dc:	d045      	beq.n	800056a <__aeabi_fdiv+0xd2>
 80004de:	4642      	mov	r2, r8
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	00d2      	lsls	r2, r2, #3
 80004e4:	04c9      	lsls	r1, r1, #19
 80004e6:	4311      	orrs	r1, r2
 80004e8:	4688      	mov	r8, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	3b7f      	subs	r3, #127	; 0x7f
 80004ee:	0031      	movs	r1, r6
 80004f0:	1aff      	subs	r7, r7, r3
 80004f2:	464b      	mov	r3, r9
 80004f4:	4061      	eors	r1, r4
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d900      	bls.n	80004fe <__aeabi_fdiv+0x66>
 80004fc:	e0b8      	b.n	8000670 <__aeabi_fdiv+0x1d8>
 80004fe:	4870      	ldr	r0, [pc, #448]	; (80006c0 <__aeabi_fdiv+0x228>)
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	58c3      	ldr	r3, [r0, r3]
 8000504:	469f      	mov	pc, r3
 8000506:	2300      	movs	r3, #0
 8000508:	4698      	mov	r8, r3
 800050a:	0026      	movs	r6, r4
 800050c:	4645      	mov	r5, r8
 800050e:	4692      	mov	sl, r2
 8000510:	4653      	mov	r3, sl
 8000512:	2b02      	cmp	r3, #2
 8000514:	d100      	bne.n	8000518 <__aeabi_fdiv+0x80>
 8000516:	e08d      	b.n	8000634 <__aeabi_fdiv+0x19c>
 8000518:	2b03      	cmp	r3, #3
 800051a:	d100      	bne.n	800051e <__aeabi_fdiv+0x86>
 800051c:	e0a1      	b.n	8000662 <__aeabi_fdiv+0x1ca>
 800051e:	2b01      	cmp	r3, #1
 8000520:	d018      	beq.n	8000554 <__aeabi_fdiv+0xbc>
 8000522:	003b      	movs	r3, r7
 8000524:	337f      	adds	r3, #127	; 0x7f
 8000526:	2b00      	cmp	r3, #0
 8000528:	dd6d      	ble.n	8000606 <__aeabi_fdiv+0x16e>
 800052a:	076a      	lsls	r2, r5, #29
 800052c:	d004      	beq.n	8000538 <__aeabi_fdiv+0xa0>
 800052e:	220f      	movs	r2, #15
 8000530:	402a      	ands	r2, r5
 8000532:	2a04      	cmp	r2, #4
 8000534:	d000      	beq.n	8000538 <__aeabi_fdiv+0xa0>
 8000536:	3504      	adds	r5, #4
 8000538:	012a      	lsls	r2, r5, #4
 800053a:	d503      	bpl.n	8000544 <__aeabi_fdiv+0xac>
 800053c:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <__aeabi_fdiv+0x22c>)
 800053e:	401d      	ands	r5, r3
 8000540:	003b      	movs	r3, r7
 8000542:	3380      	adds	r3, #128	; 0x80
 8000544:	2bfe      	cmp	r3, #254	; 0xfe
 8000546:	dd00      	ble.n	800054a <__aeabi_fdiv+0xb2>
 8000548:	e074      	b.n	8000634 <__aeabi_fdiv+0x19c>
 800054a:	01aa      	lsls	r2, r5, #6
 800054c:	0a52      	lsrs	r2, r2, #9
 800054e:	b2d8      	uxtb	r0, r3
 8000550:	e002      	b.n	8000558 <__aeabi_fdiv+0xc0>
 8000552:	000e      	movs	r6, r1
 8000554:	2000      	movs	r0, #0
 8000556:	2200      	movs	r2, #0
 8000558:	05c0      	lsls	r0, r0, #23
 800055a:	07f6      	lsls	r6, r6, #31
 800055c:	4310      	orrs	r0, r2
 800055e:	4330      	orrs	r0, r6
 8000560:	bce0      	pop	{r5, r6, r7}
 8000562:	46ba      	mov	sl, r7
 8000564:	46b1      	mov	r9, r6
 8000566:	46a8      	mov	r8, r5
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	4643      	mov	r3, r8
 800056c:	2b00      	cmp	r3, #0
 800056e:	d13f      	bne.n	80005f0 <__aeabi_fdiv+0x158>
 8000570:	2202      	movs	r2, #2
 8000572:	3fff      	subs	r7, #255	; 0xff
 8000574:	e003      	b.n	800057e <__aeabi_fdiv+0xe6>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d12d      	bne.n	80005d8 <__aeabi_fdiv+0x140>
 800057c:	2201      	movs	r2, #1
 800057e:	0031      	movs	r1, r6
 8000580:	464b      	mov	r3, r9
 8000582:	4061      	eors	r1, r4
 8000584:	b2c9      	uxtb	r1, r1
 8000586:	4313      	orrs	r3, r2
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d838      	bhi.n	80005fe <__aeabi_fdiv+0x166>
 800058c:	484e      	ldr	r0, [pc, #312]	; (80006c8 <__aeabi_fdiv+0x230>)
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	58c3      	ldr	r3, [r0, r3]
 8000592:	469f      	mov	pc, r3
 8000594:	2d00      	cmp	r5, #0
 8000596:	d113      	bne.n	80005c0 <__aeabi_fdiv+0x128>
 8000598:	2304      	movs	r3, #4
 800059a:	4699      	mov	r9, r3
 800059c:	3b03      	subs	r3, #3
 800059e:	2700      	movs	r7, #0
 80005a0:	469a      	mov	sl, r3
 80005a2:	e792      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d105      	bne.n	80005b4 <__aeabi_fdiv+0x11c>
 80005a8:	2308      	movs	r3, #8
 80005aa:	4699      	mov	r9, r3
 80005ac:	3b06      	subs	r3, #6
 80005ae:	27ff      	movs	r7, #255	; 0xff
 80005b0:	469a      	mov	sl, r3
 80005b2:	e78a      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005b4:	230c      	movs	r3, #12
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	27ff      	movs	r7, #255	; 0xff
 80005bc:	469a      	mov	sl, r3
 80005be:	e784      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005c0:	0028      	movs	r0, r5
 80005c2:	f001 f837 	bl	8001634 <__clzsi2>
 80005c6:	2776      	movs	r7, #118	; 0x76
 80005c8:	1f43      	subs	r3, r0, #5
 80005ca:	409d      	lsls	r5, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	427f      	negs	r7, r7
 80005d0:	4699      	mov	r9, r3
 80005d2:	469a      	mov	sl, r3
 80005d4:	1a3f      	subs	r7, r7, r0
 80005d6:	e778      	b.n	80004ca <__aeabi_fdiv+0x32>
 80005d8:	4640      	mov	r0, r8
 80005da:	f001 f82b 	bl	8001634 <__clzsi2>
 80005de:	4642      	mov	r2, r8
 80005e0:	1f43      	subs	r3, r0, #5
 80005e2:	409a      	lsls	r2, r3
 80005e4:	2376      	movs	r3, #118	; 0x76
 80005e6:	425b      	negs	r3, r3
 80005e8:	4690      	mov	r8, r2
 80005ea:	1a1b      	subs	r3, r3, r0
 80005ec:	2200      	movs	r2, #0
 80005ee:	e77e      	b.n	80004ee <__aeabi_fdiv+0x56>
 80005f0:	2303      	movs	r3, #3
 80005f2:	464a      	mov	r2, r9
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	33fc      	adds	r3, #252	; 0xfc
 80005fa:	2203      	movs	r2, #3
 80005fc:	e777      	b.n	80004ee <__aeabi_fdiv+0x56>
 80005fe:	000e      	movs	r6, r1
 8000600:	20ff      	movs	r0, #255	; 0xff
 8000602:	2200      	movs	r2, #0
 8000604:	e7a8      	b.n	8000558 <__aeabi_fdiv+0xc0>
 8000606:	2201      	movs	r2, #1
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	2b1b      	cmp	r3, #27
 800060c:	dca2      	bgt.n	8000554 <__aeabi_fdiv+0xbc>
 800060e:	379e      	adds	r7, #158	; 0x9e
 8000610:	002a      	movs	r2, r5
 8000612:	40bd      	lsls	r5, r7
 8000614:	40da      	lsrs	r2, r3
 8000616:	1e6b      	subs	r3, r5, #1
 8000618:	419d      	sbcs	r5, r3
 800061a:	4315      	orrs	r5, r2
 800061c:	076a      	lsls	r2, r5, #29
 800061e:	d004      	beq.n	800062a <__aeabi_fdiv+0x192>
 8000620:	220f      	movs	r2, #15
 8000622:	402a      	ands	r2, r5
 8000624:	2a04      	cmp	r2, #4
 8000626:	d000      	beq.n	800062a <__aeabi_fdiv+0x192>
 8000628:	3504      	adds	r5, #4
 800062a:	016a      	lsls	r2, r5, #5
 800062c:	d544      	bpl.n	80006b8 <__aeabi_fdiv+0x220>
 800062e:	2001      	movs	r0, #1
 8000630:	2200      	movs	r2, #0
 8000632:	e791      	b.n	8000558 <__aeabi_fdiv+0xc0>
 8000634:	20ff      	movs	r0, #255	; 0xff
 8000636:	2200      	movs	r2, #0
 8000638:	e78e      	b.n	8000558 <__aeabi_fdiv+0xc0>
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	2600      	movs	r6, #0
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	03d2      	lsls	r2, r2, #15
 8000642:	e789      	b.n	8000558 <__aeabi_fdiv+0xc0>
 8000644:	2300      	movs	r3, #0
 8000646:	4698      	mov	r8, r3
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	03d2      	lsls	r2, r2, #15
 800064c:	4215      	tst	r5, r2
 800064e:	d008      	beq.n	8000662 <__aeabi_fdiv+0x1ca>
 8000650:	4643      	mov	r3, r8
 8000652:	4213      	tst	r3, r2
 8000654:	d105      	bne.n	8000662 <__aeabi_fdiv+0x1ca>
 8000656:	431a      	orrs	r2, r3
 8000658:	0252      	lsls	r2, r2, #9
 800065a:	0026      	movs	r6, r4
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	0a52      	lsrs	r2, r2, #9
 8000660:	e77a      	b.n	8000558 <__aeabi_fdiv+0xc0>
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	03d2      	lsls	r2, r2, #15
 8000666:	432a      	orrs	r2, r5
 8000668:	0252      	lsls	r2, r2, #9
 800066a:	20ff      	movs	r0, #255	; 0xff
 800066c:	0a52      	lsrs	r2, r2, #9
 800066e:	e773      	b.n	8000558 <__aeabi_fdiv+0xc0>
 8000670:	4642      	mov	r2, r8
 8000672:	016b      	lsls	r3, r5, #5
 8000674:	0155      	lsls	r5, r2, #5
 8000676:	42ab      	cmp	r3, r5
 8000678:	d21a      	bcs.n	80006b0 <__aeabi_fdiv+0x218>
 800067a:	201b      	movs	r0, #27
 800067c:	2200      	movs	r2, #0
 800067e:	3f01      	subs	r7, #1
 8000680:	2601      	movs	r6, #1
 8000682:	001c      	movs	r4, r3
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2c00      	cmp	r4, #0
 800068a:	db01      	blt.n	8000690 <__aeabi_fdiv+0x1f8>
 800068c:	429d      	cmp	r5, r3
 800068e:	d801      	bhi.n	8000694 <__aeabi_fdiv+0x1fc>
 8000690:	1b5b      	subs	r3, r3, r5
 8000692:	4332      	orrs	r2, r6
 8000694:	3801      	subs	r0, #1
 8000696:	2800      	cmp	r0, #0
 8000698:	d1f3      	bne.n	8000682 <__aeabi_fdiv+0x1ea>
 800069a:	1e58      	subs	r0, r3, #1
 800069c:	4183      	sbcs	r3, r0
 800069e:	4313      	orrs	r3, r2
 80006a0:	001d      	movs	r5, r3
 80006a2:	003b      	movs	r3, r7
 80006a4:	337f      	adds	r3, #127	; 0x7f
 80006a6:	000e      	movs	r6, r1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dd00      	ble.n	80006ae <__aeabi_fdiv+0x216>
 80006ac:	e73d      	b.n	800052a <__aeabi_fdiv+0x92>
 80006ae:	e7aa      	b.n	8000606 <__aeabi_fdiv+0x16e>
 80006b0:	201a      	movs	r0, #26
 80006b2:	2201      	movs	r2, #1
 80006b4:	1b5b      	subs	r3, r3, r5
 80006b6:	e7e3      	b.n	8000680 <__aeabi_fdiv+0x1e8>
 80006b8:	01aa      	lsls	r2, r5, #6
 80006ba:	2000      	movs	r0, #0
 80006bc:	0a52      	lsrs	r2, r2, #9
 80006be:	e74b      	b.n	8000558 <__aeabi_fdiv+0xc0>
 80006c0:	08009a10 	.word	0x08009a10
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	08009a50 	.word	0x08009a50

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	0245      	lsls	r5, r0, #9
 80006d2:	024e      	lsls	r6, r1, #9
 80006d4:	004c      	lsls	r4, r1, #1
 80006d6:	0fc3      	lsrs	r3, r0, #31
 80006d8:	0a6d      	lsrs	r5, r5, #9
 80006da:	2001      	movs	r0, #1
 80006dc:	0e12      	lsrs	r2, r2, #24
 80006de:	0a76      	lsrs	r6, r6, #9
 80006e0:	0e24      	lsrs	r4, r4, #24
 80006e2:	0fc9      	lsrs	r1, r1, #31
 80006e4:	2aff      	cmp	r2, #255	; 0xff
 80006e6:	d006      	beq.n	80006f6 <__eqsf2+0x2a>
 80006e8:	2cff      	cmp	r4, #255	; 0xff
 80006ea:	d003      	beq.n	80006f4 <__eqsf2+0x28>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d101      	bne.n	80006f4 <__eqsf2+0x28>
 80006f0:	42b5      	cmp	r5, r6
 80006f2:	d006      	beq.n	8000702 <__eqsf2+0x36>
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d1fc      	bne.n	80006f4 <__eqsf2+0x28>
 80006fa:	2cff      	cmp	r4, #255	; 0xff
 80006fc:	d1fa      	bne.n	80006f4 <__eqsf2+0x28>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d1f8      	bne.n	80006f4 <__eqsf2+0x28>
 8000702:	428b      	cmp	r3, r1
 8000704:	d006      	beq.n	8000714 <__eqsf2+0x48>
 8000706:	2001      	movs	r0, #1
 8000708:	2a00      	cmp	r2, #0
 800070a:	d1f3      	bne.n	80006f4 <__eqsf2+0x28>
 800070c:	0028      	movs	r0, r5
 800070e:	1e43      	subs	r3, r0, #1
 8000710:	4198      	sbcs	r0, r3
 8000712:	e7ef      	b.n	80006f4 <__eqsf2+0x28>
 8000714:	2000      	movs	r0, #0
 8000716:	e7ed      	b.n	80006f4 <__eqsf2+0x28>

08000718 <__gesf2>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	0042      	lsls	r2, r0, #1
 800071c:	0245      	lsls	r5, r0, #9
 800071e:	024e      	lsls	r6, r1, #9
 8000720:	004c      	lsls	r4, r1, #1
 8000722:	0fc3      	lsrs	r3, r0, #31
 8000724:	0a6d      	lsrs	r5, r5, #9
 8000726:	0e12      	lsrs	r2, r2, #24
 8000728:	0a76      	lsrs	r6, r6, #9
 800072a:	0e24      	lsrs	r4, r4, #24
 800072c:	0fc8      	lsrs	r0, r1, #31
 800072e:	2aff      	cmp	r2, #255	; 0xff
 8000730:	d01b      	beq.n	800076a <__gesf2+0x52>
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d00e      	beq.n	8000754 <__gesf2+0x3c>
 8000736:	2a00      	cmp	r2, #0
 8000738:	d11b      	bne.n	8000772 <__gesf2+0x5a>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d101      	bne.n	8000742 <__gesf2+0x2a>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d01c      	beq.n	800077c <__gesf2+0x64>
 8000742:	2d00      	cmp	r5, #0
 8000744:	d00c      	beq.n	8000760 <__gesf2+0x48>
 8000746:	4283      	cmp	r3, r0
 8000748:	d01c      	beq.n	8000784 <__gesf2+0x6c>
 800074a:	2102      	movs	r1, #2
 800074c:	1e58      	subs	r0, r3, #1
 800074e:	4008      	ands	r0, r1
 8000750:	3801      	subs	r0, #1
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	2e00      	cmp	r6, #0
 8000756:	d122      	bne.n	800079e <__gesf2+0x86>
 8000758:	2a00      	cmp	r2, #0
 800075a:	d1f4      	bne.n	8000746 <__gesf2+0x2e>
 800075c:	2d00      	cmp	r5, #0
 800075e:	d1f2      	bne.n	8000746 <__gesf2+0x2e>
 8000760:	2800      	cmp	r0, #0
 8000762:	d1f6      	bne.n	8000752 <__gesf2+0x3a>
 8000764:	2001      	movs	r0, #1
 8000766:	4240      	negs	r0, r0
 8000768:	e7f3      	b.n	8000752 <__gesf2+0x3a>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d117      	bne.n	800079e <__gesf2+0x86>
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	d0f0      	beq.n	8000754 <__gesf2+0x3c>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d1e7      	bne.n	8000746 <__gesf2+0x2e>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d1e5      	bne.n	8000746 <__gesf2+0x2e>
 800077a:	e7e6      	b.n	800074a <__gesf2+0x32>
 800077c:	2000      	movs	r0, #0
 800077e:	2d00      	cmp	r5, #0
 8000780:	d0e7      	beq.n	8000752 <__gesf2+0x3a>
 8000782:	e7e2      	b.n	800074a <__gesf2+0x32>
 8000784:	42a2      	cmp	r2, r4
 8000786:	dc05      	bgt.n	8000794 <__gesf2+0x7c>
 8000788:	dbea      	blt.n	8000760 <__gesf2+0x48>
 800078a:	42b5      	cmp	r5, r6
 800078c:	d802      	bhi.n	8000794 <__gesf2+0x7c>
 800078e:	d3e7      	bcc.n	8000760 <__gesf2+0x48>
 8000790:	2000      	movs	r0, #0
 8000792:	e7de      	b.n	8000752 <__gesf2+0x3a>
 8000794:	4243      	negs	r3, r0
 8000796:	4158      	adcs	r0, r3
 8000798:	0040      	lsls	r0, r0, #1
 800079a:	3801      	subs	r0, #1
 800079c:	e7d9      	b.n	8000752 <__gesf2+0x3a>
 800079e:	2002      	movs	r0, #2
 80007a0:	4240      	negs	r0, r0
 80007a2:	e7d6      	b.n	8000752 <__gesf2+0x3a>

080007a4 <__lesf2>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	0042      	lsls	r2, r0, #1
 80007a8:	0245      	lsls	r5, r0, #9
 80007aa:	024e      	lsls	r6, r1, #9
 80007ac:	004c      	lsls	r4, r1, #1
 80007ae:	0fc3      	lsrs	r3, r0, #31
 80007b0:	0a6d      	lsrs	r5, r5, #9
 80007b2:	0e12      	lsrs	r2, r2, #24
 80007b4:	0a76      	lsrs	r6, r6, #9
 80007b6:	0e24      	lsrs	r4, r4, #24
 80007b8:	0fc8      	lsrs	r0, r1, #31
 80007ba:	2aff      	cmp	r2, #255	; 0xff
 80007bc:	d00b      	beq.n	80007d6 <__lesf2+0x32>
 80007be:	2cff      	cmp	r4, #255	; 0xff
 80007c0:	d00d      	beq.n	80007de <__lesf2+0x3a>
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d11f      	bne.n	8000806 <__lesf2+0x62>
 80007c6:	2c00      	cmp	r4, #0
 80007c8:	d116      	bne.n	80007f8 <__lesf2+0x54>
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d114      	bne.n	80007f8 <__lesf2+0x54>
 80007ce:	2000      	movs	r0, #0
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d010      	beq.n	80007f6 <__lesf2+0x52>
 80007d4:	e009      	b.n	80007ea <__lesf2+0x46>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d10c      	bne.n	80007f4 <__lesf2+0x50>
 80007da:	2cff      	cmp	r4, #255	; 0xff
 80007dc:	d113      	bne.n	8000806 <__lesf2+0x62>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d108      	bne.n	80007f4 <__lesf2+0x50>
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d008      	beq.n	80007f8 <__lesf2+0x54>
 80007e6:	4283      	cmp	r3, r0
 80007e8:	d012      	beq.n	8000810 <__lesf2+0x6c>
 80007ea:	2102      	movs	r1, #2
 80007ec:	1e58      	subs	r0, r3, #1
 80007ee:	4008      	ands	r0, r1
 80007f0:	3801      	subs	r0, #1
 80007f2:	e000      	b.n	80007f6 <__lesf2+0x52>
 80007f4:	2002      	movs	r0, #2
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d1f4      	bne.n	80007e6 <__lesf2+0x42>
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d1fa      	bne.n	80007f6 <__lesf2+0x52>
 8000800:	2001      	movs	r0, #1
 8000802:	4240      	negs	r0, r0
 8000804:	e7f7      	b.n	80007f6 <__lesf2+0x52>
 8000806:	2c00      	cmp	r4, #0
 8000808:	d1ed      	bne.n	80007e6 <__lesf2+0x42>
 800080a:	2e00      	cmp	r6, #0
 800080c:	d1eb      	bne.n	80007e6 <__lesf2+0x42>
 800080e:	e7ec      	b.n	80007ea <__lesf2+0x46>
 8000810:	42a2      	cmp	r2, r4
 8000812:	dc05      	bgt.n	8000820 <__lesf2+0x7c>
 8000814:	dbf2      	blt.n	80007fc <__lesf2+0x58>
 8000816:	42b5      	cmp	r5, r6
 8000818:	d802      	bhi.n	8000820 <__lesf2+0x7c>
 800081a:	d3ef      	bcc.n	80007fc <__lesf2+0x58>
 800081c:	2000      	movs	r0, #0
 800081e:	e7ea      	b.n	80007f6 <__lesf2+0x52>
 8000820:	4243      	negs	r3, r0
 8000822:	4158      	adcs	r0, r3
 8000824:	0040      	lsls	r0, r0, #1
 8000826:	3801      	subs	r0, #1
 8000828:	e7e5      	b.n	80007f6 <__lesf2+0x52>
 800082a:	46c0      	nop			; (mov r8, r8)

0800082c <__aeabi_fmul>:
 800082c:	0243      	lsls	r3, r0, #9
 800082e:	0a5b      	lsrs	r3, r3, #9
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	464f      	mov	r7, r9
 8000834:	4646      	mov	r6, r8
 8000836:	4699      	mov	r9, r3
 8000838:	46d6      	mov	lr, sl
 800083a:	0fc3      	lsrs	r3, r0, #31
 800083c:	0045      	lsls	r5, r0, #1
 800083e:	4698      	mov	r8, r3
 8000840:	b5c0      	push	{r6, r7, lr}
 8000842:	464b      	mov	r3, r9
 8000844:	1c0f      	adds	r7, r1, #0
 8000846:	0e2d      	lsrs	r5, r5, #24
 8000848:	d100      	bne.n	800084c <__aeabi_fmul+0x20>
 800084a:	e0cb      	b.n	80009e4 <__aeabi_fmul+0x1b8>
 800084c:	2dff      	cmp	r5, #255	; 0xff
 800084e:	d100      	bne.n	8000852 <__aeabi_fmul+0x26>
 8000850:	e0cf      	b.n	80009f2 <__aeabi_fmul+0x1c6>
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	04d2      	lsls	r2, r2, #19
 8000858:	431a      	orrs	r2, r3
 800085a:	2300      	movs	r3, #0
 800085c:	4691      	mov	r9, r2
 800085e:	2600      	movs	r6, #0
 8000860:	469a      	mov	sl, r3
 8000862:	3d7f      	subs	r5, #127	; 0x7f
 8000864:	027c      	lsls	r4, r7, #9
 8000866:	007b      	lsls	r3, r7, #1
 8000868:	0a64      	lsrs	r4, r4, #9
 800086a:	0e1b      	lsrs	r3, r3, #24
 800086c:	0fff      	lsrs	r7, r7, #31
 800086e:	2b00      	cmp	r3, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fmul+0x48>
 8000872:	e0a9      	b.n	80009c8 <__aeabi_fmul+0x19c>
 8000874:	2bff      	cmp	r3, #255	; 0xff
 8000876:	d011      	beq.n	800089c <__aeabi_fmul+0x70>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	00e4      	lsls	r4, r4, #3
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4314      	orrs	r4, r2
 8000880:	4642      	mov	r2, r8
 8000882:	3b7f      	subs	r3, #127	; 0x7f
 8000884:	195b      	adds	r3, r3, r5
 8000886:	407a      	eors	r2, r7
 8000888:	2000      	movs	r0, #0
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	1c5d      	adds	r5, r3, #1
 800088e:	2e0a      	cmp	r6, #10
 8000890:	dd13      	ble.n	80008ba <__aeabi_fmul+0x8e>
 8000892:	003a      	movs	r2, r7
 8000894:	2e0b      	cmp	r6, #11
 8000896:	d047      	beq.n	8000928 <__aeabi_fmul+0xfc>
 8000898:	4647      	mov	r7, r8
 800089a:	e03f      	b.n	800091c <__aeabi_fmul+0xf0>
 800089c:	002b      	movs	r3, r5
 800089e:	33ff      	adds	r3, #255	; 0xff
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d11e      	bne.n	80008e2 <__aeabi_fmul+0xb6>
 80008a4:	2202      	movs	r2, #2
 80008a6:	4316      	orrs	r6, r2
 80008a8:	4642      	mov	r2, r8
 80008aa:	3501      	adds	r5, #1
 80008ac:	407a      	eors	r2, r7
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	35ff      	adds	r5, #255	; 0xff
 80008b2:	2e0a      	cmp	r6, #10
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_fmul+0x8c>
 80008b6:	e0e4      	b.n	8000a82 <__aeabi_fmul+0x256>
 80008b8:	2002      	movs	r0, #2
 80008ba:	2e02      	cmp	r6, #2
 80008bc:	dc1c      	bgt.n	80008f8 <__aeabi_fmul+0xcc>
 80008be:	3e01      	subs	r6, #1
 80008c0:	2e01      	cmp	r6, #1
 80008c2:	d842      	bhi.n	800094a <__aeabi_fmul+0x11e>
 80008c4:	2802      	cmp	r0, #2
 80008c6:	d03d      	beq.n	8000944 <__aeabi_fmul+0x118>
 80008c8:	2801      	cmp	r0, #1
 80008ca:	d166      	bne.n	800099a <__aeabi_fmul+0x16e>
 80008cc:	2000      	movs	r0, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	05c0      	lsls	r0, r0, #23
 80008d2:	4308      	orrs	r0, r1
 80008d4:	07d2      	lsls	r2, r2, #31
 80008d6:	4310      	orrs	r0, r2
 80008d8:	bce0      	pop	{r5, r6, r7}
 80008da:	46ba      	mov	sl, r7
 80008dc:	46b1      	mov	r9, r6
 80008de:	46a8      	mov	r8, r5
 80008e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e2:	2203      	movs	r2, #3
 80008e4:	4316      	orrs	r6, r2
 80008e6:	4642      	mov	r2, r8
 80008e8:	3501      	adds	r5, #1
 80008ea:	407a      	eors	r2, r7
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	35ff      	adds	r5, #255	; 0xff
 80008f0:	2e0a      	cmp	r6, #10
 80008f2:	dd00      	ble.n	80008f6 <__aeabi_fmul+0xca>
 80008f4:	e0e4      	b.n	8000ac0 <__aeabi_fmul+0x294>
 80008f6:	2003      	movs	r0, #3
 80008f8:	2101      	movs	r1, #1
 80008fa:	40b1      	lsls	r1, r6
 80008fc:	26a6      	movs	r6, #166	; 0xa6
 80008fe:	00f6      	lsls	r6, r6, #3
 8000900:	4231      	tst	r1, r6
 8000902:	d10a      	bne.n	800091a <__aeabi_fmul+0xee>
 8000904:	2690      	movs	r6, #144	; 0x90
 8000906:	00b6      	lsls	r6, r6, #2
 8000908:	4231      	tst	r1, r6
 800090a:	d116      	bne.n	800093a <__aeabi_fmul+0x10e>
 800090c:	3eb9      	subs	r6, #185	; 0xb9
 800090e:	3eff      	subs	r6, #255	; 0xff
 8000910:	420e      	tst	r6, r1
 8000912:	d01a      	beq.n	800094a <__aeabi_fmul+0x11e>
 8000914:	46a1      	mov	r9, r4
 8000916:	4682      	mov	sl, r0
 8000918:	e000      	b.n	800091c <__aeabi_fmul+0xf0>
 800091a:	0017      	movs	r7, r2
 800091c:	4653      	mov	r3, sl
 800091e:	003a      	movs	r2, r7
 8000920:	2b02      	cmp	r3, #2
 8000922:	d00f      	beq.n	8000944 <__aeabi_fmul+0x118>
 8000924:	464c      	mov	r4, r9
 8000926:	4650      	mov	r0, sl
 8000928:	2803      	cmp	r0, #3
 800092a:	d1cd      	bne.n	80008c8 <__aeabi_fmul+0x9c>
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	03c9      	lsls	r1, r1, #15
 8000930:	4321      	orrs	r1, r4
 8000932:	0249      	lsls	r1, r1, #9
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	0a49      	lsrs	r1, r1, #9
 8000938:	e7ca      	b.n	80008d0 <__aeabi_fmul+0xa4>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	2200      	movs	r2, #0
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	03c9      	lsls	r1, r1, #15
 8000942:	e7c5      	b.n	80008d0 <__aeabi_fmul+0xa4>
 8000944:	20ff      	movs	r0, #255	; 0xff
 8000946:	2100      	movs	r1, #0
 8000948:	e7c2      	b.n	80008d0 <__aeabi_fmul+0xa4>
 800094a:	0c20      	lsrs	r0, r4, #16
 800094c:	4649      	mov	r1, r9
 800094e:	0424      	lsls	r4, r4, #16
 8000950:	0c24      	lsrs	r4, r4, #16
 8000952:	0027      	movs	r7, r4
 8000954:	0c0e      	lsrs	r6, r1, #16
 8000956:	0409      	lsls	r1, r1, #16
 8000958:	0c09      	lsrs	r1, r1, #16
 800095a:	4374      	muls	r4, r6
 800095c:	434f      	muls	r7, r1
 800095e:	4346      	muls	r6, r0
 8000960:	4348      	muls	r0, r1
 8000962:	0c39      	lsrs	r1, r7, #16
 8000964:	1900      	adds	r0, r0, r4
 8000966:	1809      	adds	r1, r1, r0
 8000968:	428c      	cmp	r4, r1
 800096a:	d903      	bls.n	8000974 <__aeabi_fmul+0x148>
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	0240      	lsls	r0, r0, #9
 8000970:	4684      	mov	ip, r0
 8000972:	4466      	add	r6, ip
 8000974:	043f      	lsls	r7, r7, #16
 8000976:	0408      	lsls	r0, r1, #16
 8000978:	0c3f      	lsrs	r7, r7, #16
 800097a:	19c0      	adds	r0, r0, r7
 800097c:	0184      	lsls	r4, r0, #6
 800097e:	1e67      	subs	r7, r4, #1
 8000980:	41bc      	sbcs	r4, r7
 8000982:	0c09      	lsrs	r1, r1, #16
 8000984:	0e80      	lsrs	r0, r0, #26
 8000986:	1989      	adds	r1, r1, r6
 8000988:	4304      	orrs	r4, r0
 800098a:	0189      	lsls	r1, r1, #6
 800098c:	430c      	orrs	r4, r1
 800098e:	0109      	lsls	r1, r1, #4
 8000990:	d571      	bpl.n	8000a76 <__aeabi_fmul+0x24a>
 8000992:	2301      	movs	r3, #1
 8000994:	0861      	lsrs	r1, r4, #1
 8000996:	401c      	ands	r4, r3
 8000998:	430c      	orrs	r4, r1
 800099a:	002b      	movs	r3, r5
 800099c:	337f      	adds	r3, #127	; 0x7f
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd51      	ble.n	8000a46 <__aeabi_fmul+0x21a>
 80009a2:	0761      	lsls	r1, r4, #29
 80009a4:	d004      	beq.n	80009b0 <__aeabi_fmul+0x184>
 80009a6:	210f      	movs	r1, #15
 80009a8:	4021      	ands	r1, r4
 80009aa:	2904      	cmp	r1, #4
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x184>
 80009ae:	3404      	adds	r4, #4
 80009b0:	0121      	lsls	r1, r4, #4
 80009b2:	d503      	bpl.n	80009bc <__aeabi_fmul+0x190>
 80009b4:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <__aeabi_fmul+0x298>)
 80009b6:	401c      	ands	r4, r3
 80009b8:	002b      	movs	r3, r5
 80009ba:	3380      	adds	r3, #128	; 0x80
 80009bc:	2bfe      	cmp	r3, #254	; 0xfe
 80009be:	dcc1      	bgt.n	8000944 <__aeabi_fmul+0x118>
 80009c0:	01a1      	lsls	r1, r4, #6
 80009c2:	0a49      	lsrs	r1, r1, #9
 80009c4:	b2d8      	uxtb	r0, r3
 80009c6:	e783      	b.n	80008d0 <__aeabi_fmul+0xa4>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d12c      	bne.n	8000a26 <__aeabi_fmul+0x1fa>
 80009cc:	2301      	movs	r3, #1
 80009ce:	4642      	mov	r2, r8
 80009d0:	431e      	orrs	r6, r3
 80009d2:	002b      	movs	r3, r5
 80009d4:	407a      	eors	r2, r7
 80009d6:	2001      	movs	r0, #1
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	1c5d      	adds	r5, r3, #1
 80009dc:	2e0a      	cmp	r6, #10
 80009de:	dd00      	ble.n	80009e2 <__aeabi_fmul+0x1b6>
 80009e0:	e757      	b.n	8000892 <__aeabi_fmul+0x66>
 80009e2:	e76a      	b.n	80008ba <__aeabi_fmul+0x8e>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d110      	bne.n	8000a0a <__aeabi_fmul+0x1de>
 80009e8:	2301      	movs	r3, #1
 80009ea:	2604      	movs	r6, #4
 80009ec:	2500      	movs	r5, #0
 80009ee:	469a      	mov	sl, r3
 80009f0:	e738      	b.n	8000864 <__aeabi_fmul+0x38>
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d104      	bne.n	8000a00 <__aeabi_fmul+0x1d4>
 80009f6:	2302      	movs	r3, #2
 80009f8:	2608      	movs	r6, #8
 80009fa:	25ff      	movs	r5, #255	; 0xff
 80009fc:	469a      	mov	sl, r3
 80009fe:	e731      	b.n	8000864 <__aeabi_fmul+0x38>
 8000a00:	2303      	movs	r3, #3
 8000a02:	260c      	movs	r6, #12
 8000a04:	25ff      	movs	r5, #255	; 0xff
 8000a06:	469a      	mov	sl, r3
 8000a08:	e72c      	b.n	8000864 <__aeabi_fmul+0x38>
 8000a0a:	4648      	mov	r0, r9
 8000a0c:	f000 fe12 	bl	8001634 <__clzsi2>
 8000a10:	464a      	mov	r2, r9
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	2576      	movs	r5, #118	; 0x76
 8000a16:	409a      	lsls	r2, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	426d      	negs	r5, r5
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	2600      	movs	r6, #0
 8000a20:	469a      	mov	sl, r3
 8000a22:	1a2d      	subs	r5, r5, r0
 8000a24:	e71e      	b.n	8000864 <__aeabi_fmul+0x38>
 8000a26:	0020      	movs	r0, r4
 8000a28:	f000 fe04 	bl	8001634 <__clzsi2>
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	1f43      	subs	r3, r0, #5
 8000a30:	409c      	lsls	r4, r3
 8000a32:	1a2b      	subs	r3, r5, r0
 8000a34:	3b76      	subs	r3, #118	; 0x76
 8000a36:	407a      	eors	r2, r7
 8000a38:	2000      	movs	r0, #0
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	1c5d      	adds	r5, r3, #1
 8000a3e:	2e0a      	cmp	r6, #10
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_fmul+0x218>
 8000a42:	e726      	b.n	8000892 <__aeabi_fmul+0x66>
 8000a44:	e739      	b.n	80008ba <__aeabi_fmul+0x8e>
 8000a46:	2101      	movs	r1, #1
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	2b1b      	cmp	r3, #27
 8000a4c:	dd00      	ble.n	8000a50 <__aeabi_fmul+0x224>
 8000a4e:	e73d      	b.n	80008cc <__aeabi_fmul+0xa0>
 8000a50:	359e      	adds	r5, #158	; 0x9e
 8000a52:	0021      	movs	r1, r4
 8000a54:	40ac      	lsls	r4, r5
 8000a56:	40d9      	lsrs	r1, r3
 8000a58:	1e63      	subs	r3, r4, #1
 8000a5a:	419c      	sbcs	r4, r3
 8000a5c:	4321      	orrs	r1, r4
 8000a5e:	074b      	lsls	r3, r1, #29
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fmul+0x240>
 8000a62:	230f      	movs	r3, #15
 8000a64:	400b      	ands	r3, r1
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fmul+0x240>
 8000a6a:	3104      	adds	r1, #4
 8000a6c:	014b      	lsls	r3, r1, #5
 8000a6e:	d504      	bpl.n	8000a7a <__aeabi_fmul+0x24e>
 8000a70:	2001      	movs	r0, #1
 8000a72:	2100      	movs	r1, #0
 8000a74:	e72c      	b.n	80008d0 <__aeabi_fmul+0xa4>
 8000a76:	001d      	movs	r5, r3
 8000a78:	e78f      	b.n	800099a <__aeabi_fmul+0x16e>
 8000a7a:	0189      	lsls	r1, r1, #6
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	0a49      	lsrs	r1, r1, #9
 8000a80:	e726      	b.n	80008d0 <__aeabi_fmul+0xa4>
 8000a82:	2302      	movs	r3, #2
 8000a84:	2e0f      	cmp	r6, #15
 8000a86:	d10c      	bne.n	8000aa2 <__aeabi_fmul+0x276>
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	03c9      	lsls	r1, r1, #15
 8000a8e:	420b      	tst	r3, r1
 8000a90:	d00d      	beq.n	8000aae <__aeabi_fmul+0x282>
 8000a92:	420c      	tst	r4, r1
 8000a94:	d10b      	bne.n	8000aae <__aeabi_fmul+0x282>
 8000a96:	4321      	orrs	r1, r4
 8000a98:	0249      	lsls	r1, r1, #9
 8000a9a:	003a      	movs	r2, r7
 8000a9c:	20ff      	movs	r0, #255	; 0xff
 8000a9e:	0a49      	lsrs	r1, r1, #9
 8000aa0:	e716      	b.n	80008d0 <__aeabi_fmul+0xa4>
 8000aa2:	2e0b      	cmp	r6, #11
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fmul+0x27c>
 8000aa6:	e6f7      	b.n	8000898 <__aeabi_fmul+0x6c>
 8000aa8:	46a1      	mov	r9, r4
 8000aaa:	469a      	mov	sl, r3
 8000aac:	e736      	b.n	800091c <__aeabi_fmul+0xf0>
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	03c9      	lsls	r1, r1, #15
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	0249      	lsls	r1, r1, #9
 8000ab8:	4642      	mov	r2, r8
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	0a49      	lsrs	r1, r1, #9
 8000abe:	e707      	b.n	80008d0 <__aeabi_fmul+0xa4>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e7df      	b.n	8000a84 <__aeabi_fmul+0x258>
 8000ac4:	f7ffffff 	.word	0xf7ffffff

08000ac8 <__aeabi_fsub>:
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aca:	46c6      	mov	lr, r8
 8000acc:	0243      	lsls	r3, r0, #9
 8000ace:	0a5b      	lsrs	r3, r3, #9
 8000ad0:	0045      	lsls	r5, r0, #1
 8000ad2:	00da      	lsls	r2, r3, #3
 8000ad4:	0fc4      	lsrs	r4, r0, #31
 8000ad6:	0248      	lsls	r0, r1, #9
 8000ad8:	004f      	lsls	r7, r1, #1
 8000ada:	4694      	mov	ip, r2
 8000adc:	0a42      	lsrs	r2, r0, #9
 8000ade:	001e      	movs	r6, r3
 8000ae0:	4690      	mov	r8, r2
 8000ae2:	b500      	push	{lr}
 8000ae4:	0e2d      	lsrs	r5, r5, #24
 8000ae6:	0e3f      	lsrs	r7, r7, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	0980      	lsrs	r0, r0, #6
 8000aec:	2fff      	cmp	r7, #255	; 0xff
 8000aee:	d059      	beq.n	8000ba4 <__aeabi_fsub+0xdc>
 8000af0:	2201      	movs	r2, #1
 8000af2:	4051      	eors	r1, r2
 8000af4:	428c      	cmp	r4, r1
 8000af6:	d039      	beq.n	8000b6c <__aeabi_fsub+0xa4>
 8000af8:	1bea      	subs	r2, r5, r7
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	dd58      	ble.n	8000bb0 <__aeabi_fsub+0xe8>
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d068      	beq.n	8000bd4 <__aeabi_fsub+0x10c>
 8000b02:	2dff      	cmp	r5, #255	; 0xff
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x40>
 8000b06:	e0d1      	b.n	8000cac <__aeabi_fsub+0x1e4>
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	04db      	lsls	r3, r3, #19
 8000b0c:	4318      	orrs	r0, r3
 8000b0e:	2a1b      	cmp	r2, #27
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_fsub+0x4c>
 8000b12:	e0e3      	b.n	8000cdc <__aeabi_fsub+0x214>
 8000b14:	2301      	movs	r3, #1
 8000b16:	4662      	mov	r2, ip
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	015a      	lsls	r2, r3, #5
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_fsub+0x58>
 8000b1e:	e0ac      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	099e      	lsrs	r6, r3, #6
 8000b24:	0030      	movs	r0, r6
 8000b26:	f000 fd85 	bl	8001634 <__clzsi2>
 8000b2a:	0033      	movs	r3, r6
 8000b2c:	3805      	subs	r0, #5
 8000b2e:	4083      	lsls	r3, r0
 8000b30:	4285      	cmp	r5, r0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x6e>
 8000b34:	e0c6      	b.n	8000cc4 <__aeabi_fsub+0x1fc>
 8000b36:	4ab2      	ldr	r2, [pc, #712]	; (8000e00 <__aeabi_fsub+0x338>)
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	075a      	lsls	r2, r3, #29
 8000b3e:	d004      	beq.n	8000b4a <__aeabi_fsub+0x82>
 8000b40:	220f      	movs	r2, #15
 8000b42:	401a      	ands	r2, r3
 8000b44:	2a04      	cmp	r2, #4
 8000b46:	d000      	beq.n	8000b4a <__aeabi_fsub+0x82>
 8000b48:	3304      	adds	r3, #4
 8000b4a:	015a      	lsls	r2, r3, #5
 8000b4c:	d400      	bmi.n	8000b50 <__aeabi_fsub+0x88>
 8000b4e:	e097      	b.n	8000c80 <__aeabi_fsub+0x1b8>
 8000b50:	1c6a      	adds	r2, r5, #1
 8000b52:	2dfe      	cmp	r5, #254	; 0xfe
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x90>
 8000b56:	e084      	b.n	8000c62 <__aeabi_fsub+0x19a>
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	0a5e      	lsrs	r6, r3, #9
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	05d0      	lsls	r0, r2, #23
 8000b60:	4330      	orrs	r0, r6
 8000b62:	07e4      	lsls	r4, r4, #31
 8000b64:	4320      	orrs	r0, r4
 8000b66:	bc80      	pop	{r7}
 8000b68:	46b8      	mov	r8, r7
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	1bea      	subs	r2, r5, r7
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	dd41      	ble.n	8000bf6 <__aeabi_fsub+0x12e>
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	d06b      	beq.n	8000c4e <__aeabi_fsub+0x186>
 8000b76:	2dff      	cmp	r5, #255	; 0xff
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0xb4>
 8000b7a:	e097      	b.n	8000cac <__aeabi_fsub+0x1e4>
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	04db      	lsls	r3, r3, #19
 8000b80:	4318      	orrs	r0, r3
 8000b82:	2a1b      	cmp	r2, #27
 8000b84:	dc00      	bgt.n	8000b88 <__aeabi_fsub+0xc0>
 8000b86:	e0cc      	b.n	8000d22 <__aeabi_fsub+0x25a>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	4463      	add	r3, ip
 8000b8c:	015a      	lsls	r2, r3, #5
 8000b8e:	d574      	bpl.n	8000c7a <__aeabi_fsub+0x1b2>
 8000b90:	3501      	adds	r5, #1
 8000b92:	2dff      	cmp	r5, #255	; 0xff
 8000b94:	d065      	beq.n	8000c62 <__aeabi_fsub+0x19a>
 8000b96:	2201      	movs	r2, #1
 8000b98:	499a      	ldr	r1, [pc, #616]	; (8000e04 <__aeabi_fsub+0x33c>)
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	e7cb      	b.n	8000b3c <__aeabi_fsub+0x74>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d01f      	beq.n	8000be8 <__aeabi_fsub+0x120>
 8000ba8:	428c      	cmp	r4, r1
 8000baa:	d022      	beq.n	8000bf2 <__aeabi_fsub+0x12a>
 8000bac:	002a      	movs	r2, r5
 8000bae:	3aff      	subs	r2, #255	; 0xff
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d035      	beq.n	8000c20 <__aeabi_fsub+0x158>
 8000bb4:	1b7a      	subs	r2, r7, r5
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fsub+0xf4>
 8000bba:	e099      	b.n	8000cf0 <__aeabi_fsub+0x228>
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0xfc>
 8000bc2:	e0dd      	b.n	8000d80 <__aeabi_fsub+0x2b8>
 8000bc4:	1e53      	subs	r3, r2, #1
 8000bc6:	2a01      	cmp	r2, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x104>
 8000bca:	e105      	b.n	8000dd8 <__aeabi_fsub+0x310>
 8000bcc:	2aff      	cmp	r2, #255	; 0xff
 8000bce:	d06b      	beq.n	8000ca8 <__aeabi_fsub+0x1e0>
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	e094      	b.n	8000cfe <__aeabi_fsub+0x236>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d073      	beq.n	8000cc0 <__aeabi_fsub+0x1f8>
 8000bd8:	1e51      	subs	r1, r2, #1
 8000bda:	2a01      	cmp	r2, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x118>
 8000bde:	e0df      	b.n	8000da0 <__aeabi_fsub+0x2d8>
 8000be0:	2aff      	cmp	r2, #255	; 0xff
 8000be2:	d063      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000be4:	000a      	movs	r2, r1
 8000be6:	e792      	b.n	8000b0e <__aeabi_fsub+0x46>
 8000be8:	2201      	movs	r2, #1
 8000bea:	4051      	eors	r1, r2
 8000bec:	42a1      	cmp	r1, r4
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fsub+0x12a>
 8000bf0:	e782      	b.n	8000af8 <__aeabi_fsub+0x30>
 8000bf2:	002a      	movs	r2, r5
 8000bf4:	3aff      	subs	r2, #255	; 0xff
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d036      	beq.n	8000c68 <__aeabi_fsub+0x1a0>
 8000bfa:	1b7a      	subs	r2, r7, r5
 8000bfc:	2d00      	cmp	r5, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x13a>
 8000c00:	e0aa      	b.n	8000d58 <__aeabi_fsub+0x290>
 8000c02:	2fff      	cmp	r7, #255	; 0xff
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x140>
 8000c06:	e0da      	b.n	8000dbe <__aeabi_fsub+0x2f6>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	4661      	mov	r1, ip
 8000c0c:	04db      	lsls	r3, r3, #19
 8000c0e:	4319      	orrs	r1, r3
 8000c10:	468c      	mov	ip, r1
 8000c12:	2a1b      	cmp	r2, #27
 8000c14:	dc00      	bgt.n	8000c18 <__aeabi_fsub+0x150>
 8000c16:	e0d4      	b.n	8000dc2 <__aeabi_fsub+0x2fa>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	003d      	movs	r5, r7
 8000c1c:	181b      	adds	r3, r3, r0
 8000c1e:	e7b5      	b.n	8000b8c <__aeabi_fsub+0xc4>
 8000c20:	27fe      	movs	r7, #254	; 0xfe
 8000c22:	1c6a      	adds	r2, r5, #1
 8000c24:	4217      	tst	r7, r2
 8000c26:	d171      	bne.n	8000d0c <__aeabi_fsub+0x244>
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fsub+0x166>
 8000c2c:	e09e      	b.n	8000d6c <__aeabi_fsub+0x2a4>
 8000c2e:	4663      	mov	r3, ip
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x16e>
 8000c34:	e0d5      	b.n	8000de2 <__aeabi_fsub+0x31a>
 8000c36:	2200      	movs	r2, #0
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x176>
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000c3e:	1a1b      	subs	r3, r3, r0
 8000c40:	015e      	lsls	r6, r3, #5
 8000c42:	d400      	bmi.n	8000c46 <__aeabi_fsub+0x17e>
 8000c44:	e0d6      	b.n	8000df4 <__aeabi_fsub+0x32c>
 8000c46:	4663      	mov	r3, ip
 8000c48:	000c      	movs	r4, r1
 8000c4a:	1ac3      	subs	r3, r0, r3
 8000c4c:	e776      	b.n	8000b3c <__aeabi_fsub+0x74>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d036      	beq.n	8000cc0 <__aeabi_fsub+0x1f8>
 8000c52:	1e51      	subs	r1, r2, #1
 8000c54:	2a01      	cmp	r2, #1
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x192>
 8000c58:	e09a      	b.n	8000d90 <__aeabi_fsub+0x2c8>
 8000c5a:	2aff      	cmp	r2, #255	; 0xff
 8000c5c:	d026      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000c5e:	000a      	movs	r2, r1
 8000c60:	e78f      	b.n	8000b82 <__aeabi_fsub+0xba>
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	2600      	movs	r6, #0
 8000c66:	e77a      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000c68:	27fe      	movs	r7, #254	; 0xfe
 8000c6a:	1c6a      	adds	r2, r5, #1
 8000c6c:	4217      	tst	r7, r2
 8000c6e:	d062      	beq.n	8000d36 <__aeabi_fsub+0x26e>
 8000c70:	2aff      	cmp	r2, #255	; 0xff
 8000c72:	d0f6      	beq.n	8000c62 <__aeabi_fsub+0x19a>
 8000c74:	0015      	movs	r5, r2
 8000c76:	4460      	add	r0, ip
 8000c78:	0843      	lsrs	r3, r0, #1
 8000c7a:	075a      	lsls	r2, r3, #29
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_fsub+0x1b8>
 8000c7e:	e75f      	b.n	8000b40 <__aeabi_fsub+0x78>
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	2dff      	cmp	r5, #255	; 0xff
 8000c84:	d012      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	0a5e      	lsrs	r6, r3, #9
 8000c8a:	b2ea      	uxtb	r2, r5
 8000c8c:	e767      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000c8e:	4662      	mov	r2, ip
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x1ce>
 8000c94:	e093      	b.n	8000dbe <__aeabi_fsub+0x2f6>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d008      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	03d2      	lsls	r2, r2, #15
 8000c9e:	4213      	tst	r3, r2
 8000ca0:	d004      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000ca2:	4640      	mov	r0, r8
 8000ca4:	4210      	tst	r0, r2
 8000ca6:	d101      	bne.n	8000cac <__aeabi_fsub+0x1e4>
 8000ca8:	000c      	movs	r4, r1
 8000caa:	4643      	mov	r3, r8
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0d8      	beq.n	8000c62 <__aeabi_fsub+0x19a>
 8000cb0:	2680      	movs	r6, #128	; 0x80
 8000cb2:	03f6      	lsls	r6, r6, #15
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	0276      	lsls	r6, r6, #9
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	0a76      	lsrs	r6, r6, #9
 8000cbc:	e74f      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	0015      	movs	r5, r2
 8000cc2:	e7de      	b.n	8000c82 <__aeabi_fsub+0x1ba>
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	1b40      	subs	r0, r0, r5
 8000cc8:	3001      	adds	r0, #1
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	0019      	movs	r1, r3
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	40c1      	lsrs	r1, r0
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	4193      	sbcs	r3, r2
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	e72f      	b.n	8000b3c <__aeabi_fsub+0x74>
 8000cdc:	2320      	movs	r3, #32
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	4098      	lsls	r0, r3
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	40d1      	lsrs	r1, r2
 8000ce8:	1e5a      	subs	r2, r3, #1
 8000cea:	4193      	sbcs	r3, r2
 8000cec:	430b      	orrs	r3, r1
 8000cee:	e712      	b.n	8000b16 <__aeabi_fsub+0x4e>
 8000cf0:	2fff      	cmp	r7, #255	; 0xff
 8000cf2:	d0d9      	beq.n	8000ca8 <__aeabi_fsub+0x1e0>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	4664      	mov	r4, ip
 8000cf8:	04db      	lsls	r3, r3, #19
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	46a4      	mov	ip, r4
 8000cfe:	2a1b      	cmp	r2, #27
 8000d00:	dd52      	ble.n	8000da8 <__aeabi_fsub+0x2e0>
 8000d02:	2301      	movs	r3, #1
 8000d04:	000c      	movs	r4, r1
 8000d06:	003d      	movs	r5, r7
 8000d08:	1ac3      	subs	r3, r0, r3
 8000d0a:	e706      	b.n	8000b1a <__aeabi_fsub+0x52>
 8000d0c:	4663      	mov	r3, ip
 8000d0e:	1a1e      	subs	r6, r3, r0
 8000d10:	0173      	lsls	r3, r6, #5
 8000d12:	d439      	bmi.n	8000d88 <__aeabi_fsub+0x2c0>
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0x252>
 8000d18:	e704      	b.n	8000b24 <__aeabi_fsub+0x5c>
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2600      	movs	r6, #0
 8000d20:	e71d      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000d22:	2320      	movs	r3, #32
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	0001      	movs	r1, r0
 8000d28:	4098      	lsls	r0, r3
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	40d1      	lsrs	r1, r2
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	4193      	sbcs	r3, r2
 8000d32:	430b      	orrs	r3, r1
 8000d34:	e729      	b.n	8000b8a <__aeabi_fsub+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d1a9      	bne.n	8000c8e <__aeabi_fsub+0x1c6>
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d056      	beq.n	8000dee <__aeabi_fsub+0x326>
 8000d40:	2200      	movs	r2, #0
 8000d42:	2800      	cmp	r0, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x280>
 8000d46:	e70a      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	4463      	add	r3, ip
 8000d4c:	015a      	lsls	r2, r3, #5
 8000d4e:	d594      	bpl.n	8000c7a <__aeabi_fsub+0x1b2>
 8000d50:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <__aeabi_fsub+0x338>)
 8000d52:	3501      	adds	r5, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	e790      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000d58:	4663      	mov	r3, ip
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0af      	beq.n	8000cbe <__aeabi_fsub+0x1f6>
 8000d5e:	1e53      	subs	r3, r2, #1
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d015      	beq.n	8000d90 <__aeabi_fsub+0x2c8>
 8000d64:	2aff      	cmp	r2, #255	; 0xff
 8000d66:	d02a      	beq.n	8000dbe <__aeabi_fsub+0x2f6>
 8000d68:	001a      	movs	r2, r3
 8000d6a:	e752      	b.n	8000c12 <__aeabi_fsub+0x14a>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d191      	bne.n	8000c96 <__aeabi_fsub+0x1ce>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d198      	bne.n	8000ca8 <__aeabi_fsub+0x1e0>
 8000d76:	2680      	movs	r6, #128	; 0x80
 8000d78:	2400      	movs	r4, #0
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	03f6      	lsls	r6, r6, #15
 8000d7e:	e6ee      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000d80:	000c      	movs	r4, r1
 8000d82:	4643      	mov	r3, r8
 8000d84:	0015      	movs	r5, r2
 8000d86:	e77c      	b.n	8000c82 <__aeabi_fsub+0x1ba>
 8000d88:	4663      	mov	r3, ip
 8000d8a:	000c      	movs	r4, r1
 8000d8c:	1ac6      	subs	r6, r0, r3
 8000d8e:	e6c9      	b.n	8000b24 <__aeabi_fsub+0x5c>
 8000d90:	0003      	movs	r3, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	2501      	movs	r5, #1
 8000d96:	015a      	lsls	r2, r3, #5
 8000d98:	d400      	bmi.n	8000d9c <__aeabi_fsub+0x2d4>
 8000d9a:	e76e      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000d9c:	2502      	movs	r5, #2
 8000d9e:	e6fa      	b.n	8000b96 <__aeabi_fsub+0xce>
 8000da0:	4663      	mov	r3, ip
 8000da2:	2501      	movs	r5, #1
 8000da4:	1a1b      	subs	r3, r3, r0
 8000da6:	e6b8      	b.n	8000b1a <__aeabi_fsub+0x52>
 8000da8:	4664      	mov	r4, ip
 8000daa:	2320      	movs	r3, #32
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	4662      	mov	r2, ip
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	4193      	sbcs	r3, r2
 8000dba:	4323      	orrs	r3, r4
 8000dbc:	e7a2      	b.n	8000d04 <__aeabi_fsub+0x23c>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	e774      	b.n	8000cac <__aeabi_fsub+0x1e4>
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	40d1      	lsrs	r1, r2
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	4662      	mov	r2, ip
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	4193      	sbcs	r3, r2
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	e720      	b.n	8000c1a <__aeabi_fsub+0x152>
 8000dd8:	4663      	mov	r3, ip
 8000dda:	000c      	movs	r4, r1
 8000ddc:	2501      	movs	r5, #1
 8000dde:	1ac3      	subs	r3, r0, r3
 8000de0:	e69b      	b.n	8000b1a <__aeabi_fsub+0x52>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d099      	beq.n	8000d1a <__aeabi_fsub+0x252>
 8000de6:	000c      	movs	r4, r1
 8000de8:	4646      	mov	r6, r8
 8000dea:	2200      	movs	r2, #0
 8000dec:	e6b7      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000dee:	4646      	mov	r6, r8
 8000df0:	2200      	movs	r2, #0
 8000df2:	e6b4      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fsub+0x332>
 8000df8:	e73f      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	e6ae      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000e00:	fbffffff 	.word	0xfbffffff
 8000e04:	7dffffff 	.word	0x7dffffff

08000e08 <__aeabi_f2iz>:
 8000e08:	0241      	lsls	r1, r0, #9
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	0fc3      	lsrs	r3, r0, #31
 8000e0e:	0a49      	lsrs	r1, r1, #9
 8000e10:	2000      	movs	r0, #0
 8000e12:	0e12      	lsrs	r2, r2, #24
 8000e14:	2a7e      	cmp	r2, #126	; 0x7e
 8000e16:	dd03      	ble.n	8000e20 <__aeabi_f2iz+0x18>
 8000e18:	2a9d      	cmp	r2, #157	; 0x9d
 8000e1a:	dd02      	ble.n	8000e22 <__aeabi_f2iz+0x1a>
 8000e1c:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <__aeabi_f2iz+0x3c>)
 8000e1e:	1898      	adds	r0, r3, r2
 8000e20:	4770      	bx	lr
 8000e22:	2080      	movs	r0, #128	; 0x80
 8000e24:	0400      	lsls	r0, r0, #16
 8000e26:	4301      	orrs	r1, r0
 8000e28:	2a95      	cmp	r2, #149	; 0x95
 8000e2a:	dc07      	bgt.n	8000e3c <__aeabi_f2iz+0x34>
 8000e2c:	2096      	movs	r0, #150	; 0x96
 8000e2e:	1a82      	subs	r2, r0, r2
 8000e30:	40d1      	lsrs	r1, r2
 8000e32:	4248      	negs	r0, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f3      	bne.n	8000e20 <__aeabi_f2iz+0x18>
 8000e38:	0008      	movs	r0, r1
 8000e3a:	e7f1      	b.n	8000e20 <__aeabi_f2iz+0x18>
 8000e3c:	3a96      	subs	r2, #150	; 0x96
 8000e3e:	4091      	lsls	r1, r2
 8000e40:	e7f7      	b.n	8000e32 <__aeabi_f2iz+0x2a>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	7fffffff 	.word	0x7fffffff

08000e48 <__aeabi_i2f>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d013      	beq.n	8000e76 <__aeabi_i2f+0x2e>
 8000e4e:	17c3      	asrs	r3, r0, #31
 8000e50:	18c5      	adds	r5, r0, r3
 8000e52:	405d      	eors	r5, r3
 8000e54:	0fc4      	lsrs	r4, r0, #31
 8000e56:	0028      	movs	r0, r5
 8000e58:	f000 fbec 	bl	8001634 <__clzsi2>
 8000e5c:	239e      	movs	r3, #158	; 0x9e
 8000e5e:	0001      	movs	r1, r0
 8000e60:	1a1b      	subs	r3, r3, r0
 8000e62:	2b96      	cmp	r3, #150	; 0x96
 8000e64:	dc0f      	bgt.n	8000e86 <__aeabi_i2f+0x3e>
 8000e66:	2808      	cmp	r0, #8
 8000e68:	d031      	beq.n	8000ece <__aeabi_i2f+0x86>
 8000e6a:	3908      	subs	r1, #8
 8000e6c:	408d      	lsls	r5, r1
 8000e6e:	026d      	lsls	r5, r5, #9
 8000e70:	0a6d      	lsrs	r5, r5, #9
 8000e72:	b2d8      	uxtb	r0, r3
 8000e74:	e002      	b.n	8000e7c <__aeabi_i2f+0x34>
 8000e76:	2400      	movs	r4, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	05c0      	lsls	r0, r0, #23
 8000e7e:	4328      	orrs	r0, r5
 8000e80:	07e4      	lsls	r4, r4, #31
 8000e82:	4320      	orrs	r0, r4
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
 8000e86:	2b99      	cmp	r3, #153	; 0x99
 8000e88:	dd0c      	ble.n	8000ea4 <__aeabi_i2f+0x5c>
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	1a12      	subs	r2, r2, r0
 8000e8e:	0028      	movs	r0, r5
 8000e90:	40d0      	lsrs	r0, r2
 8000e92:	0002      	movs	r2, r0
 8000e94:	0008      	movs	r0, r1
 8000e96:	301b      	adds	r0, #27
 8000e98:	4085      	lsls	r5, r0
 8000e9a:	0028      	movs	r0, r5
 8000e9c:	1e45      	subs	r5, r0, #1
 8000e9e:	41a8      	sbcs	r0, r5
 8000ea0:	4302      	orrs	r2, r0
 8000ea2:	0015      	movs	r5, r2
 8000ea4:	2905      	cmp	r1, #5
 8000ea6:	dc16      	bgt.n	8000ed6 <__aeabi_i2f+0x8e>
 8000ea8:	002a      	movs	r2, r5
 8000eaa:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <__aeabi_i2f+0xa0>)
 8000eac:	4002      	ands	r2, r0
 8000eae:	076e      	lsls	r6, r5, #29
 8000eb0:	d009      	beq.n	8000ec6 <__aeabi_i2f+0x7e>
 8000eb2:	260f      	movs	r6, #15
 8000eb4:	4035      	ands	r5, r6
 8000eb6:	2d04      	cmp	r5, #4
 8000eb8:	d005      	beq.n	8000ec6 <__aeabi_i2f+0x7e>
 8000eba:	3204      	adds	r2, #4
 8000ebc:	0155      	lsls	r5, r2, #5
 8000ebe:	d502      	bpl.n	8000ec6 <__aeabi_i2f+0x7e>
 8000ec0:	239f      	movs	r3, #159	; 0x9f
 8000ec2:	4002      	ands	r2, r0
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	0192      	lsls	r2, r2, #6
 8000ec8:	0a55      	lsrs	r5, r2, #9
 8000eca:	b2d8      	uxtb	r0, r3
 8000ecc:	e7d6      	b.n	8000e7c <__aeabi_i2f+0x34>
 8000ece:	026d      	lsls	r5, r5, #9
 8000ed0:	2096      	movs	r0, #150	; 0x96
 8000ed2:	0a6d      	lsrs	r5, r5, #9
 8000ed4:	e7d2      	b.n	8000e7c <__aeabi_i2f+0x34>
 8000ed6:	1f4a      	subs	r2, r1, #5
 8000ed8:	4095      	lsls	r5, r2
 8000eda:	002a      	movs	r2, r5
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <__aeabi_i2f+0xa0>)
 8000ede:	4002      	ands	r2, r0
 8000ee0:	076e      	lsls	r6, r5, #29
 8000ee2:	d0f0      	beq.n	8000ec6 <__aeabi_i2f+0x7e>
 8000ee4:	e7e5      	b.n	8000eb2 <__aeabi_i2f+0x6a>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	fbffffff 	.word	0xfbffffff

08000eec <__aeabi_ddiv>:
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	4657      	mov	r7, sl
 8000ef0:	464e      	mov	r6, r9
 8000ef2:	4645      	mov	r5, r8
 8000ef4:	46de      	mov	lr, fp
 8000ef6:	b5e0      	push	{r5, r6, r7, lr}
 8000ef8:	030c      	lsls	r4, r1, #12
 8000efa:	001f      	movs	r7, r3
 8000efc:	004b      	lsls	r3, r1, #1
 8000efe:	4681      	mov	r9, r0
 8000f00:	4692      	mov	sl, r2
 8000f02:	0005      	movs	r5, r0
 8000f04:	b085      	sub	sp, #20
 8000f06:	0b24      	lsrs	r4, r4, #12
 8000f08:	0d5b      	lsrs	r3, r3, #21
 8000f0a:	0fce      	lsrs	r6, r1, #31
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x26>
 8000f10:	e152      	b.n	80011b8 <__aeabi_ddiv+0x2cc>
 8000f12:	4ad2      	ldr	r2, [pc, #840]	; (800125c <__aeabi_ddiv+0x370>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x2e>
 8000f18:	e16e      	b.n	80011f8 <__aeabi_ddiv+0x30c>
 8000f1a:	0f42      	lsrs	r2, r0, #29
 8000f1c:	00e4      	lsls	r4, r4, #3
 8000f1e:	4314      	orrs	r4, r2
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0412      	lsls	r2, r2, #16
 8000f24:	4322      	orrs	r2, r4
 8000f26:	4690      	mov	r8, r2
 8000f28:	4acd      	ldr	r2, [pc, #820]	; (8001260 <__aeabi_ddiv+0x374>)
 8000f2a:	00c5      	lsls	r5, r0, #3
 8000f2c:	4693      	mov	fp, r2
 8000f2e:	449b      	add	fp, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	4699      	mov	r9, r3
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	033c      	lsls	r4, r7, #12
 8000f38:	007b      	lsls	r3, r7, #1
 8000f3a:	4650      	mov	r0, sl
 8000f3c:	0b24      	lsrs	r4, r4, #12
 8000f3e:	0d5b      	lsrs	r3, r3, #21
 8000f40:	0fff      	lsrs	r7, r7, #31
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x5c>
 8000f46:	e11a      	b.n	800117e <__aeabi_ddiv+0x292>
 8000f48:	4ac4      	ldr	r2, [pc, #784]	; (800125c <__aeabi_ddiv+0x370>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x64>
 8000f4e:	e15e      	b.n	800120e <__aeabi_ddiv+0x322>
 8000f50:	0f42      	lsrs	r2, r0, #29
 8000f52:	00e4      	lsls	r4, r4, #3
 8000f54:	4322      	orrs	r2, r4
 8000f56:	2480      	movs	r4, #128	; 0x80
 8000f58:	0424      	lsls	r4, r4, #16
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	4ac0      	ldr	r2, [pc, #768]	; (8001260 <__aeabi_ddiv+0x374>)
 8000f5e:	00c1      	lsls	r1, r0, #3
 8000f60:	4694      	mov	ip, r2
 8000f62:	465a      	mov	r2, fp
 8000f64:	4463      	add	r3, ip
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	469b      	mov	fp, r3
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	0033      	movs	r3, r6
 8000f6e:	407b      	eors	r3, r7
 8000f70:	469a      	mov	sl, r3
 8000f72:	464b      	mov	r3, r9
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d827      	bhi.n	8000fc8 <__aeabi_ddiv+0xdc>
 8000f78:	4aba      	ldr	r2, [pc, #744]	; (8001264 <__aeabi_ddiv+0x378>)
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	58d3      	ldr	r3, [r2, r3]
 8000f7e:	469f      	mov	pc, r3
 8000f80:	46b2      	mov	sl, r6
 8000f82:	9b00      	ldr	r3, [sp, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d016      	beq.n	8000fb6 <__aeabi_ddiv+0xca>
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0xa2>
 8000f8c:	e287      	b.n	800149e <__aeabi_ddiv+0x5b2>
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d000      	beq.n	8000f94 <__aeabi_ddiv+0xa8>
 8000f92:	e0d5      	b.n	8001140 <__aeabi_ddiv+0x254>
 8000f94:	2300      	movs	r3, #0
 8000f96:	2200      	movs	r2, #0
 8000f98:	2500      	movs	r5, #0
 8000f9a:	051b      	lsls	r3, r3, #20
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	07d2      	lsls	r2, r2, #31
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0028      	movs	r0, r5
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	b005      	add	sp, #20
 8000faa:	bcf0      	pop	{r4, r5, r6, r7}
 8000fac:	46bb      	mov	fp, r7
 8000fae:	46b2      	mov	sl, r6
 8000fb0:	46a9      	mov	r9, r5
 8000fb2:	46a0      	mov	r8, r4
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2500      	movs	r5, #0
 8000fba:	4ba8      	ldr	r3, [pc, #672]	; (800125c <__aeabi_ddiv+0x370>)
 8000fbc:	e7ed      	b.n	8000f9a <__aeabi_ddiv+0xae>
 8000fbe:	46ba      	mov	sl, r7
 8000fc0:	46a0      	mov	r8, r4
 8000fc2:	000d      	movs	r5, r1
 8000fc4:	9000      	str	r0, [sp, #0]
 8000fc6:	e7dc      	b.n	8000f82 <__aeabi_ddiv+0x96>
 8000fc8:	4544      	cmp	r4, r8
 8000fca:	d200      	bcs.n	8000fce <__aeabi_ddiv+0xe2>
 8000fcc:	e1c4      	b.n	8001358 <__aeabi_ddiv+0x46c>
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0xe6>
 8000fd0:	e1bf      	b.n	8001352 <__aeabi_ddiv+0x466>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	002e      	movs	r6, r5
 8000fda:	4640      	mov	r0, r8
 8000fdc:	2500      	movs	r5, #0
 8000fde:	44e3      	add	fp, ip
 8000fe0:	0223      	lsls	r3, r4, #8
 8000fe2:	0e0c      	lsrs	r4, r1, #24
 8000fe4:	431c      	orrs	r4, r3
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	4699      	mov	r9, r3
 8000fea:	0423      	lsls	r3, r4, #16
 8000fec:	020a      	lsls	r2, r1, #8
 8000fee:	0c1f      	lsrs	r7, r3, #16
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	9200      	str	r2, [sp, #0]
 8000ff4:	9701      	str	r7, [sp, #4]
 8000ff6:	f7ff f90d 	bl	8000214 <__aeabi_uidivmod>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	437a      	muls	r2, r7
 8000ffe:	040b      	lsls	r3, r1, #16
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	4680      	mov	r8, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d907      	bls.n	800101a <__aeabi_ddiv+0x12e>
 800100a:	2301      	movs	r3, #1
 800100c:	425b      	negs	r3, r3
 800100e:	469c      	mov	ip, r3
 8001010:	1909      	adds	r1, r1, r4
 8001012:	44e0      	add	r8, ip
 8001014:	428c      	cmp	r4, r1
 8001016:	d800      	bhi.n	800101a <__aeabi_ddiv+0x12e>
 8001018:	e201      	b.n	800141e <__aeabi_ddiv+0x532>
 800101a:	1a88      	subs	r0, r1, r2
 800101c:	4649      	mov	r1, r9
 800101e:	f7ff f8f9 	bl	8000214 <__aeabi_uidivmod>
 8001022:	9a01      	ldr	r2, [sp, #4]
 8001024:	0436      	lsls	r6, r6, #16
 8001026:	4342      	muls	r2, r0
 8001028:	0409      	lsls	r1, r1, #16
 800102a:	0c36      	lsrs	r6, r6, #16
 800102c:	0003      	movs	r3, r0
 800102e:	430e      	orrs	r6, r1
 8001030:	42b2      	cmp	r2, r6
 8001032:	d904      	bls.n	800103e <__aeabi_ddiv+0x152>
 8001034:	1936      	adds	r6, r6, r4
 8001036:	3b01      	subs	r3, #1
 8001038:	42b4      	cmp	r4, r6
 800103a:	d800      	bhi.n	800103e <__aeabi_ddiv+0x152>
 800103c:	e1e9      	b.n	8001412 <__aeabi_ddiv+0x526>
 800103e:	1ab0      	subs	r0, r6, r2
 8001040:	4642      	mov	r2, r8
 8001042:	9e00      	ldr	r6, [sp, #0]
 8001044:	0412      	lsls	r2, r2, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	0c33      	lsrs	r3, r6, #16
 800104a:	001f      	movs	r7, r3
 800104c:	0c11      	lsrs	r1, r2, #16
 800104e:	4690      	mov	r8, r2
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	0413      	lsls	r3, r2, #16
 8001054:	0432      	lsls	r2, r6, #16
 8001056:	0c16      	lsrs	r6, r2, #16
 8001058:	0032      	movs	r2, r6
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	435a      	muls	r2, r3
 800105e:	9603      	str	r6, [sp, #12]
 8001060:	437b      	muls	r3, r7
 8001062:	434e      	muls	r6, r1
 8001064:	4379      	muls	r1, r7
 8001066:	0c17      	lsrs	r7, r2, #16
 8001068:	46bc      	mov	ip, r7
 800106a:	199b      	adds	r3, r3, r6
 800106c:	4463      	add	r3, ip
 800106e:	429e      	cmp	r6, r3
 8001070:	d903      	bls.n	800107a <__aeabi_ddiv+0x18e>
 8001072:	2680      	movs	r6, #128	; 0x80
 8001074:	0276      	lsls	r6, r6, #9
 8001076:	46b4      	mov	ip, r6
 8001078:	4461      	add	r1, ip
 800107a:	0c1e      	lsrs	r6, r3, #16
 800107c:	1871      	adds	r1, r6, r1
 800107e:	0416      	lsls	r6, r2, #16
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	0c36      	lsrs	r6, r6, #16
 8001084:	199e      	adds	r6, r3, r6
 8001086:	4288      	cmp	r0, r1
 8001088:	d302      	bcc.n	8001090 <__aeabi_ddiv+0x1a4>
 800108a:	d112      	bne.n	80010b2 <__aeabi_ddiv+0x1c6>
 800108c:	42b5      	cmp	r5, r6
 800108e:	d210      	bcs.n	80010b2 <__aeabi_ddiv+0x1c6>
 8001090:	4643      	mov	r3, r8
 8001092:	1e5a      	subs	r2, r3, #1
 8001094:	9b00      	ldr	r3, [sp, #0]
 8001096:	469c      	mov	ip, r3
 8001098:	4465      	add	r5, ip
 800109a:	001f      	movs	r7, r3
 800109c:	429d      	cmp	r5, r3
 800109e:	419b      	sbcs	r3, r3
 80010a0:	425b      	negs	r3, r3
 80010a2:	191b      	adds	r3, r3, r4
 80010a4:	18c0      	adds	r0, r0, r3
 80010a6:	4284      	cmp	r4, r0
 80010a8:	d200      	bcs.n	80010ac <__aeabi_ddiv+0x1c0>
 80010aa:	e19e      	b.n	80013ea <__aeabi_ddiv+0x4fe>
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x1c4>
 80010ae:	e199      	b.n	80013e4 <__aeabi_ddiv+0x4f8>
 80010b0:	4690      	mov	r8, r2
 80010b2:	1bae      	subs	r6, r5, r6
 80010b4:	42b5      	cmp	r5, r6
 80010b6:	41ad      	sbcs	r5, r5
 80010b8:	1a40      	subs	r0, r0, r1
 80010ba:	426d      	negs	r5, r5
 80010bc:	1b40      	subs	r0, r0, r5
 80010be:	4284      	cmp	r4, r0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_ddiv+0x1d8>
 80010c2:	e1d2      	b.n	800146a <__aeabi_ddiv+0x57e>
 80010c4:	4649      	mov	r1, r9
 80010c6:	f7ff f8a5 	bl	8000214 <__aeabi_uidivmod>
 80010ca:	9a01      	ldr	r2, [sp, #4]
 80010cc:	040b      	lsls	r3, r1, #16
 80010ce:	4342      	muls	r2, r0
 80010d0:	0c31      	lsrs	r1, r6, #16
 80010d2:	0005      	movs	r5, r0
 80010d4:	4319      	orrs	r1, r3
 80010d6:	428a      	cmp	r2, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x1f0>
 80010da:	e16c      	b.n	80013b6 <__aeabi_ddiv+0x4ca>
 80010dc:	1a88      	subs	r0, r1, r2
 80010de:	4649      	mov	r1, r9
 80010e0:	f7ff f898 	bl	8000214 <__aeabi_uidivmod>
 80010e4:	9a01      	ldr	r2, [sp, #4]
 80010e6:	0436      	lsls	r6, r6, #16
 80010e8:	4342      	muls	r2, r0
 80010ea:	0409      	lsls	r1, r1, #16
 80010ec:	0c36      	lsrs	r6, r6, #16
 80010ee:	0003      	movs	r3, r0
 80010f0:	430e      	orrs	r6, r1
 80010f2:	42b2      	cmp	r2, r6
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x20c>
 80010f6:	e153      	b.n	80013a0 <__aeabi_ddiv+0x4b4>
 80010f8:	9803      	ldr	r0, [sp, #12]
 80010fa:	1ab6      	subs	r6, r6, r2
 80010fc:	0002      	movs	r2, r0
 80010fe:	042d      	lsls	r5, r5, #16
 8001100:	431d      	orrs	r5, r3
 8001102:	9f02      	ldr	r7, [sp, #8]
 8001104:	042b      	lsls	r3, r5, #16
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	435a      	muls	r2, r3
 800110a:	437b      	muls	r3, r7
 800110c:	469c      	mov	ip, r3
 800110e:	0c29      	lsrs	r1, r5, #16
 8001110:	4348      	muls	r0, r1
 8001112:	0c13      	lsrs	r3, r2, #16
 8001114:	4484      	add	ip, r0
 8001116:	4463      	add	r3, ip
 8001118:	4379      	muls	r1, r7
 800111a:	4298      	cmp	r0, r3
 800111c:	d903      	bls.n	8001126 <__aeabi_ddiv+0x23a>
 800111e:	2080      	movs	r0, #128	; 0x80
 8001120:	0240      	lsls	r0, r0, #9
 8001122:	4684      	mov	ip, r0
 8001124:	4461      	add	r1, ip
 8001126:	0c18      	lsrs	r0, r3, #16
 8001128:	0412      	lsls	r2, r2, #16
 800112a:	041b      	lsls	r3, r3, #16
 800112c:	0c12      	lsrs	r2, r2, #16
 800112e:	1840      	adds	r0, r0, r1
 8001130:	189b      	adds	r3, r3, r2
 8001132:	4286      	cmp	r6, r0
 8001134:	d200      	bcs.n	8001138 <__aeabi_ddiv+0x24c>
 8001136:	e100      	b.n	800133a <__aeabi_ddiv+0x44e>
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x250>
 800113a:	e0fb      	b.n	8001334 <__aeabi_ddiv+0x448>
 800113c:	2301      	movs	r3, #1
 800113e:	431d      	orrs	r5, r3
 8001140:	4b49      	ldr	r3, [pc, #292]	; (8001268 <__aeabi_ddiv+0x37c>)
 8001142:	445b      	add	r3, fp
 8001144:	2b00      	cmp	r3, #0
 8001146:	dc00      	bgt.n	800114a <__aeabi_ddiv+0x25e>
 8001148:	e0aa      	b.n	80012a0 <__aeabi_ddiv+0x3b4>
 800114a:	076a      	lsls	r2, r5, #29
 800114c:	d000      	beq.n	8001150 <__aeabi_ddiv+0x264>
 800114e:	e13d      	b.n	80013cc <__aeabi_ddiv+0x4e0>
 8001150:	08e9      	lsrs	r1, r5, #3
 8001152:	4642      	mov	r2, r8
 8001154:	01d2      	lsls	r2, r2, #7
 8001156:	d506      	bpl.n	8001166 <__aeabi_ddiv+0x27a>
 8001158:	4642      	mov	r2, r8
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <__aeabi_ddiv+0x380>)
 800115c:	401a      	ands	r2, r3
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	4690      	mov	r8, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	445b      	add	r3, fp
 8001166:	4a42      	ldr	r2, [pc, #264]	; (8001270 <__aeabi_ddiv+0x384>)
 8001168:	4293      	cmp	r3, r2
 800116a:	dd00      	ble.n	800116e <__aeabi_ddiv+0x282>
 800116c:	e723      	b.n	8000fb6 <__aeabi_ddiv+0xca>
 800116e:	4642      	mov	r2, r8
 8001170:	055b      	lsls	r3, r3, #21
 8001172:	0755      	lsls	r5, r2, #29
 8001174:	0252      	lsls	r2, r2, #9
 8001176:	430d      	orrs	r5, r1
 8001178:	0b12      	lsrs	r2, r2, #12
 800117a:	0d5b      	lsrs	r3, r3, #21
 800117c:	e70d      	b.n	8000f9a <__aeabi_ddiv+0xae>
 800117e:	4651      	mov	r1, sl
 8001180:	4321      	orrs	r1, r4
 8001182:	d100      	bne.n	8001186 <__aeabi_ddiv+0x29a>
 8001184:	e07c      	b.n	8001280 <__aeabi_ddiv+0x394>
 8001186:	2c00      	cmp	r4, #0
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x2a0>
 800118a:	e0fb      	b.n	8001384 <__aeabi_ddiv+0x498>
 800118c:	0020      	movs	r0, r4
 800118e:	f000 fa51 	bl	8001634 <__clzsi2>
 8001192:	0002      	movs	r2, r0
 8001194:	3a0b      	subs	r2, #11
 8001196:	231d      	movs	r3, #29
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4652      	mov	r2, sl
 800119c:	0001      	movs	r1, r0
 800119e:	40da      	lsrs	r2, r3
 80011a0:	4653      	mov	r3, sl
 80011a2:	3908      	subs	r1, #8
 80011a4:	408b      	lsls	r3, r1
 80011a6:	408c      	lsls	r4, r1
 80011a8:	0019      	movs	r1, r3
 80011aa:	4314      	orrs	r4, r2
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <__aeabi_ddiv+0x388>)
 80011ae:	4458      	add	r0, fp
 80011b0:	469b      	mov	fp, r3
 80011b2:	4483      	add	fp, r0
 80011b4:	2000      	movs	r0, #0
 80011b6:	e6d9      	b.n	8000f6c <__aeabi_ddiv+0x80>
 80011b8:	0003      	movs	r3, r0
 80011ba:	4323      	orrs	r3, r4
 80011bc:	4698      	mov	r8, r3
 80011be:	d044      	beq.n	800124a <__aeabi_ddiv+0x35e>
 80011c0:	2c00      	cmp	r4, #0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_ddiv+0x2da>
 80011c4:	e0cf      	b.n	8001366 <__aeabi_ddiv+0x47a>
 80011c6:	0020      	movs	r0, r4
 80011c8:	f000 fa34 	bl	8001634 <__clzsi2>
 80011cc:	0001      	movs	r1, r0
 80011ce:	0002      	movs	r2, r0
 80011d0:	390b      	subs	r1, #11
 80011d2:	231d      	movs	r3, #29
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	4649      	mov	r1, r9
 80011d8:	0010      	movs	r0, r2
 80011da:	40d9      	lsrs	r1, r3
 80011dc:	3808      	subs	r0, #8
 80011de:	4084      	lsls	r4, r0
 80011e0:	000b      	movs	r3, r1
 80011e2:	464d      	mov	r5, r9
 80011e4:	4323      	orrs	r3, r4
 80011e6:	4698      	mov	r8, r3
 80011e8:	4085      	lsls	r5, r0
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <__aeabi_ddiv+0x38c>)
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	469b      	mov	fp, r3
 80011f0:	2300      	movs	r3, #0
 80011f2:	4699      	mov	r9, r3
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	e69e      	b.n	8000f36 <__aeabi_ddiv+0x4a>
 80011f8:	0002      	movs	r2, r0
 80011fa:	4322      	orrs	r2, r4
 80011fc:	4690      	mov	r8, r2
 80011fe:	d11d      	bne.n	800123c <__aeabi_ddiv+0x350>
 8001200:	2208      	movs	r2, #8
 8001202:	469b      	mov	fp, r3
 8001204:	2302      	movs	r3, #2
 8001206:	2500      	movs	r5, #0
 8001208:	4691      	mov	r9, r2
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	e693      	b.n	8000f36 <__aeabi_ddiv+0x4a>
 800120e:	4651      	mov	r1, sl
 8001210:	4321      	orrs	r1, r4
 8001212:	d109      	bne.n	8001228 <__aeabi_ddiv+0x33c>
 8001214:	2302      	movs	r3, #2
 8001216:	464a      	mov	r2, r9
 8001218:	431a      	orrs	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <__aeabi_ddiv+0x390>)
 800121c:	4691      	mov	r9, r2
 800121e:	469c      	mov	ip, r3
 8001220:	2400      	movs	r4, #0
 8001222:	2002      	movs	r0, #2
 8001224:	44e3      	add	fp, ip
 8001226:	e6a1      	b.n	8000f6c <__aeabi_ddiv+0x80>
 8001228:	2303      	movs	r3, #3
 800122a:	464a      	mov	r2, r9
 800122c:	431a      	orrs	r2, r3
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <__aeabi_ddiv+0x390>)
 8001230:	4691      	mov	r9, r2
 8001232:	469c      	mov	ip, r3
 8001234:	4651      	mov	r1, sl
 8001236:	2003      	movs	r0, #3
 8001238:	44e3      	add	fp, ip
 800123a:	e697      	b.n	8000f6c <__aeabi_ddiv+0x80>
 800123c:	220c      	movs	r2, #12
 800123e:	469b      	mov	fp, r3
 8001240:	2303      	movs	r3, #3
 8001242:	46a0      	mov	r8, r4
 8001244:	4691      	mov	r9, r2
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	e675      	b.n	8000f36 <__aeabi_ddiv+0x4a>
 800124a:	2304      	movs	r3, #4
 800124c:	4699      	mov	r9, r3
 800124e:	2300      	movs	r3, #0
 8001250:	469b      	mov	fp, r3
 8001252:	3301      	adds	r3, #1
 8001254:	2500      	movs	r5, #0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	e66d      	b.n	8000f36 <__aeabi_ddiv+0x4a>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	000007ff 	.word	0x000007ff
 8001260:	fffffc01 	.word	0xfffffc01
 8001264:	08009a90 	.word	0x08009a90
 8001268:	000003ff 	.word	0x000003ff
 800126c:	feffffff 	.word	0xfeffffff
 8001270:	000007fe 	.word	0x000007fe
 8001274:	000003f3 	.word	0x000003f3
 8001278:	fffffc0d 	.word	0xfffffc0d
 800127c:	fffff801 	.word	0xfffff801
 8001280:	464a      	mov	r2, r9
 8001282:	2301      	movs	r3, #1
 8001284:	431a      	orrs	r2, r3
 8001286:	4691      	mov	r9, r2
 8001288:	2400      	movs	r4, #0
 800128a:	2001      	movs	r0, #1
 800128c:	e66e      	b.n	8000f6c <__aeabi_ddiv+0x80>
 800128e:	2300      	movs	r3, #0
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	469a      	mov	sl, r3
 8001294:	2500      	movs	r5, #0
 8001296:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <__aeabi_ddiv+0x5cc>)
 8001298:	0312      	lsls	r2, r2, #12
 800129a:	e67e      	b.n	8000f9a <__aeabi_ddiv+0xae>
 800129c:	2501      	movs	r5, #1
 800129e:	426d      	negs	r5, r5
 80012a0:	2201      	movs	r2, #1
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	2a38      	cmp	r2, #56	; 0x38
 80012a6:	dd00      	ble.n	80012aa <__aeabi_ddiv+0x3be>
 80012a8:	e674      	b.n	8000f94 <__aeabi_ddiv+0xa8>
 80012aa:	2a1f      	cmp	r2, #31
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x3c4>
 80012ae:	e0bd      	b.n	800142c <__aeabi_ddiv+0x540>
 80012b0:	211f      	movs	r1, #31
 80012b2:	4249      	negs	r1, r1
 80012b4:	1acb      	subs	r3, r1, r3
 80012b6:	4641      	mov	r1, r8
 80012b8:	40d9      	lsrs	r1, r3
 80012ba:	000b      	movs	r3, r1
 80012bc:	2a20      	cmp	r2, #32
 80012be:	d004      	beq.n	80012ca <__aeabi_ddiv+0x3de>
 80012c0:	4641      	mov	r1, r8
 80012c2:	4a7e      	ldr	r2, [pc, #504]	; (80014bc <__aeabi_ddiv+0x5d0>)
 80012c4:	445a      	add	r2, fp
 80012c6:	4091      	lsls	r1, r2
 80012c8:	430d      	orrs	r5, r1
 80012ca:	0029      	movs	r1, r5
 80012cc:	1e4a      	subs	r2, r1, #1
 80012ce:	4191      	sbcs	r1, r2
 80012d0:	4319      	orrs	r1, r3
 80012d2:	2307      	movs	r3, #7
 80012d4:	001d      	movs	r5, r3
 80012d6:	2200      	movs	r2, #0
 80012d8:	400d      	ands	r5, r1
 80012da:	420b      	tst	r3, r1
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x3f4>
 80012de:	e0d0      	b.n	8001482 <__aeabi_ddiv+0x596>
 80012e0:	220f      	movs	r2, #15
 80012e2:	2300      	movs	r3, #0
 80012e4:	400a      	ands	r2, r1
 80012e6:	2a04      	cmp	r2, #4
 80012e8:	d100      	bne.n	80012ec <__aeabi_ddiv+0x400>
 80012ea:	e0c7      	b.n	800147c <__aeabi_ddiv+0x590>
 80012ec:	1d0a      	adds	r2, r1, #4
 80012ee:	428a      	cmp	r2, r1
 80012f0:	4189      	sbcs	r1, r1
 80012f2:	4249      	negs	r1, r1
 80012f4:	185b      	adds	r3, r3, r1
 80012f6:	0011      	movs	r1, r2
 80012f8:	021a      	lsls	r2, r3, #8
 80012fa:	d400      	bmi.n	80012fe <__aeabi_ddiv+0x412>
 80012fc:	e0be      	b.n	800147c <__aeabi_ddiv+0x590>
 80012fe:	2301      	movs	r3, #1
 8001300:	2200      	movs	r2, #0
 8001302:	2500      	movs	r5, #0
 8001304:	e649      	b.n	8000f9a <__aeabi_ddiv+0xae>
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	4643      	mov	r3, r8
 800130a:	0312      	lsls	r2, r2, #12
 800130c:	4213      	tst	r3, r2
 800130e:	d008      	beq.n	8001322 <__aeabi_ddiv+0x436>
 8001310:	4214      	tst	r4, r2
 8001312:	d106      	bne.n	8001322 <__aeabi_ddiv+0x436>
 8001314:	4322      	orrs	r2, r4
 8001316:	0312      	lsls	r2, r2, #12
 8001318:	46ba      	mov	sl, r7
 800131a:	000d      	movs	r5, r1
 800131c:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <__aeabi_ddiv+0x5cc>)
 800131e:	0b12      	lsrs	r2, r2, #12
 8001320:	e63b      	b.n	8000f9a <__aeabi_ddiv+0xae>
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	4643      	mov	r3, r8
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	431a      	orrs	r2, r3
 800132a:	0312      	lsls	r2, r2, #12
 800132c:	46b2      	mov	sl, r6
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <__aeabi_ddiv+0x5cc>)
 8001330:	0b12      	lsrs	r2, r2, #12
 8001332:	e632      	b.n	8000f9a <__aeabi_ddiv+0xae>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d100      	bne.n	800133a <__aeabi_ddiv+0x44e>
 8001338:	e702      	b.n	8001140 <__aeabi_ddiv+0x254>
 800133a:	19a6      	adds	r6, r4, r6
 800133c:	1e6a      	subs	r2, r5, #1
 800133e:	42a6      	cmp	r6, r4
 8001340:	d200      	bcs.n	8001344 <__aeabi_ddiv+0x458>
 8001342:	e089      	b.n	8001458 <__aeabi_ddiv+0x56c>
 8001344:	4286      	cmp	r6, r0
 8001346:	d200      	bcs.n	800134a <__aeabi_ddiv+0x45e>
 8001348:	e09f      	b.n	800148a <__aeabi_ddiv+0x59e>
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x462>
 800134c:	e0af      	b.n	80014ae <__aeabi_ddiv+0x5c2>
 800134e:	0015      	movs	r5, r2
 8001350:	e6f4      	b.n	800113c <__aeabi_ddiv+0x250>
 8001352:	42a9      	cmp	r1, r5
 8001354:	d900      	bls.n	8001358 <__aeabi_ddiv+0x46c>
 8001356:	e63c      	b.n	8000fd2 <__aeabi_ddiv+0xe6>
 8001358:	4643      	mov	r3, r8
 800135a:	07de      	lsls	r6, r3, #31
 800135c:	0858      	lsrs	r0, r3, #1
 800135e:	086b      	lsrs	r3, r5, #1
 8001360:	431e      	orrs	r6, r3
 8001362:	07ed      	lsls	r5, r5, #31
 8001364:	e63c      	b.n	8000fe0 <__aeabi_ddiv+0xf4>
 8001366:	f000 f965 	bl	8001634 <__clzsi2>
 800136a:	0001      	movs	r1, r0
 800136c:	0002      	movs	r2, r0
 800136e:	3115      	adds	r1, #21
 8001370:	3220      	adds	r2, #32
 8001372:	291c      	cmp	r1, #28
 8001374:	dc00      	bgt.n	8001378 <__aeabi_ddiv+0x48c>
 8001376:	e72c      	b.n	80011d2 <__aeabi_ddiv+0x2e6>
 8001378:	464b      	mov	r3, r9
 800137a:	3808      	subs	r0, #8
 800137c:	4083      	lsls	r3, r0
 800137e:	2500      	movs	r5, #0
 8001380:	4698      	mov	r8, r3
 8001382:	e732      	b.n	80011ea <__aeabi_ddiv+0x2fe>
 8001384:	f000 f956 	bl	8001634 <__clzsi2>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	3215      	adds	r2, #21
 800138e:	3020      	adds	r0, #32
 8001390:	2a1c      	cmp	r2, #28
 8001392:	dc00      	bgt.n	8001396 <__aeabi_ddiv+0x4aa>
 8001394:	e6ff      	b.n	8001196 <__aeabi_ddiv+0x2aa>
 8001396:	4654      	mov	r4, sl
 8001398:	3b08      	subs	r3, #8
 800139a:	2100      	movs	r1, #0
 800139c:	409c      	lsls	r4, r3
 800139e:	e705      	b.n	80011ac <__aeabi_ddiv+0x2c0>
 80013a0:	1936      	adds	r6, r6, r4
 80013a2:	3b01      	subs	r3, #1
 80013a4:	42b4      	cmp	r4, r6
 80013a6:	d900      	bls.n	80013aa <__aeabi_ddiv+0x4be>
 80013a8:	e6a6      	b.n	80010f8 <__aeabi_ddiv+0x20c>
 80013aa:	42b2      	cmp	r2, r6
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x4c4>
 80013ae:	e6a3      	b.n	80010f8 <__aeabi_ddiv+0x20c>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	1936      	adds	r6, r6, r4
 80013b4:	e6a0      	b.n	80010f8 <__aeabi_ddiv+0x20c>
 80013b6:	1909      	adds	r1, r1, r4
 80013b8:	3d01      	subs	r5, #1
 80013ba:	428c      	cmp	r4, r1
 80013bc:	d900      	bls.n	80013c0 <__aeabi_ddiv+0x4d4>
 80013be:	e68d      	b.n	80010dc <__aeabi_ddiv+0x1f0>
 80013c0:	428a      	cmp	r2, r1
 80013c2:	d800      	bhi.n	80013c6 <__aeabi_ddiv+0x4da>
 80013c4:	e68a      	b.n	80010dc <__aeabi_ddiv+0x1f0>
 80013c6:	1e85      	subs	r5, r0, #2
 80013c8:	1909      	adds	r1, r1, r4
 80013ca:	e687      	b.n	80010dc <__aeabi_ddiv+0x1f0>
 80013cc:	220f      	movs	r2, #15
 80013ce:	402a      	ands	r2, r5
 80013d0:	2a04      	cmp	r2, #4
 80013d2:	d100      	bne.n	80013d6 <__aeabi_ddiv+0x4ea>
 80013d4:	e6bc      	b.n	8001150 <__aeabi_ddiv+0x264>
 80013d6:	1d29      	adds	r1, r5, #4
 80013d8:	42a9      	cmp	r1, r5
 80013da:	41ad      	sbcs	r5, r5
 80013dc:	426d      	negs	r5, r5
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	44a8      	add	r8, r5
 80013e2:	e6b6      	b.n	8001152 <__aeabi_ddiv+0x266>
 80013e4:	42af      	cmp	r7, r5
 80013e6:	d900      	bls.n	80013ea <__aeabi_ddiv+0x4fe>
 80013e8:	e662      	b.n	80010b0 <__aeabi_ddiv+0x1c4>
 80013ea:	4281      	cmp	r1, r0
 80013ec:	d804      	bhi.n	80013f8 <__aeabi_ddiv+0x50c>
 80013ee:	d000      	beq.n	80013f2 <__aeabi_ddiv+0x506>
 80013f0:	e65e      	b.n	80010b0 <__aeabi_ddiv+0x1c4>
 80013f2:	42ae      	cmp	r6, r5
 80013f4:	d800      	bhi.n	80013f8 <__aeabi_ddiv+0x50c>
 80013f6:	e65b      	b.n	80010b0 <__aeabi_ddiv+0x1c4>
 80013f8:	2302      	movs	r3, #2
 80013fa:	425b      	negs	r3, r3
 80013fc:	469c      	mov	ip, r3
 80013fe:	9b00      	ldr	r3, [sp, #0]
 8001400:	44e0      	add	r8, ip
 8001402:	469c      	mov	ip, r3
 8001404:	4465      	add	r5, ip
 8001406:	429d      	cmp	r5, r3
 8001408:	419b      	sbcs	r3, r3
 800140a:	425b      	negs	r3, r3
 800140c:	191b      	adds	r3, r3, r4
 800140e:	18c0      	adds	r0, r0, r3
 8001410:	e64f      	b.n	80010b2 <__aeabi_ddiv+0x1c6>
 8001412:	42b2      	cmp	r2, r6
 8001414:	d800      	bhi.n	8001418 <__aeabi_ddiv+0x52c>
 8001416:	e612      	b.n	800103e <__aeabi_ddiv+0x152>
 8001418:	1e83      	subs	r3, r0, #2
 800141a:	1936      	adds	r6, r6, r4
 800141c:	e60f      	b.n	800103e <__aeabi_ddiv+0x152>
 800141e:	428a      	cmp	r2, r1
 8001420:	d800      	bhi.n	8001424 <__aeabi_ddiv+0x538>
 8001422:	e5fa      	b.n	800101a <__aeabi_ddiv+0x12e>
 8001424:	1e83      	subs	r3, r0, #2
 8001426:	4698      	mov	r8, r3
 8001428:	1909      	adds	r1, r1, r4
 800142a:	e5f6      	b.n	800101a <__aeabi_ddiv+0x12e>
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <__aeabi_ddiv+0x5d4>)
 800142e:	0028      	movs	r0, r5
 8001430:	445b      	add	r3, fp
 8001432:	4641      	mov	r1, r8
 8001434:	409d      	lsls	r5, r3
 8001436:	4099      	lsls	r1, r3
 8001438:	40d0      	lsrs	r0, r2
 800143a:	1e6b      	subs	r3, r5, #1
 800143c:	419d      	sbcs	r5, r3
 800143e:	4643      	mov	r3, r8
 8001440:	4301      	orrs	r1, r0
 8001442:	4329      	orrs	r1, r5
 8001444:	40d3      	lsrs	r3, r2
 8001446:	074a      	lsls	r2, r1, #29
 8001448:	d100      	bne.n	800144c <__aeabi_ddiv+0x560>
 800144a:	e755      	b.n	80012f8 <__aeabi_ddiv+0x40c>
 800144c:	220f      	movs	r2, #15
 800144e:	400a      	ands	r2, r1
 8001450:	2a04      	cmp	r2, #4
 8001452:	d000      	beq.n	8001456 <__aeabi_ddiv+0x56a>
 8001454:	e74a      	b.n	80012ec <__aeabi_ddiv+0x400>
 8001456:	e74f      	b.n	80012f8 <__aeabi_ddiv+0x40c>
 8001458:	0015      	movs	r5, r2
 800145a:	4286      	cmp	r6, r0
 800145c:	d000      	beq.n	8001460 <__aeabi_ddiv+0x574>
 800145e:	e66d      	b.n	800113c <__aeabi_ddiv+0x250>
 8001460:	9a00      	ldr	r2, [sp, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d000      	beq.n	8001468 <__aeabi_ddiv+0x57c>
 8001466:	e669      	b.n	800113c <__aeabi_ddiv+0x250>
 8001468:	e66a      	b.n	8001140 <__aeabi_ddiv+0x254>
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <__aeabi_ddiv+0x5d8>)
 800146c:	445b      	add	r3, fp
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc00      	bgt.n	8001474 <__aeabi_ddiv+0x588>
 8001472:	e713      	b.n	800129c <__aeabi_ddiv+0x3b0>
 8001474:	2501      	movs	r5, #1
 8001476:	2100      	movs	r1, #0
 8001478:	44a8      	add	r8, r5
 800147a:	e66a      	b.n	8001152 <__aeabi_ddiv+0x266>
 800147c:	075d      	lsls	r5, r3, #29
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	0b1a      	lsrs	r2, r3, #12
 8001482:	08c9      	lsrs	r1, r1, #3
 8001484:	2300      	movs	r3, #0
 8001486:	430d      	orrs	r5, r1
 8001488:	e587      	b.n	8000f9a <__aeabi_ddiv+0xae>
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	3d02      	subs	r5, #2
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	428a      	cmp	r2, r1
 8001492:	41bf      	sbcs	r7, r7
 8001494:	427f      	negs	r7, r7
 8001496:	193f      	adds	r7, r7, r4
 8001498:	19f6      	adds	r6, r6, r7
 800149a:	9200      	str	r2, [sp, #0]
 800149c:	e7dd      	b.n	800145a <__aeabi_ddiv+0x56e>
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	4643      	mov	r3, r8
 80014a2:	0312      	lsls	r2, r2, #12
 80014a4:	431a      	orrs	r2, r3
 80014a6:	0312      	lsls	r2, r2, #12
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <__aeabi_ddiv+0x5cc>)
 80014aa:	0b12      	lsrs	r2, r2, #12
 80014ac:	e575      	b.n	8000f9a <__aeabi_ddiv+0xae>
 80014ae:	9900      	ldr	r1, [sp, #0]
 80014b0:	4299      	cmp	r1, r3
 80014b2:	d3ea      	bcc.n	800148a <__aeabi_ddiv+0x59e>
 80014b4:	0015      	movs	r5, r2
 80014b6:	e7d3      	b.n	8001460 <__aeabi_ddiv+0x574>
 80014b8:	000007ff 	.word	0x000007ff
 80014bc:	0000043e 	.word	0x0000043e
 80014c0:	0000041e 	.word	0x0000041e
 80014c4:	000003ff 	.word	0x000003ff

080014c8 <__aeabi_i2d>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d016      	beq.n	80014fc <__aeabi_i2d+0x34>
 80014ce:	17c3      	asrs	r3, r0, #31
 80014d0:	18c5      	adds	r5, r0, r3
 80014d2:	405d      	eors	r5, r3
 80014d4:	0fc4      	lsrs	r4, r0, #31
 80014d6:	0028      	movs	r0, r5
 80014d8:	f000 f8ac 	bl	8001634 <__clzsi2>
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <__aeabi_i2d+0x5c>)
 80014de:	1a1b      	subs	r3, r3, r0
 80014e0:	280a      	cmp	r0, #10
 80014e2:	dc16      	bgt.n	8001512 <__aeabi_i2d+0x4a>
 80014e4:	0002      	movs	r2, r0
 80014e6:	002e      	movs	r6, r5
 80014e8:	3215      	adds	r2, #21
 80014ea:	4096      	lsls	r6, r2
 80014ec:	220b      	movs	r2, #11
 80014ee:	1a12      	subs	r2, r2, r0
 80014f0:	40d5      	lsrs	r5, r2
 80014f2:	055b      	lsls	r3, r3, #21
 80014f4:	032d      	lsls	r5, r5, #12
 80014f6:	0b2d      	lsrs	r5, r5, #12
 80014f8:	0d5b      	lsrs	r3, r3, #21
 80014fa:	e003      	b.n	8001504 <__aeabi_i2d+0x3c>
 80014fc:	2400      	movs	r4, #0
 80014fe:	2300      	movs	r3, #0
 8001500:	2500      	movs	r5, #0
 8001502:	2600      	movs	r6, #0
 8001504:	051b      	lsls	r3, r3, #20
 8001506:	432b      	orrs	r3, r5
 8001508:	07e4      	lsls	r4, r4, #31
 800150a:	4323      	orrs	r3, r4
 800150c:	0030      	movs	r0, r6
 800150e:	0019      	movs	r1, r3
 8001510:	bd70      	pop	{r4, r5, r6, pc}
 8001512:	380b      	subs	r0, #11
 8001514:	4085      	lsls	r5, r0
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	032d      	lsls	r5, r5, #12
 800151a:	2600      	movs	r6, #0
 800151c:	0b2d      	lsrs	r5, r5, #12
 800151e:	0d5b      	lsrs	r3, r3, #21
 8001520:	e7f0      	b.n	8001504 <__aeabi_i2d+0x3c>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	0000041e 	.word	0x0000041e

08001528 <__aeabi_d2f>:
 8001528:	0002      	movs	r2, r0
 800152a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152c:	004b      	lsls	r3, r1, #1
 800152e:	030d      	lsls	r5, r1, #12
 8001530:	0f40      	lsrs	r0, r0, #29
 8001532:	0d5b      	lsrs	r3, r3, #21
 8001534:	0fcc      	lsrs	r4, r1, #31
 8001536:	0a6d      	lsrs	r5, r5, #9
 8001538:	493a      	ldr	r1, [pc, #232]	; (8001624 <__aeabi_d2f+0xfc>)
 800153a:	4305      	orrs	r5, r0
 800153c:	1c58      	adds	r0, r3, #1
 800153e:	00d7      	lsls	r7, r2, #3
 8001540:	4208      	tst	r0, r1
 8001542:	d00a      	beq.n	800155a <__aeabi_d2f+0x32>
 8001544:	4938      	ldr	r1, [pc, #224]	; (8001628 <__aeabi_d2f+0x100>)
 8001546:	1859      	adds	r1, r3, r1
 8001548:	29fe      	cmp	r1, #254	; 0xfe
 800154a:	dd16      	ble.n	800157a <__aeabi_d2f+0x52>
 800154c:	20ff      	movs	r0, #255	; 0xff
 800154e:	2200      	movs	r2, #0
 8001550:	05c0      	lsls	r0, r0, #23
 8001552:	4310      	orrs	r0, r2
 8001554:	07e4      	lsls	r4, r4, #31
 8001556:	4320      	orrs	r0, r4
 8001558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <__aeabi_d2f+0x44>
 800155e:	433d      	orrs	r5, r7
 8001560:	d026      	beq.n	80015b0 <__aeabi_d2f+0x88>
 8001562:	2205      	movs	r2, #5
 8001564:	0192      	lsls	r2, r2, #6
 8001566:	0a52      	lsrs	r2, r2, #9
 8001568:	b2d8      	uxtb	r0, r3
 800156a:	e7f1      	b.n	8001550 <__aeabi_d2f+0x28>
 800156c:	432f      	orrs	r7, r5
 800156e:	d0ed      	beq.n	800154c <__aeabi_d2f+0x24>
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	03d2      	lsls	r2, r2, #15
 8001574:	20ff      	movs	r0, #255	; 0xff
 8001576:	432a      	orrs	r2, r5
 8001578:	e7ea      	b.n	8001550 <__aeabi_d2f+0x28>
 800157a:	2900      	cmp	r1, #0
 800157c:	dd1b      	ble.n	80015b6 <__aeabi_d2f+0x8e>
 800157e:	0192      	lsls	r2, r2, #6
 8001580:	1e50      	subs	r0, r2, #1
 8001582:	4182      	sbcs	r2, r0
 8001584:	00ed      	lsls	r5, r5, #3
 8001586:	0f7f      	lsrs	r7, r7, #29
 8001588:	432a      	orrs	r2, r5
 800158a:	433a      	orrs	r2, r7
 800158c:	0753      	lsls	r3, r2, #29
 800158e:	d047      	beq.n	8001620 <__aeabi_d2f+0xf8>
 8001590:	230f      	movs	r3, #15
 8001592:	4013      	ands	r3, r2
 8001594:	2b04      	cmp	r3, #4
 8001596:	d000      	beq.n	800159a <__aeabi_d2f+0x72>
 8001598:	3204      	adds	r2, #4
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	04db      	lsls	r3, r3, #19
 800159e:	4013      	ands	r3, r2
 80015a0:	d03e      	beq.n	8001620 <__aeabi_d2f+0xf8>
 80015a2:	1c48      	adds	r0, r1, #1
 80015a4:	29fe      	cmp	r1, #254	; 0xfe
 80015a6:	d0d1      	beq.n	800154c <__aeabi_d2f+0x24>
 80015a8:	0192      	lsls	r2, r2, #6
 80015aa:	0a52      	lsrs	r2, r2, #9
 80015ac:	b2c0      	uxtb	r0, r0
 80015ae:	e7cf      	b.n	8001550 <__aeabi_d2f+0x28>
 80015b0:	2000      	movs	r0, #0
 80015b2:	2200      	movs	r2, #0
 80015b4:	e7cc      	b.n	8001550 <__aeabi_d2f+0x28>
 80015b6:	000a      	movs	r2, r1
 80015b8:	3217      	adds	r2, #23
 80015ba:	db2f      	blt.n	800161c <__aeabi_d2f+0xf4>
 80015bc:	2680      	movs	r6, #128	; 0x80
 80015be:	0436      	lsls	r6, r6, #16
 80015c0:	432e      	orrs	r6, r5
 80015c2:	251e      	movs	r5, #30
 80015c4:	1a6d      	subs	r5, r5, r1
 80015c6:	2d1f      	cmp	r5, #31
 80015c8:	dd11      	ble.n	80015ee <__aeabi_d2f+0xc6>
 80015ca:	2202      	movs	r2, #2
 80015cc:	4252      	negs	r2, r2
 80015ce:	1a52      	subs	r2, r2, r1
 80015d0:	0031      	movs	r1, r6
 80015d2:	40d1      	lsrs	r1, r2
 80015d4:	2d20      	cmp	r5, #32
 80015d6:	d004      	beq.n	80015e2 <__aeabi_d2f+0xba>
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <__aeabi_d2f+0x104>)
 80015da:	4694      	mov	ip, r2
 80015dc:	4463      	add	r3, ip
 80015de:	409e      	lsls	r6, r3
 80015e0:	4337      	orrs	r7, r6
 80015e2:	003a      	movs	r2, r7
 80015e4:	1e53      	subs	r3, r2, #1
 80015e6:	419a      	sbcs	r2, r3
 80015e8:	430a      	orrs	r2, r1
 80015ea:	2100      	movs	r1, #0
 80015ec:	e7ce      	b.n	800158c <__aeabi_d2f+0x64>
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <__aeabi_d2f+0x108>)
 80015f0:	0038      	movs	r0, r7
 80015f2:	4694      	mov	ip, r2
 80015f4:	4463      	add	r3, ip
 80015f6:	4098      	lsls	r0, r3
 80015f8:	003a      	movs	r2, r7
 80015fa:	1e41      	subs	r1, r0, #1
 80015fc:	4188      	sbcs	r0, r1
 80015fe:	409e      	lsls	r6, r3
 8001600:	40ea      	lsrs	r2, r5
 8001602:	4330      	orrs	r0, r6
 8001604:	4302      	orrs	r2, r0
 8001606:	2100      	movs	r1, #0
 8001608:	0753      	lsls	r3, r2, #29
 800160a:	d1c1      	bne.n	8001590 <__aeabi_d2f+0x68>
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0013      	movs	r3, r2
 8001610:	04c9      	lsls	r1, r1, #19
 8001612:	2001      	movs	r0, #1
 8001614:	400b      	ands	r3, r1
 8001616:	420a      	tst	r2, r1
 8001618:	d1c6      	bne.n	80015a8 <__aeabi_d2f+0x80>
 800161a:	e7a3      	b.n	8001564 <__aeabi_d2f+0x3c>
 800161c:	2300      	movs	r3, #0
 800161e:	e7a0      	b.n	8001562 <__aeabi_d2f+0x3a>
 8001620:	000b      	movs	r3, r1
 8001622:	e79f      	b.n	8001564 <__aeabi_d2f+0x3c>
 8001624:	000007fe 	.word	0x000007fe
 8001628:	fffffc80 	.word	0xfffffc80
 800162c:	fffffca2 	.word	0xfffffca2
 8001630:	fffffc82 	.word	0xfffffc82

08001634 <__clzsi2>:
 8001634:	211c      	movs	r1, #28
 8001636:	2301      	movs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	4298      	cmp	r0, r3
 800163c:	d301      	bcc.n	8001642 <__clzsi2+0xe>
 800163e:	0c00      	lsrs	r0, r0, #16
 8001640:	3910      	subs	r1, #16
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	4298      	cmp	r0, r3
 8001646:	d301      	bcc.n	800164c <__clzsi2+0x18>
 8001648:	0a00      	lsrs	r0, r0, #8
 800164a:	3908      	subs	r1, #8
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	4298      	cmp	r0, r3
 8001650:	d301      	bcc.n	8001656 <__clzsi2+0x22>
 8001652:	0900      	lsrs	r0, r0, #4
 8001654:	3904      	subs	r1, #4
 8001656:	a202      	add	r2, pc, #8	; (adr r2, 8001660 <__clzsi2+0x2c>)
 8001658:	5c10      	ldrb	r0, [r2, r0]
 800165a:	1840      	adds	r0, r0, r1
 800165c:	4770      	bx	lr
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	02020304 	.word	0x02020304
 8001664:	01010101 	.word	0x01010101
	...

08001670 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	0018      	movs	r0, r3
 800167a:	230c      	movs	r3, #12
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f008 f8b8 	bl	80097f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001686:	4a51      	ldr	r2, [pc, #324]	; (80017cc <MX_ADC1_Init+0x15c>)
 8001688:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <MX_ADC1_Init+0x158>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	05d2      	lsls	r2, r2, #23
 8001690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001692:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <MX_ADC1_Init+0x158>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800169e:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0392      	lsls	r2, r2, #14
 80016a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016a8:	2204      	movs	r2, #4
 80016aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80016be:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016c0:	2205      	movs	r2, #5
 80016c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016d2:	222c      	movs	r2, #44	; 0x2c
 80016d4:	2101      	movs	r1, #1
 80016d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016d8:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016da:	2200      	movs	r2, #0
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016e0:	2205      	movs	r2, #5
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016ec:	223c      	movs	r2, #60	; 0x3c
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016f4:	220c      	movs	r2, #12
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <MX_ADC1_Init+0x158>)
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80016fe:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001700:	2200      	movs	r2, #0
 8001702:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001706:	2200      	movs	r2, #0
 8001708:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <MX_ADC1_Init+0x158>)
 800170c:	0018      	movs	r0, r3
 800170e:	f000 ff41 	bl	8002594 <HAL_ADC_Init>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001716:	f000 fa5d 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172c:	1d3a      	adds	r2, r7, #4
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f001 f97c 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800173c:	f000 fa4a 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <MX_ADC1_Init+0x160>)
 8001744:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2204      	movs	r2, #4
 800174a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	1d3a      	adds	r2, r7, #4
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f001 f96c 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800175c:	f000 fa3a 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <MX_ADC1_Init+0x164>)
 8001764:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2208      	movs	r2, #8
 800176a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176c:	1d3a      	adds	r2, r7, #4
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f001 f95c 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 800177c:	f000 fa2a 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <MX_ADC1_Init+0x168>)
 8001784:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	220c      	movs	r2, #12
 800178a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	1d3a      	adds	r2, r7, #4
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_ADC1_Init+0x158>)
 8001790:	0011      	movs	r1, r2
 8001792:	0018      	movs	r0, r3
 8001794:	f001 f94c 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 800179c:	f000 fa1a 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <MX_ADC1_Init+0x16c>)
 80017a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2210      	movs	r2, #16
 80017aa:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	1d3a      	adds	r2, r7, #4
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_ADC1_Init+0x158>)
 80017b0:	0011      	movs	r1, r2
 80017b2:	0018      	movs	r0, r3
 80017b4:	f001 f93c 	bl	8002a30 <HAL_ADC_ConfigChannel>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80017bc:	f000 fa0a 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000008c 	.word	0x2000008c
 80017cc:	40012400 	.word	0x40012400
 80017d0:	04000002 	.word	0x04000002
 80017d4:	08000004 	.word	0x08000004
 80017d8:	18000040 	.word	0x18000040
 80017dc:	b4002000 	.word	0xb4002000

080017e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	2414      	movs	r4, #20
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	0018      	movs	r0, r3
 80017ee:	2314      	movs	r3, #20
 80017f0:	001a      	movs	r2, r3
 80017f2:	2100      	movs	r1, #0
 80017f4:	f007 fffe 	bl	80097f4 <memset>
  if(adcHandle->Instance==ADC1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <HAL_ADC_MspInit+0xd4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d154      	bne.n	80018ac <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_ADC_MspInit+0xd8>)
 8001804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_ADC_MspInit+0xd8>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0349      	lsls	r1, r1, #13
 800180c:	430a      	orrs	r2, r1
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_ADC_MspInit+0xd8>)
 8001812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	035b      	lsls	r3, r3, #13
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_ADC_MspInit+0xd8>)
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_ADC_MspInit+0xd8>)
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_ADC_MspInit+0xd8>)
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BAT1_VOL_Pin|BAT2_VOL_Pin|SYS_VOL_Pin|ADT_VOL_Pin;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2247      	movs	r2, #71	; 0x47
 800183a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183c:	193b      	adds	r3, r7, r4
 800183e:	2203      	movs	r2, #3
 8001840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	193b      	adds	r3, r7, r4
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	193a      	adds	r2, r7, r4
 800184a:	23a0      	movs	r3, #160	; 0xa0
 800184c:	05db      	lsls	r3, r3, #23
 800184e:	0011      	movs	r1, r2
 8001850:	0018      	movs	r0, r3
 8001852:	f002 f8ef 	bl	8003a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_ADC_MspInit+0xe0>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 800185e:	2205      	movs	r2, #5
 8001860:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	0052      	lsls	r2, r2, #1
 800187a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	00d2      	lsls	r2, r2, #3
 8001882:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 8001886:	2220      	movs	r2, #32
 8001888:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 8001892:	0018      	movs	r0, r3
 8001894:	f001 fe1a 	bl	80034cc <HAL_DMA_Init>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d001      	beq.n	80018a0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800189c:	f000 f99a 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 80018a4:	651a      	str	r2, [r3, #80]	; 0x50
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_ADC_MspInit+0xdc>)
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b00b      	add	sp, #44	; 0x2c
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	40012400 	.word	0x40012400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	200000f0 	.word	0x200000f0
 80018c0:	40020008 	.word	0x40020008

080018c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018c8:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <MX_FREERTOS_Init+0x1c>)
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_FREERTOS_Init+0x20>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f004 fe8a 	bl	80065e8 <osThreadNew>
 80018d4:	0002      	movs	r2, r0
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <MX_FREERTOS_Init+0x24>)
 80018d8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08009ad0 	.word	0x08009ad0
 80018e4:	080018ed 	.word	0x080018ed
 80018e8:	2000014c 	.word	0x2000014c

080018ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
//		  ADC_FUCK = HAL_ADCEx_Calibration_GetValue(&hadc1);
//		  HAL_ADCEx_Calibration_SetValue(&hadc1, ADC_FUCK);
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f004 ff0d 	bl	8006714 <osDelay>
 80018fa:	e7fb      	b.n	80018f4 <StartDefaultTask+0x8>

080018fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_DMA_Init+0x48>)
 8001904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_DMA_Init+0x48>)
 8001908:	2101      	movs	r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_DMA_Init+0x48>)
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2103      	movs	r1, #3
 800191e:	2009      	movs	r0, #9
 8001920:	f001 fdae 	bl	8003480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001924:	2009      	movs	r0, #9
 8001926:	f001 fdc0 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2103      	movs	r1, #3
 800192e:	200a      	movs	r0, #10
 8001930:	f001 fda6 	bl	8003480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001934:	200a      	movs	r0, #10
 8001936:	f001 fdb8 	bl	80034aa <HAL_NVIC_EnableIRQ>

}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000

08001948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	2414      	movs	r4, #20
 8001950:	193b      	adds	r3, r7, r4
 8001952:	0018      	movs	r0, r3
 8001954:	2314      	movs	r3, #20
 8001956:	001a      	movs	r2, r3
 8001958:	2100      	movs	r1, #0
 800195a:	f007 ff4b 	bl	80097f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <MX_GPIO_Init+0x174>)
 8001960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <MX_GPIO_Init+0x174>)
 8001964:	2104      	movs	r1, #4
 8001966:	430a      	orrs	r2, r1
 8001968:	635a      	str	r2, [r3, #52]	; 0x34
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <MX_GPIO_Init+0x174>)
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	2204      	movs	r2, #4
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <MX_GPIO_Init+0x174>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <MX_GPIO_Init+0x174>)
 800197c:	2120      	movs	r1, #32
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <MX_GPIO_Init+0x174>)
 8001984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001986:	2220      	movs	r2, #32
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <MX_GPIO_Init+0x174>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <MX_GPIO_Init+0x174>)
 8001994:	2101      	movs	r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <MX_GPIO_Init+0x174>)
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <MX_GPIO_Init+0x174>)
 80019a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <MX_GPIO_Init+0x174>)
 80019ac:	2102      	movs	r1, #2
 80019ae:	430a      	orrs	r2, r1
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <MX_GPIO_Init+0x174>)
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <MX_GPIO_Init+0x174>)
 80019c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c2:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <MX_GPIO_Init+0x174>)
 80019c4:	2108      	movs	r1, #8
 80019c6:	430a      	orrs	r2, r1
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <MX_GPIO_Init+0x174>)
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	2208      	movs	r2, #8
 80019d0:	4013      	ands	r3, r2
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80019d6:	23a0      	movs	r3, #160	; 0xa0
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	2200      	movs	r2, #0
 80019dc:	2120      	movs	r1, #32
 80019de:	0018      	movs	r0, r3
 80019e0:	f002 f98c 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MAX_BATSEL_Pin|MAX_RELEARN_Pin|MAX_CHG_Pin, GPIO_PIN_RESET);
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <MX_GPIO_Init+0x178>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	2107      	movs	r1, #7
 80019ea:	0018      	movs	r0, r3
 80019ec:	f002 f986 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	2220      	movs	r2, #32
 80019f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	2201      	movs	r2, #1
 80019fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a02:	193b      	adds	r3, r7, r4
 8001a04:	2202      	movs	r2, #2
 8001a06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a08:	193a      	adds	r2, r7, r4
 8001a0a:	23a0      	movs	r3, #160	; 0xa0
 8001a0c:	05db      	lsls	r3, r3, #23
 8001a0e:	0011      	movs	r1, r2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f002 f80f 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_OUT0_Pin|MAX_OUT1_Pin|MAX_OUT2_Pin;
 8001a16:	0021      	movs	r1, r4
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	22e0      	movs	r2, #224	; 0xe0
 8001a1c:	0212      	lsls	r2, r2, #8
 8001a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	000c      	movs	r4, r1
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <MX_GPIO_Init+0x17c>)
 8001a32:	0019      	movs	r1, r3
 8001a34:	0010      	movs	r0, r2
 8001a36:	f001 fffd 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001a3a:	0021      	movs	r1, r4
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	22c4      	movs	r2, #196	; 0xc4
 8001a48:	0392      	lsls	r2, r2, #14
 8001a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4c:	000c      	movs	r4, r1
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	2201      	movs	r2, #1
 8001a52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <MX_GPIO_Init+0x178>)
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f001 ffea 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MAX_BATSEL_Pin|MAX_RELEARN_Pin|MAX_CHG_Pin;
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	2207      	movs	r2, #7
 8001a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2201      	movs	r2, #1
 8001a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	2202      	movs	r2, #2
 8001a70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <MX_GPIO_Init+0x178>)
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	0010      	movs	r0, r2
 8001a80:	f001 ffd8 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BATSEL1_BT_Pin|BATSEL2_BT_Pin;
 8001a84:	0021      	movs	r1, r4
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2218      	movs	r2, #24
 8001a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2202      	movs	r2, #2
 8001a96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <MX_GPIO_Init+0x178>)
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	0010      	movs	r0, r2
 8001aa0:	f001 ffc8 	bl	8003a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2007      	movs	r0, #7
 8001aaa:	f001 fce9 	bl	8003480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001aae:	2007      	movs	r0, #7
 8001ab0:	f001 fcfb 	bl	80034aa <HAL_NVIC_EnableIRQ>

}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b00b      	add	sp, #44	; 0x2c
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	50000c00 	.word	0x50000c00
 8001ac4:	50000400 	.word	0x50000400

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001acc:	f000 fbce 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad0:	f000 f813 	bl	8001afa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad4:	f7ff ff38 	bl	8001948 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad8:	f7ff ff10 	bl	80018fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001adc:	f000 fa76 	bl	8001fcc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ae0:	f7ff fdc6 	bl	8001670 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001ae4:	f000 f87c 	bl	8001be0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  heralink_main_init();
 8001ae8:	f007 fc24 	bl	8009334 <heralink_main_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001aec:	f004 fd34 	bl	8006558 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001af0:	f7ff fee8 	bl	80018c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001af4:	f004 fd52 	bl	800659c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <main+0x30>

08001afa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afa:	b590      	push	{r4, r7, lr}
 8001afc:	b093      	sub	sp, #76	; 0x4c
 8001afe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b00:	2414      	movs	r4, #20
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	0018      	movs	r0, r3
 8001b06:	2334      	movs	r3, #52	; 0x34
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f007 fe72 	bl	80097f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	0018      	movs	r0, r3
 8001b14:	2310      	movs	r3, #16
 8001b16:	001a      	movs	r2, r3
 8001b18:	2100      	movs	r1, #0
 8001b1a:	f007 fe6b 	bl	80097f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f002 f932 	bl	8003d8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001b36:	0021      	movs	r1, r4
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2202      	movs	r2, #2
 8001b48:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	2208      	movs	r2, #8
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	0292      	lsls	r2, r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	0592      	lsls	r2, r2, #22
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f002 f958 	bl	8003e24 <HAL_RCC_OscConfig>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b78:	f000 f82c 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2207      	movs	r2, #7
 8001b80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2202      	movs	r2, #2
 8001b86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	01d2      	lsls	r2, r2, #7
 8001b94:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2102      	movs	r1, #2
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f002 fc52 	bl	8004444 <HAL_RCC_ClockConfig>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ba4:	f000 f816 	bl	8001bd4 <Error_Handler>
  }
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b013      	add	sp, #76	; 0x4c
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc2:	f000 fb73 	bl	80022ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001be6:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <MX_SPI1_Init+0x70>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001bf8:	22e0      	movs	r2, #224	; 0xe0
 8001bfa:	00d2      	lsls	r2, r2, #3
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c26:	2207      	movs	r2, #7
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <MX_SPI1_Init+0x6c>)
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f002 ff0b 	bl	8004a54 <HAL_SPI_Init>
 8001c3e:	1e03      	subs	r3, r0, #0
 8001c40:	d001      	beq.n	8001c46 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8001c42:	f7ff ffc7 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000150 	.word	0x20000150
 8001c50:	40013000 	.word	0x40013000

08001c54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b08b      	sub	sp, #44	; 0x2c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	2414      	movs	r4, #20
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	0018      	movs	r0, r3
 8001c62:	2314      	movs	r3, #20
 8001c64:	001a      	movs	r2, r3
 8001c66:	2100      	movs	r1, #0
 8001c68:	f007 fdc4 	bl	80097f4 <memset>
  if(spiHandle->Instance==SPI1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_SPI_MspInit+0x17c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d000      	beq.n	8001c78 <HAL_SPI_MspInit+0x24>
 8001c76:	e0a7      	b.n	8001dc8 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7c:	4b55      	ldr	r3, [pc, #340]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	0149      	lsls	r1, r1, #5
 8001c82:	430a      	orrs	r2, r1
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
 8001c86:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_SPI_MspInit+0x180>)
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc4:	193b      	adds	r3, r7, r4
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0052      	lsls	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	2202      	movs	r2, #2
 8001cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	193b      	adds	r3, r7, r4
 8001cda:	2203      	movs	r2, #3
 8001cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <HAL_SPI_MspInit+0x184>)
 8001ce8:	0019      	movs	r1, r3
 8001cea:	0010      	movs	r0, r2
 8001cec:	f001 fea2 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cf0:	0021      	movs	r1, r4
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	22c0      	movs	r2, #192	; 0xc0
 8001cf6:	0152      	lsls	r2, r2, #5
 8001cf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2201      	movs	r2, #1
 8001d04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	187a      	adds	r2, r7, r1
 8001d14:	23a0      	movs	r3, #160	; 0xa0
 8001d16:	05db      	lsls	r3, r3, #23
 8001d18:	0011      	movs	r1, r2
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f001 fe8a 	bl	8003a34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <HAL_SPI_MspInit+0x18c>)
 8001d24:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d28:	2210      	movs	r2, #16
 8001d2a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	0152      	lsls	r2, r2, #5
 8001d56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f001 fbb6 	bl	80034cc <HAL_DMA_Init>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8001d64:	f7ff ff36 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d6c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_SPI_MspInit+0x188>)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_SPI_MspInit+0x194>)
 8001d78:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d7c:	2211      	movs	r2, #17
 8001d7e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d82:	2210      	movs	r2, #16
 8001d84:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	0152      	lsls	r2, r2, #5
 8001daa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 fb8c 	bl	80034cc <HAL_DMA_Init>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8001db8:	f7ff ff0c 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_SPI_MspInit+0x190>)
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b00b      	add	sp, #44	; 0x2c
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	40013000 	.word	0x40013000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	50000c00 	.word	0x50000c00
 8001ddc:	200001b4 	.word	0x200001b4
 8001de0:	4002001c 	.word	0x4002001c
 8001de4:	20000210 	.word	0x20000210
 8001de8:	40020030 	.word	0x40020030

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_MspInit+0x50>)
 8001df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_MspInit+0x50>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_MspInit+0x50>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2201      	movs	r2, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_MspInit+0x50>)
 8001e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_MspInit+0x50>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0549      	lsls	r1, r1, #21
 8001e14:	430a      	orrs	r2, r1
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_MspInit+0x50>)
 8001e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	4013      	ands	r3, r2
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001e26:	2302      	movs	r3, #2
 8001e28:	425b      	negs	r3, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f001 fb26 	bl	8003480 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e48:	232b      	movs	r3, #43	; 0x2b
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e50:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <HAL_InitTick+0xf4>)
 8001e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_InitTick+0xf4>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0109      	lsls	r1, r1, #4
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_InitTick+0xf4>)
 8001e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4013      	ands	r3, r2
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	18fa      	adds	r2, r7, r3
 8001e70:	2410      	movs	r4, #16
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	0011      	movs	r1, r2
 8001e76:	0018      	movs	r0, r3
 8001e78:	f002 fc8e 	bl	8004798 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e88:	f002 fc70 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e90:	e004      	b.n	8001e9c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e92:	f002 fc6b 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8001e96:	0003      	movs	r3, r0
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	4926      	ldr	r1, [pc, #152]	; (8001f38 <HAL_InitTick+0xf8>)
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7fe f931 	bl	8000108 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_InitTick+0xfc>)
 8001eae:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <HAL_InitTick+0x100>)
 8001eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_InitTick+0xfc>)
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_InitTick+0x104>)
 8001eb6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_InitTick+0xfc>)
 8001eba:	6a3a      	ldr	r2, [r7, #32]
 8001ebc:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_InitTick+0xfc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_InitTick+0xfc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_InitTick+0xfc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ed0:	252b      	movs	r5, #43	; 0x2b
 8001ed2:	197c      	adds	r4, r7, r5
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_InitTick+0xfc>)
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f003 fb40 	bl	800555c <HAL_TIM_Base_Init>
 8001edc:	0003      	movs	r3, r0
 8001ede:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001ee0:	197b      	adds	r3, r7, r5
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11e      	bne.n	8001f26 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ee8:	197c      	adds	r4, r7, r5
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_InitTick+0xfc>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f003 fb95 	bl	800561c <HAL_TIM_Base_Start_IT>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001ef6:	197b      	adds	r3, r7, r5
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d113      	bne.n	8001f26 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001efe:	200d      	movs	r0, #13
 8001f00:	f001 fad3 	bl	80034aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d809      	bhi.n	8001f1e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	200d      	movs	r0, #13
 8001f12:	f001 fab5 	bl	8003480 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_InitTick+0x108>)
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e003      	b.n	8001f26 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001f1e:	232b      	movs	r3, #43	; 0x2b
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001f26:	232b      	movs	r3, #43	; 0x2b
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	781b      	ldrb	r3, [r3, #0]
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b00c      	add	sp, #48	; 0x30
 8001f32:	bdb0      	pop	{r4, r5, r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	000f4240 	.word	0x000f4240
 8001f3c:	2000026c 	.word	0x2000026c
 8001f40:	40012c00 	.word	0x40012c00
 8001f44:	000003e7 	.word	0x000003e7
 8001f48:	20000004 	.word	0x20000004

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <NMI_Handler+0x4>

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_NSS_Pin);
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	0018      	movs	r0, r3
 8001f62:	f001 fee9 	bl	8003d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <DMA1_Channel1_IRQHandler+0x14>)
 8001f72:	0018      	movs	r0, r3
 8001f74:	f001 fc1c 	bl	80037b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	200000f0 	.word	0x200000f0

08001f84 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f001 fc10 	bl	80037b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f001 fc0c 	bl	80037b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	200001b4 	.word	0x200001b4
 8001fa4:	20000210 	.word	0x20000210

08001fa8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f003 fb8a 	bl	80056c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	2000026c 	.word	0x2000026c

08001fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <MX_USART1_UART_Init+0x98>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001fd8:	22e1      	movs	r2, #225	; 0xe1
 8001fda:	0252      	lsls	r2, r2, #9
 8001fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_USART1_UART_Init+0x94>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8002016:	0018      	movs	r0, r3
 8002018:	f003 fd36 	bl	8005a88 <HAL_UART_Init>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002020:	f7ff fdd8 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8002026:	2100      	movs	r1, #0
 8002028:	0018      	movs	r0, r3
 800202a:	f004 f92b 	bl	8006284 <HAL_UARTEx_SetTxFifoThreshold>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002032:	f7ff fdcf 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <MX_USART1_UART_Init+0x94>)
 8002038:	2100      	movs	r1, #0
 800203a:	0018      	movs	r0, r3
 800203c:	f004 f962 	bl	8006304 <HAL_UARTEx_SetRxFifoThreshold>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d001      	beq.n	8002048 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002044:	f7ff fdc6 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <MX_USART1_UART_Init+0x94>)
 800204a:	0018      	movs	r0, r3
 800204c:	f004 f8e0 	bl	8006210 <HAL_UARTEx_DisableFifoMode>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002054:	f7ff fdbe 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	200002b8 	.word	0x200002b8
 8002064:	40013800 	.word	0x40013800

08002068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b091      	sub	sp, #68	; 0x44
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	232c      	movs	r3, #44	; 0x2c
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	0018      	movs	r0, r3
 8002076:	2314      	movs	r3, #20
 8002078:	001a      	movs	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	f007 fbba 	bl	80097f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002080:	2410      	movs	r4, #16
 8002082:	193b      	adds	r3, r7, r4
 8002084:	0018      	movs	r0, r3
 8002086:	231c      	movs	r3, #28
 8002088:	001a      	movs	r2, r3
 800208a:	2100      	movs	r1, #0
 800208c:	f007 fbb2 	bl	80097f4 <memset>
  if(uartHandle->Instance==USART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_UART_MspInit+0xb8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d13d      	bne.n	8002116 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800209a:	193b      	adds	r3, r7, r4
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a6:	193b      	adds	r3, r7, r4
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 fb9f 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020b2:	f7ff fd8f 	bl	8001bd4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_UART_MspInit+0xbc>)
 80020b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_UART_MspInit+0xbc>)
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	01c9      	lsls	r1, r1, #7
 80020c0:	430a      	orrs	r2, r1
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_UART_MspInit+0xbc>)
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_UART_MspInit+0xbc>)
 80020d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_UART_MspInit+0xbc>)
 80020d8:	2104      	movs	r1, #4
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_UART_MspInit+0xbc>)
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	2230      	movs	r2, #48	; 0x30
 80020f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2202      	movs	r2, #2
 80020f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2201      	movs	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	187b      	adds	r3, r7, r1
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_UART_MspInit+0xc0>)
 800210e:	0019      	movs	r1, r3
 8002110:	0010      	movs	r0, r2
 8002112:	f001 fc8f 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b011      	add	sp, #68	; 0x44
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40013800 	.word	0x40013800
 8002124:	40021000 	.word	0x40021000
 8002128:	50000800 	.word	0x50000800

0800212c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800212e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002130:	f7ff ff46 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <LoopForever+0x6>)
  ldr r1, =_edata
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <LoopForever+0xe>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <LoopForever+0x16>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800215a:	f007 fbb1 	bl	80098c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800215e:	f7ff fcb3 	bl	8001ac8 <main>

08002162 <LoopForever>:

LoopForever:
  b LoopForever
 8002162:	e7fe      	b.n	8002162 <LoopForever>
  ldr   r0, =_estack
 8002164:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002170:	08009bac 	.word	0x08009bac
  ldr r2, =_sbss
 8002174:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002178:	20001fcc 	.word	0x20001fcc

0800217c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_IRQHandler>

0800217e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800217e:	b590      	push	{r4, r7, lr}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	f7ff fd20 	bl	8001bd4 <Error_Handler>
 8002194:	e7fe      	b.n	8002194 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7a1b      	ldrb	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d904      	bls.n	80021a8 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800219e:	b672      	cpsid	i
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	f7ff fd17 	bl	8001bd4 <Error_Handler>
 80021a6:	e7fe      	b.n	80021a6 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7a1b      	ldrb	r3, [r3, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	b2d1      	uxtb	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	7211      	strb	r1, [r2, #8]
 80021b4:	001c      	movs	r4, r3
 80021b6:	f006 fd5d 	bl	8008c74 <ulSetInterruptMaskFromISR>
 80021ba:	0001      	movs	r1, r0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	00a2      	lsls	r2, r4, #2
 80021c0:	50d1      	str	r1, [r2, r3]
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b003      	add	sp, #12
 80021c8:	bd90      	pop	{r4, r7, pc}

080021ca <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	f7ff fcfa 	bl	8001bd4 <Error_Handler>
 80021e0:	e7fe      	b.n	80021e0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7a1b      	ldrb	r3, [r3, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7a1b      	ldrb	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d904      	bls.n	8002200 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80021f6:	b672      	cpsid	i
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	f7ff fceb 	bl	8001bd4 <Error_Handler>
 80021fe:	e7fe      	b.n	80021fe <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7a1b      	ldrb	r3, [r3, #8]
 8002204:	001a      	movs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	58d3      	ldr	r3, [r2, r3]
 800220c:	0018      	movs	r0, r3
 800220e:	f006 fd37 	bl	8008c80 <vClearInterruptMaskFromISR>
}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}

0800221a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	f7ff fcd2 	bl	8001bd4 <Error_Handler>
 8002230:	e7fe      	b.n	8002230 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ffa2 	bl	800217e <stm32_lock_acquire>
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	f7ff fcbe 	bl	8001bd4 <Error_Handler>
 8002258:	e7fe      	b.n	8002258 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ffb4 	bl	80021ca <stm32_lock_release>
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b002      	add	sp, #8
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_Init+0x3c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_Init+0x3c>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0049      	lsls	r1, r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002286:	2003      	movs	r0, #3
 8002288:	f7ff fdda 	bl	8001e40 <HAL_InitTick>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d003      	beq.n	8002298 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e001      	b.n	800229c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fda8 	bl	8001dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40022000 	.word	0x40022000

080022ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_IncTick+0x1c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	001a      	movs	r2, r3
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x20>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	18d2      	adds	r2, r2, r3
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_IncTick+0x20>)
 80022be:	601a      	str	r2, [r3, #0]
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000358 	.word	0x20000358

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <HAL_GetTick+0x10>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	20000358 	.word	0x20000358

080022e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80022f4:	401a      	ands	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	fe3fffff 	.word	0xfe3fffff

0800230c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	23e0      	movs	r3, #224	; 0xe0
 800231a:	045b      	lsls	r3, r3, #17
 800231c:	4013      	ands	r3, r2
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}

08002326 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	2104      	movs	r1, #4
 800233a:	400a      	ands	r2, r1
 800233c:	2107      	movs	r1, #7
 800233e:	4091      	lsls	r1, r2
 8002340:	000a      	movs	r2, r1
 8002342:	43d2      	mvns	r2, r2
 8002344:	401a      	ands	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2104      	movs	r1, #4
 800234a:	400b      	ands	r3, r1
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4099      	lsls	r1, r3
 8002350:	000b      	movs	r3, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}

08002360 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	2104      	movs	r1, #4
 8002372:	400a      	ands	r2, r1
 8002374:	2107      	movs	r1, #7
 8002376:	4091      	lsls	r1, r2
 8002378:	000a      	movs	r2, r1
 800237a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2104      	movs	r1, #4
 8002380:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002382:	40da      	lsrs	r2, r3
 8002384:	0013      	movs	r3, r2
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}

0800238e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4013      	ands	r3, r2
 80023a0:	d101      	bne.n	80023a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	211f      	movs	r1, #31
 80023c4:	400a      	ands	r2, r1
 80023c6:	210f      	movs	r1, #15
 80023c8:	4091      	lsls	r1, r2
 80023ca:	000a      	movs	r2, r1
 80023cc:	43d2      	mvns	r2, r2
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	210f      	movs	r1, #15
 80023d6:	4019      	ands	r1, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	201f      	movs	r0, #31
 80023dc:	4003      	ands	r3, r0
 80023de:	4099      	lsls	r1, r3
 80023e0:	000b      	movs	r3, r1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	035b      	lsls	r3, r3, #13
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}

08002412 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	0352      	lsls	r2, r2, #13
 8002424:	0b52      	lsrs	r2, r2, #13
 8002426:	43d2      	mvns	r2, r2
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	0212      	lsls	r2, r2, #8
 800244c:	43d2      	mvns	r2, r2
 800244e:	401a      	ands	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	400b      	ands	r3, r1
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <LL_ADC_SetChannelSamplingTime+0x34>)
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	07ffff00 	.word	0x07ffff00

08002470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a05      	ldr	r2, [pc, #20]	; (8002494 <LL_ADC_EnableInternalRegulator+0x24>)
 800247e:	4013      	ands	r3, r2
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	0552      	lsls	r2, r2, #21
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	6fffffe8 	.word	0x6fffffe8

08002498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	055b      	lsls	r3, r3, #21
 80024a8:	401a      	ands	r2, r3
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	055b      	lsls	r3, r3, #21
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}

080024c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <LL_ADC_Enable+0x20>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	2201      	movs	r2, #1
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	7fffffe8 	.word	0x7fffffe8

080024e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <LL_ADC_Disable+0x20>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	2202      	movs	r2, #2
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	7fffffe8 	.word	0x7fffffe8

08002508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <LL_ADC_IsEnabled+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_ADC_IsEnabled+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}

0800252a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d101      	bne.n	8002542 <LL_ADC_IsDisableOngoing+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_IsDisableOngoing+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <LL_ADC_REG_StartConversion+0x20>)
 800255a:	4013      	ands	r3, r2
 800255c:	2204      	movs	r2, #4
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	7fffffe8 	.word	0x7fffffe8

08002570 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	2b04      	cmp	r3, #4
 8002582:	d101      	bne.n	8002588 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259c:	231f      	movs	r3, #31
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e17f      	b.n	80028ba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff f90b 	bl	80017e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2254      	movs	r2, #84	; 0x54
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff5b 	bl	8002498 <LL_ADC_IsInternalRegulatorEnabled>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d115      	bne.n	8002612 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff ff40 	bl	8002470 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f0:	4bb4      	ldr	r3, [pc, #720]	; (80028c4 <HAL_ADC_Init+0x330>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	49b4      	ldr	r1, [pc, #720]	; (80028c8 <HAL_ADC_Init+0x334>)
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7fd fd86 	bl	8000108 <__udivsi3>
 80025fc:	0003      	movs	r3, r0
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002604:	e002      	b.n	800260c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff ff3e 	bl	8002498 <LL_ADC_IsInternalRegulatorEnabled>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d10f      	bne.n	8002640 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	2210      	movs	r2, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2201      	movs	r2, #1
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002638:	231f      	movs	r3, #31
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff93 	bl	8002570 <LL_ADC_REG_IsConversionOngoing>
 800264a:	0003      	movs	r3, r0
 800264c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	2210      	movs	r2, #16
 8002654:	4013      	ands	r3, r2
 8002656:	d000      	beq.n	800265a <HAL_ADC_Init+0xc6>
 8002658:	e122      	b.n	80028a0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d000      	beq.n	8002662 <HAL_ADC_Init+0xce>
 8002660:	e11e      	b.n	80028a0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	4a99      	ldr	r2, [pc, #612]	; (80028cc <HAL_ADC_Init+0x338>)
 8002668:	4013      	ands	r3, r2
 800266a:	2202      	movs	r2, #2
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff ff46 	bl	8002508 <LL_ADC_IsEnabled>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d000      	beq.n	8002682 <HAL_ADC_Init+0xee>
 8002680:	e0ad      	b.n	80027de <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e1b      	ldrb	r3, [r3, #24]
 800268a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800268c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7e5b      	ldrb	r3, [r3, #25]
 8002692:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002694:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7e9b      	ldrb	r3, [r3, #26]
 800269a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800269c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_ADC_Init+0x118>
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	015b      	lsls	r3, r3, #5
 80026aa:	e000      	b.n	80026ae <HAL_ADC_Init+0x11a>
 80026ac:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026ae:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026b4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da04      	bge.n	80026c8 <HAL_ADC_Init+0x134>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	e001      	b.n	80026cc <HAL_ADC_Init+0x138>
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80026cc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	5c5b      	ldrb	r3, [r3, r1]
 80026d4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026d6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d115      	bne.n	8002714 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7e9b      	ldrb	r3, [r3, #26]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	0252      	lsls	r2, r2, #9
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e00b      	b.n	8002714 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	2220      	movs	r2, #32
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2201      	movs	r2, #1
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002720:	23e0      	movs	r3, #224	; 0xe0
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800272a:	4313      	orrs	r3, r2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_ADC_Init+0x33c>)
 800273a:	4013      	ands	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0f9b      	lsrs	r3, r3, #30
 800274e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002754:	4313      	orrs	r3, r2
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	223c      	movs	r2, #60	; 0x3c
 8002760:	5c9b      	ldrb	r3, [r3, r2]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d111      	bne.n	800278a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0f9b      	lsrs	r3, r3, #30
 800276c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002772:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002778:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800277e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	2201      	movs	r2, #1
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4a50      	ldr	r2, [pc, #320]	; (80028d4 <HAL_ADC_Init+0x340>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	430a      	orrs	r2, r1
 800279e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	23c0      	movs	r3, #192	; 0xc0
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d018      	beq.n	80027de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	05db      	lsls	r3, r3, #23
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d012      	beq.n	80027de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	061b      	lsls	r3, r3, #24
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d00c      	beq.n	80027de <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027c4:	4b44      	ldr	r3, [pc, #272]	; (80028d8 <HAL_ADC_Init+0x344>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_ADC_Init+0x348>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	23f0      	movs	r3, #240	; 0xf0
 80027d4:	039b      	lsls	r3, r3, #14
 80027d6:	401a      	ands	r2, r3
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_ADC_Init+0x344>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	001a      	movs	r2, r3
 80027e8:	2100      	movs	r1, #0
 80027ea:	f7ff fd9c 	bl	8002326 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	493a      	ldr	r1, [pc, #232]	; (80028e0 <HAL_ADC_Init+0x34c>)
 80027f8:	001a      	movs	r2, r3
 80027fa:	f7ff fd94 	bl	8002326 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2110      	movs	r1, #16
 8002812:	4249      	negs	r1, r1
 8002814:	430a      	orrs	r2, r1
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
 8002818:	e018      	b.n	800284c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	039b      	lsls	r3, r3, #14
 8002822:	429a      	cmp	r2, r3
 8002824:	d112      	bne.n	800284c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	3b01      	subs	r3, #1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	221c      	movs	r2, #28
 8002836:	4013      	ands	r3, r2
 8002838:	2210      	movs	r2, #16
 800283a:	4252      	negs	r2, r2
 800283c:	409a      	lsls	r2, r3
 800283e:	0011      	movs	r1, r2
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2100      	movs	r1, #0
 8002852:	0018      	movs	r0, r3
 8002854:	f7ff fd84 	bl	8002360 <LL_ADC_GetSamplingTimeCommonChannels>
 8002858:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800285e:	429a      	cmp	r2, r3
 8002860:	d10b      	bne.n	800287a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	2203      	movs	r2, #3
 800286e:	4393      	bics	r3, r2
 8002870:	2201      	movs	r2, #1
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002878:	e01c      	b.n	80028b4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	2212      	movs	r2, #18
 8002880:	4393      	bics	r3, r2
 8002882:	2210      	movs	r2, #16
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2201      	movs	r2, #1
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002896:	231f      	movs	r3, #31
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800289e:	e009      	b.n	80028b4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	2210      	movs	r2, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028ac:	231f      	movs	r3, #31
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028b4:	231f      	movs	r3, #31
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	781b      	ldrb	r3, [r3, #0]
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b008      	add	sp, #32
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20000000 	.word	0x20000000
 80028c8:	00030d40 	.word	0x00030d40
 80028cc:	fffffefd 	.word	0xfffffefd
 80028d0:	fffe0201 	.word	0xfffe0201
 80028d4:	1ffffc02 	.word	0x1ffffc02
 80028d8:	40012708 	.word	0x40012708
 80028dc:	ffc3ffff 	.word	0xffc3ffff
 80028e0:	07ffff04 	.word	0x07ffff04

080028e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff fe3b 	bl	8002570 <LL_ADC_REG_IsConversionOngoing>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d16c      	bne.n	80029d8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2254      	movs	r2, #84	; 0x54
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADC_Start_DMA+0x28>
 8002908:	2302      	movs	r3, #2
 800290a:	e06c      	b.n	80029e6 <HAL_ADC_Start_DMA+0x102>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2254      	movs	r2, #84	; 0x54
 8002910:	2101      	movs	r1, #1
 8002912:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	4013      	ands	r3, r2
 800291e:	d113      	bne.n	8002948 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff fdef 	bl	8002508 <LL_ADC_IsEnabled>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d004      	beq.n	8002938 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff fdd6 	bl	80024e4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002948:	2517      	movs	r5, #23
 800294a:	197c      	adds	r4, r7, r5
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	0018      	movs	r0, r3
 8002950:	f000 fa46 	bl	8002de0 <ADC_Enable>
 8002954:	0003      	movs	r3, r0
 8002956:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002958:	002c      	movs	r4, r5
 800295a:	193b      	adds	r3, r7, r4
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13e      	bne.n	80029e0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_ADC_Start_DMA+0x10c>)
 8002968:	4013      	ands	r3, r2
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	0052      	lsls	r2, r2, #1
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_ADC_Start_DMA+0x110>)
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_ADC_Start_DMA+0x114>)
 8002988:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_ADC_Start_DMA+0x118>)
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	221c      	movs	r2, #28
 8002998:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2254      	movs	r2, #84	; 0x54
 800299e:	2100      	movs	r1, #0
 80029a0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2110      	movs	r1, #16
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3340      	adds	r3, #64	; 0x40
 80029bc:	0019      	movs	r1, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	193c      	adds	r4, r7, r4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f000 fe0c 	bl	80035e0 <HAL_DMA_Start_IT>
 80029c8:	0003      	movs	r3, r0
 80029ca:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff fdbb 	bl	800254c <LL_ADC_REG_StartConversion>
 80029d6:	e003      	b.n	80029e0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029d8:	2317      	movs	r3, #23
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80029e0:	2317      	movs	r3, #23
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	781b      	ldrb	r3, [r3, #0]
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b006      	add	sp, #24
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	fffff0fe 	.word	0xfffff0fe
 80029f4:	08002fa9 	.word	0x08002fa9
 80029f8:	08003071 	.word	0x08003071
 80029fc:	0800308f 	.word	0x0800308f

08002a00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3a:	2317      	movs	r3, #23
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2254      	movs	r2, #84	; 0x54
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x24>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e1c0      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x3a6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2254      	movs	r2, #84	; 0x54
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff fd85 	bl	8002570 <LL_ADC_REG_IsConversionOngoing>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d000      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x3c>
 8002a6a:	e1a3      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d100      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x46>
 8002a74:	e143      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d004      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a86:	4ac1      	ldr	r2, [pc, #772]	; (8002d8c <HAL_ADC_ConfigChannel+0x35c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d108      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0019      	movs	r1, r3
 8002a96:	0010      	movs	r0, r2
 8002a98:	f7ff fcaa 	bl	80023f0 <LL_ADC_REG_SetSequencerChAdd>
 8002a9c:	e0c9      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	211f      	movs	r1, #31
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	210f      	movs	r1, #15
 8002aac:	4099      	lsls	r1, r3
 8002aae:	000b      	movs	r3, r1
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	035b      	lsls	r3, r3, #13
 8002abc:	0b5b      	lsrs	r3, r3, #13
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x9c>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	221f      	movs	r2, #31
 8002ac8:	4013      	ands	r3, r2
 8002aca:	e098      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d000      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0xa8>
 8002ad6:	e091      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x1cc>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d000      	beq.n	8002ae4 <HAL_ADC_ConfigChannel+0xb4>
 8002ae2:	e089      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x1c8>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4013      	ands	r3, r2
 8002aec:	d000      	beq.n	8002af0 <HAL_ADC_ConfigChannel+0xc0>
 8002aee:	e081      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1c4>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2208      	movs	r2, #8
 8002af6:	4013      	ands	r3, r2
 8002af8:	d000      	beq.n	8002afc <HAL_ADC_ConfigChannel+0xcc>
 8002afa:	e079      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1c0>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2210      	movs	r2, #16
 8002b02:	4013      	ands	r3, r2
 8002b04:	d000      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0xd8>
 8002b06:	e071      	b.n	8002bec <HAL_ADC_ConfigChannel+0x1bc>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d000      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0xe4>
 8002b12:	e069      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x1b8>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d000      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0xf0>
 8002b1e:	e061      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1b4>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	4013      	ands	r3, r2
 8002b28:	d000      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0xfc>
 8002b2a:	e059      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x1b0>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d151      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1ac>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d149      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1a8>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d141      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1a4>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d139      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1a0>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	015b      	lsls	r3, r3, #5
 8002b64:	4013      	ands	r3, r2
 8002b66:	d131      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x19c>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	019b      	lsls	r3, r3, #6
 8002b70:	4013      	ands	r3, r2
 8002b72:	d129      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x198>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d121      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x194>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d119      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x190>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	025b      	lsls	r3, r3, #9
 8002b94:	4013      	ands	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x18c>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	029b      	lsls	r3, r3, #10
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x188>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	02db      	lsls	r3, r3, #11
 8002bac:	4013      	ands	r3, r2
 8002bae:	d001      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x184>
 8002bb0:	2312      	movs	r3, #18
 8002bb2:	e024      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e022      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bb8:	2311      	movs	r3, #17
 8002bba:	e020      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	e01e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bc0:	230f      	movs	r3, #15
 8002bc2:	e01c      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bc4:	230e      	movs	r3, #14
 8002bc6:	e01a      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bc8:	230d      	movs	r3, #13
 8002bca:	e018      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	e016      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bd0:	230b      	movs	r3, #11
 8002bd2:	e014      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	e012      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bd8:	2309      	movs	r3, #9
 8002bda:	e010      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bdc:	2308      	movs	r3, #8
 8002bde:	e00e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002be0:	2307      	movs	r3, #7
 8002be2:	e00c      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002be4:	2306      	movs	r3, #6
 8002be6:	e00a      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002be8:	2305      	movs	r3, #5
 8002bea:	e008      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e006      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e004      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6852      	ldr	r2, [r2, #4]
 8002c02:	201f      	movs	r0, #31
 8002c04:	4002      	ands	r2, r0
 8002c06:	4093      	lsls	r3, r2
 8002c08:	000a      	movs	r2, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d808      	bhi.n	8002c32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	f7ff fbbf 	bl	80023b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	001a      	movs	r2, r3
 8002c40:	f7ff fbfa 	bl	8002438 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db00      	blt.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
 8002c4c:	e0bc      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff fb5b 	bl	800230c <LL_ADC_GetCommonPathInternalCh>
 8002c56:	0003      	movs	r3, r0
 8002c58:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_ADC_ConfigChannel+0x364>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d122      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c6c:	d11d      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	0412      	lsls	r2, r2, #16
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a46      	ldr	r2, [pc, #280]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002c78:	0019      	movs	r1, r3
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	f7ff fb32 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_ADC_ConfigChannel+0x368>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4945      	ldr	r1, [pc, #276]	; (8002d9c <HAL_ADC_ConfigChannel+0x36c>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fd fa3e 	bl	8000108 <__udivsi3>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	0013      	movs	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c9a:	e002      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ca8:	e08e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3c      	ldr	r2, [pc, #240]	; (8002da0 <HAL_ADC_ConfigChannel+0x370>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	045b      	lsls	r3, r3, #17
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d109      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	0452      	lsls	r2, r2, #17
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	4a32      	ldr	r2, [pc, #200]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002cc8:	0019      	movs	r1, r3
 8002cca:	0010      	movs	r0, r2
 8002ccc:	f7ff fb0a 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
 8002cd0:	e07a      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_ADC_ConfigChannel+0x374>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d000      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x2ae>
 8002cdc:	e074      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	03db      	lsls	r3, r3, #15
 8002ce4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ce6:	d000      	beq.n	8002cea <HAL_ADC_ConfigChannel+0x2ba>
 8002ce8:	e06e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	03d2      	lsls	r2, r2, #15
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	0010      	movs	r0, r2
 8002cf8:	f7ff faf4 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
 8002cfc:	e064      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d004      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_ADC_ConfigChannel+0x35c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d107      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	0010      	movs	r0, r2
 8002d20:	f7ff fb77 	bl	8002412 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da4d      	bge.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff faec 	bl	800230c <LL_ADC_GetCommonPathInternalCh>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_ADC_ConfigChannel+0x364>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_ADC_ConfigChannel+0x378>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	f7ff fac9 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
 8002d52:	e039      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_ADC_ConfigChannel+0x370>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_ADC_ConfigChannel+0x37c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002d66:	0019      	movs	r1, r3
 8002d68:	0010      	movs	r0, r2
 8002d6a:	f7ff fabb 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
 8002d6e:	e02b      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_ADC_ConfigChannel+0x374>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d126      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_ADC_ConfigChannel+0x380>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <HAL_ADC_ConfigChannel+0x360>)
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f7ff faad 	bl	80022e4 <LL_ADC_SetCommonPathInternalCh>
 8002d8a:	e01d      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x398>
 8002d8c:	80000004 	.word	0x80000004
 8002d90:	40012708 	.word	0x40012708
 8002d94:	b0001000 	.word	0xb0001000
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	00030d40 	.word	0x00030d40
 8002da0:	b8004000 	.word	0xb8004000
 8002da4:	b4002000 	.word	0xb4002000
 8002da8:	ff7fffff 	.word	0xff7fffff
 8002dac:	feffffff 	.word	0xfeffffff
 8002db0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	2220      	movs	r2, #32
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dc0:	2317      	movs	r3, #23
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2254      	movs	r2, #84	; 0x54
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002dd0:	2317      	movs	r3, #23
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	781b      	ldrb	r3, [r3, #0]
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b006      	add	sp, #24
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)

08002de0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff fb89 	bl	8002508 <LL_ADC_IsEnabled>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d000      	beq.n	8002dfc <ADC_Enable+0x1c>
 8002dfa:	e069      	b.n	8002ed0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a36      	ldr	r2, [pc, #216]	; (8002edc <ADC_Enable+0xfc>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	d00d      	beq.n	8002e24 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e056      	b.n	8002ed2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff fb49 	bl	80024c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <ADC_Enable+0x100>)
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fa6b 	bl	800230c <LL_ADC_GetCommonPathInternalCh>
 8002e36:	0002      	movs	r2, r0
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d00f      	beq.n	8002e60 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e40:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <ADC_Enable+0x104>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4928      	ldr	r1, [pc, #160]	; (8002ee8 <ADC_Enable+0x108>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7fd f95e 	bl	8000108 <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002e50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e52:	e002      	b.n	8002e5a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f9      	bne.n	8002e54 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7e5b      	ldrb	r3, [r3, #25]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d033      	beq.n	8002ed0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e68:	f7ff fa32 	bl	80022d0 <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e70:	e027      	b.n	8002ec2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7ff fb46 	bl	8002508 <LL_ADC_IsEnabled>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d104      	bne.n	8002e8a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff fb1b 	bl	80024c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e8a:	f7ff fa21 	bl	80022d0 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d914      	bls.n	8002ec2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d00d      	beq.n	8002ec2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	2210      	movs	r2, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d1d0      	bne.n	8002e72 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	80000017 	.word	0x80000017
 8002ee0:	40012708 	.word	0x40012708
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	00030d40 	.word	0x00030d40

08002eec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fb16 	bl	800252a <LL_ADC_IsDisableOngoing>
 8002efe:	0003      	movs	r3, r0
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff fafe 	bl	8002508 <LL_ADC_IsEnabled>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d046      	beq.n	8002f9e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d143      	bne.n	8002f9e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10d      	bne.n	8002f40 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff fadb 	bl	80024e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2203      	movs	r2, #3
 8002f34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f36:	f7ff f9cb 	bl	80022d0 <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3e:	e028      	b.n	8002f92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	2210      	movs	r2, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	2201      	movs	r2, #1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e021      	b.n	8002fa0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f5c:	f7ff f9b8 	bl	80022d0 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d913      	bls.n	8002f92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	2201      	movs	r2, #1
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e006      	b.n	8002fa0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d1de      	bne.n	8002f5c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	2250      	movs	r2, #80	; 0x50
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d141      	bne.n	8003044 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7ff f9db 	bl	800238e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d02e      	beq.n	800303a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	7e9b      	ldrb	r3, [r3, #26]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d12a      	bne.n	800303a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2208      	movs	r2, #8
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d123      	bne.n	800303a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff faba 	bl	8002570 <LL_ADC_REG_IsConversionOngoing>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d110      	bne.n	8003022 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	210c      	movs	r1, #12
 800300c:	438a      	bics	r2, r1
 800300e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <ADC_DMAConvCplt+0xc4>)
 8003016:	4013      	ands	r3, r2
 8003018:	2201      	movs	r2, #1
 800301a:	431a      	orrs	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	659a      	str	r2, [r3, #88]	; 0x58
 8003020:	e00b      	b.n	800303a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	2220      	movs	r2, #32
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	2201      	movs	r2, #1
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fcdf 	bl	8002a00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003042:	e00f      	b.n	8003064 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	2210      	movs	r2, #16
 800304a:	4013      	ands	r3, r2
 800304c:	d004      	beq.n	8003058 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fce5 	bl	8002a20 <HAL_ADC_ErrorCallback>
}
 8003056:	e005      	b.n	8003064 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	0010      	movs	r0, r2
 8003062:	4798      	blx	r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}
 800306c:	fffffefe 	.word	0xfffffefe

08003070 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff fcc5 	bl	8002a10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b004      	add	sp, #16
 800308c:	bd80      	pop	{r7, pc}

0800308e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2204      	movs	r2, #4
 80030ae:	431a      	orrs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fcb2 	bl	8002a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <LL_ADC_SetCalibrationFactor>:
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	22b4      	movs	r2, #180	; 0xb4
 80030d2:	589b      	ldr	r3, [r3, r2]
 80030d4:	227f      	movs	r2, #127	; 0x7f
 80030d6:	4393      	bics	r3, r2
 80030d8:	001a      	movs	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	21b4      	movs	r1, #180	; 0xb4
 80030e2:	505a      	str	r2, [r3, r1]
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}

080030ec <LL_ADC_GetCalibrationFactor>:
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	22b4      	movs	r2, #180	; 0xb4
 80030f8:	589b      	ldr	r3, [r3, r2]
 80030fa:	227f      	movs	r2, #127	; 0x7f
 80030fc:	4013      	ands	r3, r2
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <LL_ADC_Enable>:
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <LL_ADC_Enable+0x20>)
 8003116:	4013      	ands	r3, r2
 8003118:	2201      	movs	r2, #1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}
 8003128:	7fffffe8 	.word	0x7fffffe8

0800312c <LL_ADC_Disable>:
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <LL_ADC_Disable+0x20>)
 800313a:	4013      	ands	r3, r2
 800313c:	2202      	movs	r2, #2
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}
 800314c:	7fffffe8 	.word	0x7fffffe8

08003150 <LL_ADC_IsEnabled>:
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <LL_ADC_IsEnabled+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_ADC_IsEnabled+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <LL_ADC_StartCalibration>:
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a05      	ldr	r2, [pc, #20]	; (8003198 <LL_ADC_StartCalibration+0x24>)
 8003182:	4013      	ands	r3, r2
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	0612      	lsls	r2, r2, #24
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	7fffffe8 	.word	0x7fffffe8

0800319c <LL_ADC_IsCalibrationOnGoing>:
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	0fdb      	lsrs	r3, r3, #31
 80031aa:	07da      	lsls	r2, r3, #31
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d101      	bne.n	80031b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_ADC_IsCalibrationOnGoing+0x1e>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2254      	movs	r2, #84	; 0x54
 80031d8:	5c9b      	ldrb	r3, [r3, r2]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0ba      	b.n	8003358 <HAL_ADCEx_Calibration_Start+0x194>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2254      	movs	r2, #84	; 0x54
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031ea:	2317      	movs	r3, #23
 80031ec:	18fc      	adds	r4, r7, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fe7b 	bl	8002eec <ADC_Disable>
 80031f6:	0003      	movs	r3, r0
 80031f8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff ffa6 	bl	8003150 <LL_ADC_IsEnabled>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d000      	beq.n	800320a <HAL_ADCEx_Calibration_Start+0x46>
 8003208:	e099      	b.n	800333e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_ADCEx_Calibration_Start+0x19c>)
 8003210:	4013      	ands	r3, r2
 8003212:	2202      	movs	r2, #2
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a50      	ldr	r2, [pc, #320]	; (8003364 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8003232:	400a      	ands	r2, r1
 8003234:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e02d      	b.n	8003298 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff ff97 	bl	8003174 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003246:	e014      	b.n	8003272 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4a46      	ldr	r2, [pc, #280]	; (800336c <HAL_ADCEx_Calibration_Start+0x1a8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d90d      	bls.n	8003272 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	2212      	movs	r2, #18
 800325c:	4393      	bics	r3, r2
 800325e:	2210      	movs	r2, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2254      	movs	r2, #84	; 0x54
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e072      	b.n	8003358 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff ff90 	bl	800319c <LL_ADC_IsCalibrationOnGoing>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d1e3      	bne.n	8003248 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <LL_ADC_GetCalibrationFactor>
 800328a:	0002      	movs	r2, r0
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	189b      	adds	r3, r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b07      	cmp	r3, #7
 800329c:	d9ce      	bls.n	800323c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800329e:	69f9      	ldr	r1, [r7, #28]
 80032a0:	69b8      	ldr	r0, [r7, #24]
 80032a2:	f7fc ff31 	bl	8000108 <__udivsi3>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff ff2a 	bl	8003108 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	0011      	movs	r1, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f7ff ff01 	bl	80030c4 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff30 	bl	800312c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032cc:	f7ff f800 	bl	80022d0 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032d4:	e01b      	b.n	800330e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032d6:	f7fe fffb 	bl	80022d0 <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d914      	bls.n	800330e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <LL_ADC_IsEnabled>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d00d      	beq.n	800330e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	2210      	movs	r2, #16
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2201      	movs	r2, #1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e024      	b.n	8003358 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff ff1c 	bl	8003150 <LL_ADC_IsEnabled>
 8003318:	1e03      	subs	r3, r0, #0
 800331a:	d1dc      	bne.n	80032d6 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	2203      	movs	r2, #3
 8003332:	4393      	bics	r3, r2
 8003334:	2201      	movs	r2, #1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	; 0x58
 800333c:	e005      	b.n	800334a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	2210      	movs	r2, #16
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2254      	movs	r2, #84	; 0x54
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003352:	2317      	movs	r3, #23
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b009      	add	sp, #36	; 0x24
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	fffffefd 	.word	0xfffffefd
 8003364:	00008003 	.word	0x00008003
 8003368:	ffff7ffc 	.word	0xffff7ffc
 800336c:	0002f1ff 	.word	0x0002f1ff

08003370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	0002      	movs	r2, r0
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b7f      	cmp	r3, #127	; 0x7f
 8003382:	d809      	bhi.n	8003398 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	001a      	movs	r2, r3
 800338a:	231f      	movs	r3, #31
 800338c:	401a      	ands	r2, r3
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_EnableIRQ+0x30>)
 8003390:	2101      	movs	r1, #1
 8003392:	4091      	lsls	r1, r2
 8003394:	000a      	movs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	0002      	movs	r2, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b7f      	cmp	r3, #127	; 0x7f
 80033b8:	d828      	bhi.n	800340c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <__NVIC_SetPriority+0xd4>)
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	33c0      	adds	r3, #192	; 0xc0
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	589b      	ldr	r3, [r3, r2]
 80033ca:	1dfa      	adds	r2, r7, #7
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	0011      	movs	r1, r2
 80033d0:	2203      	movs	r2, #3
 80033d2:	400a      	ands	r2, r1
 80033d4:	00d2      	lsls	r2, r2, #3
 80033d6:	21ff      	movs	r1, #255	; 0xff
 80033d8:	4091      	lsls	r1, r2
 80033da:	000a      	movs	r2, r1
 80033dc:	43d2      	mvns	r2, r2
 80033de:	401a      	ands	r2, r3
 80033e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	401a      	ands	r2, r3
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	0018      	movs	r0, r3
 80033f0:	2303      	movs	r3, #3
 80033f2:	4003      	ands	r3, r0
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f8:	481f      	ldr	r0, [pc, #124]	; (8003478 <__NVIC_SetPriority+0xd4>)
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	430a      	orrs	r2, r1
 8003404:	33c0      	adds	r3, #192	; 0xc0
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800340a:	e031      	b.n	8003470 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800340c:	4a1b      	ldr	r2, [pc, #108]	; (800347c <__NVIC_SetPriority+0xd8>)
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	0019      	movs	r1, r3
 8003414:	230f      	movs	r3, #15
 8003416:	400b      	ands	r3, r1
 8003418:	3b08      	subs	r3, #8
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3306      	adds	r3, #6
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	3304      	adds	r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	1dfa      	adds	r2, r7, #7
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	0011      	movs	r1, r2
 800342c:	2203      	movs	r2, #3
 800342e:	400a      	ands	r2, r1
 8003430:	00d2      	lsls	r2, r2, #3
 8003432:	21ff      	movs	r1, #255	; 0xff
 8003434:	4091      	lsls	r1, r2
 8003436:	000a      	movs	r2, r1
 8003438:	43d2      	mvns	r2, r2
 800343a:	401a      	ands	r2, r3
 800343c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	401a      	ands	r2, r3
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	2303      	movs	r3, #3
 800344e:	4003      	ands	r3, r0
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003454:	4809      	ldr	r0, [pc, #36]	; (800347c <__NVIC_SetPriority+0xd8>)
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	001c      	movs	r4, r3
 800345c:	230f      	movs	r3, #15
 800345e:	4023      	ands	r3, r4
 8003460:	3b08      	subs	r3, #8
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	430a      	orrs	r2, r1
 8003466:	3306      	adds	r3, #6
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	18c3      	adds	r3, r0, r3
 800346c:	3304      	adds	r3, #4
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b003      	add	sp, #12
 8003476:	bd90      	pop	{r4, r7, pc}
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	210f      	movs	r1, #15
 800348c:	187b      	adds	r3, r7, r1
 800348e:	1c02      	adds	r2, r0, #0
 8003490:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	187b      	adds	r3, r7, r1
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b25b      	sxtb	r3, r3
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff ff81 	bl	80033a4 <__NVIC_SetPriority>
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b004      	add	sp, #16
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	0002      	movs	r2, r0
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff ff57 	bl	8003370 <__NVIC_EnableIRQ>
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b002      	add	sp, #8
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e077      	b.n	80035ce <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a3d      	ldr	r2, [pc, #244]	; (80035d8 <HAL_DMA_Init+0x10c>)
 80034e4:	4694      	mov	ip, r2
 80034e6:	4463      	add	r3, ip
 80034e8:	2114      	movs	r1, #20
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7fc fe0c 	bl	8000108 <__udivsi3>
 80034f0:	0003      	movs	r3, r0
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2225      	movs	r2, #37	; 0x25
 80034fc:	2102      	movs	r1, #2
 80034fe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4934      	ldr	r1, [pc, #208]	; (80035dc <HAL_DMA_Init+0x110>)
 800350c:	400a      	ands	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 fa23 	bl	8003994 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	01db      	lsls	r3, r3, #7
 8003556:	429a      	cmp	r2, r3
 8003558:	d102      	bne.n	8003560 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	213f      	movs	r1, #63	; 0x3f
 800356a:	400a      	ands	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003576:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d011      	beq.n	80035a4 <HAL_DMA_Init+0xd8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d80d      	bhi.n	80035a4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fa2e 	bl	80039ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	e008      	b.n	80035b6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2225      	movs	r2, #37	; 0x25
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	; 0x24
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	bffdfff8 	.word	0xbffdfff8
 80035dc:	ffff800f 	.word	0xffff800f

080035e0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2317      	movs	r3, #23
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2224      	movs	r2, #36	; 0x24
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_DMA_Start_IT+0x24>
 8003600:	2302      	movs	r3, #2
 8003602:	e06f      	b.n	80036e4 <HAL_DMA_Start_IT+0x104>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2225      	movs	r2, #37	; 0x25
 8003610:	5c9b      	ldrb	r3, [r3, r2]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d157      	bne.n	80036c8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2225      	movs	r2, #37	; 0x25
 800361c:	2102      	movs	r1, #2
 800361e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	438a      	bics	r2, r1
 8003634:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f969 	bl	8003914 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	210e      	movs	r1, #14
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e00f      	b.n	800367c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2104      	movs	r1, #4
 8003668:	438a      	bics	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	210a      	movs	r1, #10
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	025b      	lsls	r3, r3, #9
 8003686:	4013      	ands	r3, r2
 8003688:	d008      	beq.n	800369c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0049      	lsls	r1, r1, #1
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	0049      	lsls	r1, r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e00a      	b.n	80036de <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2224      	movs	r2, #36	; 0x24
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80036d6:	2317      	movs	r3, #23
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80036de:	2317      	movs	r3, #23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b006      	add	sp, #24
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e050      	b.n	80037a0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2225      	movs	r2, #37	; 0x25
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d008      	beq.n	800371c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e041      	b.n	80037a0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	210e      	movs	r1, #14
 8003728:	438a      	bics	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	491c      	ldr	r1, [pc, #112]	; (80037a8 <HAL_DMA_Abort+0xbc>)
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_DMA_Abort+0xc0>)
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	221c      	movs	r2, #28
 8003756:	4013      	ands	r3, r2
 8003758:	2201      	movs	r2, #1
 800375a:	409a      	lsls	r2, r3
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_DMA_Abort+0xc0>)
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800376a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00c      	beq.n	800378e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_DMA_Abort+0xbc>)
 8003780:	400a      	ands	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800378c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2225      	movs	r2, #37	; 0x25
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	2100      	movs	r1, #0
 800379c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	fffffeff 	.word	0xfffffeff
 80037ac:	40020000 	.word	0x40020000

080037b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80037b8:	4b55      	ldr	r3, [pc, #340]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	221c      	movs	r2, #28
 80037cc:	4013      	ands	r3, r2
 80037ce:	2204      	movs	r2, #4
 80037d0:	409a      	lsls	r2, r3
 80037d2:	0013      	movs	r3, r2
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	d027      	beq.n	800382a <HAL_DMA_IRQHandler+0x7a>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2204      	movs	r2, #4
 80037de:	4013      	ands	r3, r2
 80037e0:	d023      	beq.n	800382a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2220      	movs	r2, #32
 80037ea:	4013      	ands	r3, r2
 80037ec:	d107      	bne.n	80037fe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2104      	movs	r1, #4
 80037fa:	438a      	bics	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037fe:	4b44      	ldr	r3, [pc, #272]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	221c      	movs	r2, #28
 8003808:	4013      	ands	r3, r2
 800380a:	2204      	movs	r2, #4
 800380c:	409a      	lsls	r2, r3
 800380e:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b00      	cmp	r3, #0
 800381a:	d100      	bne.n	800381e <HAL_DMA_IRQHandler+0x6e>
 800381c:	e073      	b.n	8003906 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	0010      	movs	r0, r2
 8003826:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003828:	e06d      	b.n	8003906 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	221c      	movs	r2, #28
 8003830:	4013      	ands	r3, r2
 8003832:	2202      	movs	r2, #2
 8003834:	409a      	lsls	r2, r3
 8003836:	0013      	movs	r3, r2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	d02e      	beq.n	800389c <HAL_DMA_IRQHandler+0xec>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2202      	movs	r2, #2
 8003842:	4013      	ands	r3, r2
 8003844:	d02a      	beq.n	800389c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2220      	movs	r2, #32
 800384e:	4013      	ands	r3, r2
 8003850:	d10b      	bne.n	800386a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	210a      	movs	r1, #10
 800385e:	438a      	bics	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2225      	movs	r2, #37	; 0x25
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	221c      	movs	r2, #28
 8003874:	4013      	ands	r3, r2
 8003876:	2202      	movs	r2, #2
 8003878:	409a      	lsls	r2, r3
 800387a:	4b25      	ldr	r3, [pc, #148]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03a      	beq.n	8003906 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	0010      	movs	r0, r2
 8003898:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800389a:	e034      	b.n	8003906 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	221c      	movs	r2, #28
 80038a2:	4013      	ands	r3, r2
 80038a4:	2208      	movs	r2, #8
 80038a6:	409a      	lsls	r2, r3
 80038a8:	0013      	movs	r3, r2
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	d02b      	beq.n	8003908 <HAL_DMA_IRQHandler+0x158>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2208      	movs	r2, #8
 80038b4:	4013      	ands	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	210e      	movs	r1, #14
 80038c4:	438a      	bics	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	221c      	movs	r2, #28
 80038d2:	4013      	ands	r3, r2
 80038d4:	2201      	movs	r2, #1
 80038d6:	409a      	lsls	r2, r3
 80038d8:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_DMA_IRQHandler+0x160>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2225      	movs	r2, #37	; 0x25
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	0010      	movs	r0, r2
 8003904:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46c0      	nop			; (mov r8, r8)
}
 800390a:	46bd      	mov	sp, r7
 800390c:	b004      	add	sp, #16
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40020000 	.word	0x40020000

08003914 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800392a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800393c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <DMA_SetConfig+0x7c>)
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	221c      	movs	r2, #28
 8003948:	4013      	ands	r3, r2
 800394a:	2201      	movs	r2, #1
 800394c:	409a      	lsls	r2, r3
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <DMA_SetConfig+0x7c>)
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b10      	cmp	r3, #16
 8003962:	d108      	bne.n	8003976 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003974:	e007      	b.n	8003986 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	60da      	str	r2, [r3, #12]
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40020000 	.word	0x40020000

08003994 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80039a4:	4694      	mov	ip, r2
 80039a6:	4463      	add	r3, ip
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	001a      	movs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	001a      	movs	r2, r3
 80039b6:	23ff      	movs	r3, #255	; 0xff
 80039b8:	4013      	ands	r3, r2
 80039ba:	3b08      	subs	r3, #8
 80039bc:	2114      	movs	r1, #20
 80039be:	0018      	movs	r0, r3
 80039c0:	f7fc fba2 	bl	8000108 <__udivsi3>
 80039c4:	0003      	movs	r3, r0
 80039c6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80039cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	221f      	movs	r2, #31
 80039d2:	4013      	ands	r3, r2
 80039d4:	2201      	movs	r2, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	10008200 	.word	0x10008200
 80039e8:	40020880 	.word	0x40020880

080039ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	4013      	ands	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a02:	4694      	mov	ip, r2
 8003a04:	4463      	add	r3, ip
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	001a      	movs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	2203      	movs	r2, #3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	1000823f 	.word	0x1000823f
 8003a30:	40020940 	.word	0x40020940

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	e147      	b.n	8003cd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4091      	lsls	r1, r2
 8003a4e:	000a      	movs	r2, r1
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d100      	bne.n	8003a5c <HAL_GPIO_Init+0x28>
 8003a5a:	e138      	b.n	8003cce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2203      	movs	r2, #3
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d005      	beq.n	8003a74 <HAL_GPIO_Init+0x40>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d130      	bne.n	8003ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	409a      	lsls	r2, r3
 8003a82:	0013      	movs	r3, r2
 8003a84:	43da      	mvns	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	409a      	lsls	r2, r3
 8003a96:	0013      	movs	r3, r2
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aaa:	2201      	movs	r2, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	0013      	movs	r3, r2
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	0013      	movs	r3, r2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2203      	movs	r2, #3
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d017      	beq.n	8003b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	409a      	lsls	r2, r3
 8003af0:	0013      	movs	r3, r2
 8003af2:	43da      	mvns	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d123      	bne.n	8003b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	0092      	lsls	r2, r2, #2
 8003b28:	58d3      	ldr	r3, [r2, r3]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2207      	movs	r2, #7
 8003b30:	4013      	ands	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	409a      	lsls	r2, r3
 8003b38:	0013      	movs	r3, r2
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2107      	movs	r1, #7
 8003b4a:	400b      	ands	r3, r1
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	0013      	movs	r3, r2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	6939      	ldr	r1, [r7, #16]
 8003b64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	409a      	lsls	r2, r3
 8003b74:	0013      	movs	r3, r2
 8003b76:	43da      	mvns	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2203      	movs	r2, #3
 8003b84:	401a      	ands	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d100      	bne.n	8003ba8 <HAL_GPIO_Init+0x174>
 8003ba6:	e092      	b.n	8003cce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ba8:	4a50      	ldr	r2, [pc, #320]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3318      	adds	r3, #24
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	589b      	ldr	r3, [r3, r2]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4013      	ands	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	23a0      	movs	r3, #160	; 0xa0
 8003bd0:	05db      	lsls	r3, r3, #23
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d013      	beq.n	8003bfe <HAL_GPIO_Init+0x1ca>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_GPIO_Init+0x2bc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00d      	beq.n	8003bfa <HAL_GPIO_Init+0x1c6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a44      	ldr	r2, [pc, #272]	; (8003cf4 <HAL_GPIO_Init+0x2c0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <HAL_GPIO_Init+0x1c2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <HAL_GPIO_Init+0x2c4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_GPIO_Init+0x1be>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x1cc>
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	e004      	b.n	8003c00 <HAL_GPIO_Init+0x1cc>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e002      	b.n	8003c00 <HAL_GPIO_Init+0x1cc>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_Init+0x1cc>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	2103      	movs	r1, #3
 8003c04:	400a      	ands	r2, r1
 8003c06:	00d2      	lsls	r2, r2, #3
 8003c08:	4093      	lsls	r3, r2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003c10:	4936      	ldr	r1, [pc, #216]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	3318      	adds	r3, #24
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43da      	mvns	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	035b      	lsls	r3, r3, #13
 8003c36:	4013      	ands	r3, r2
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c48:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	039b      	lsls	r3, r3, #14
 8003c60:	4013      	ands	r3, r2
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c6c:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c72:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c74:	2384      	movs	r3, #132	; 0x84
 8003c76:	58d3      	ldr	r3, [r2, r3]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c98:	4914      	ldr	r1, [pc, #80]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003c9a:	2284      	movs	r2, #132	; 0x84
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003ca0:	4a12      	ldr	r2, [pc, #72]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	58d3      	ldr	r3, [r2, r3]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	025b      	lsls	r3, r3, #9
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cc6:	4909      	ldr	r1, [pc, #36]	; (8003cec <HAL_GPIO_Init+0x2b8>)
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	40da      	lsrs	r2, r3
 8003cdc:	1e13      	subs	r3, r2, #0
 8003cde:	d000      	beq.n	8003ce2 <HAL_GPIO_Init+0x2ae>
 8003ce0:	e6b0      	b.n	8003a44 <HAL_GPIO_Init+0x10>
  }
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021800 	.word	0x40021800
 8003cf0:	50000400 	.word	0x50000400
 8003cf4:	50000800 	.word	0x50000800
 8003cf8:	50000c00 	.word	0x50000c00

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	0008      	movs	r0, r1
 8003d06:	0011      	movs	r1, r2
 8003d08:	1cbb      	adds	r3, r7, #2
 8003d0a:	1c02      	adds	r2, r0, #0
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	1c7b      	adds	r3, r7, #1
 8003d10:	1c0a      	adds	r2, r1, #0
 8003d12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d14:	1c7b      	adds	r3, r7, #1
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1c:	1cbb      	adds	r3, r7, #2
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d26:	1cbb      	adds	r3, r7, #2
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	0002      	movs	r2, r0
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	1dba      	adds	r2, r7, #6
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d008      	beq.n	8003d62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d52:	1dba      	adds	r2, r7, #6
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d58:	1dbb      	adds	r3, r7, #6
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f005 fcb1 	bl	80096c4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	1dba      	adds	r2, r7, #6
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d008      	beq.n	8003d80 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d70:	1dba      	adds	r2, r7, #6
 8003d72:	8812      	ldrh	r2, [r2, #0]
 8003d74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d76:	1dbb      	adds	r3, r7, #6
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f005 fcd2 	bl	8009724 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021800 	.word	0x40021800

08003d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d11f      	bne.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	0013      	movs	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4912      	ldr	r1, [pc, #72]	; (8003e08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fc f9a2 	bl	8000108 <__udivsi3>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dca:	e008      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e001      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e009      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	401a      	ands	r2, r3
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0ed      	beq.n	8003dcc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	fffff9ff 	.word	0xfffff9ff
 8003e04:	20000000 	.word	0x20000000
 8003e08:	000f4240 	.word	0x000f4240

08003e0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	23e0      	movs	r3, #224	; 0xe0
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	4013      	ands	r3, r2
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e2f3      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <HAL_RCC_OscConfig+0x1e>
 8003e40:	e07c      	b.n	8003f3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4bc3      	ldr	r3, [pc, #780]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2238      	movs	r2, #56	; 0x38
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	4bc0      	ldr	r3, [pc, #768]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2203      	movs	r2, #3
 8003e52:	4013      	ands	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3e>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d002      	beq.n	8003e68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d10b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4bb9      	ldr	r3, [pc, #740]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	4013      	ands	r3, r2
 8003e72:	d062      	beq.n	8003f3a <HAL_RCC_OscConfig+0x116>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d15e      	bne.n	8003f3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e2ce      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	025b      	lsls	r3, r3, #9
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x78>
 8003e8c:	4bb0      	ldr	r3, [pc, #704]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4baf      	ldr	r3, [pc, #700]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	2180      	movs	r1, #128	; 0x80
 8003e94:	0249      	lsls	r1, r1, #9
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e020      	b.n	8003ede <HAL_RCC_OscConfig+0xba>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	23a0      	movs	r3, #160	; 0xa0
 8003ea2:	02db      	lsls	r3, r3, #11
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RCC_OscConfig+0xa2>
 8003ea8:	4ba9      	ldr	r3, [pc, #676]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4ba8      	ldr	r3, [pc, #672]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	02c9      	lsls	r1, r1, #11
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	4ba6      	ldr	r3, [pc, #664]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4ba5      	ldr	r3, [pc, #660]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	0249      	lsls	r1, r1, #9
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e00b      	b.n	8003ede <HAL_RCC_OscConfig+0xba>
 8003ec6:	4ba2      	ldr	r3, [pc, #648]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4ba1      	ldr	r3, [pc, #644]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ecc:	49a1      	ldr	r1, [pc, #644]	; (8004154 <HAL_RCC_OscConfig+0x330>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	4b9f      	ldr	r3, [pc, #636]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b9e      	ldr	r3, [pc, #632]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	499f      	ldr	r1, [pc, #636]	; (8004158 <HAL_RCC_OscConfig+0x334>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d014      	beq.n	8003f10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fe f9f3 	bl	80022d0 <HAL_GetTick>
 8003eea:	0003      	movs	r3, r0
 8003eec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe f9ee 	bl	80022d0 <HAL_GetTick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e28d      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f02:	4b93      	ldr	r3, [pc, #588]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xcc>
 8003f0e:	e015      	b.n	8003f3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe f9de 	bl	80022d0 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1a:	f7fe f9d9 	bl	80022d0 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e278      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f2c:	4b88      	ldr	r3, [pc, #544]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	029b      	lsls	r3, r3, #10
 8003f34:	4013      	ands	r3, r2
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0xf6>
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	d100      	bne.n	8003f48 <HAL_RCC_OscConfig+0x124>
 8003f46:	e099      	b.n	800407c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f48:	4b81      	ldr	r3, [pc, #516]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2238      	movs	r2, #56	; 0x38
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f52:	4b7f      	ldr	r3, [pc, #508]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2203      	movs	r2, #3
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d102      	bne.n	8003f68 <HAL_RCC_OscConfig+0x144>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d002      	beq.n	8003f6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d135      	bne.n	8003fda <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6e:	4b78      	ldr	r3, [pc, #480]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4013      	ands	r3, r2
 8003f78:	d005      	beq.n	8003f86 <HAL_RCC_OscConfig+0x162>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e24b      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	4b72      	ldr	r3, [pc, #456]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a74      	ldr	r2, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0x338>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	021a      	lsls	r2, r3, #8
 8003f96:	4b6e      	ldr	r3, [pc, #440]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d112      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fa2:	4b6b      	ldr	r3, [pc, #428]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_RCC_OscConfig+0x33c>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	4b67      	ldr	r3, [pc, #412]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003fb6:	4b66      	ldr	r3, [pc, #408]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0adb      	lsrs	r3, r3, #11
 8003fbc:	2207      	movs	r2, #7
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_RCC_OscConfig+0x340>)
 8003fc2:	40da      	lsrs	r2, r3
 8003fc4:	4b68      	ldr	r3, [pc, #416]	; (8004168 <HAL_RCC_OscConfig+0x344>)
 8003fc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_OscConfig+0x348>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fd ff37 	bl	8001e40 <HAL_InitTick>
 8003fd2:	1e03      	subs	r3, r0, #0
 8003fd4:	d051      	beq.n	800407a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e221      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d030      	beq.n	8004044 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fe2:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5e      	ldr	r2, [pc, #376]	; (8004160 <HAL_RCC_OscConfig+0x33c>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	4b57      	ldr	r3, [pc, #348]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ff6:	4b56      	ldr	r3, [pc, #344]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b55      	ldr	r3, [pc, #340]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	0049      	lsls	r1, r1, #1
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe f964 	bl	80022d0 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400e:	f7fe f95f 	bl	80022d0 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1fe      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004020:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4013      	ands	r3, r2
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402c:	4b48      	ldr	r3, [pc, #288]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a4a      	ldr	r2, [pc, #296]	; (800415c <HAL_RCC_OscConfig+0x338>)
 8004032:	4013      	ands	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	021a      	lsls	r2, r3, #8
 800403c:	4b44      	ldr	r3, [pc, #272]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	e01b      	b.n	800407c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004044:	4b42      	ldr	r3, [pc, #264]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 800404a:	4949      	ldr	r1, [pc, #292]	; (8004170 <HAL_RCC_OscConfig+0x34c>)
 800404c:	400a      	ands	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe f93e 	bl	80022d0 <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405a:	f7fe f939 	bl	80022d0 <HAL_GetTick>
 800405e:	0002      	movs	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1d8      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800406c:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4013      	ands	r3, r2
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x236>
 8004078:	e000      	b.n	800407c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800407a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2208      	movs	r2, #8
 8004082:	4013      	ands	r3, r2
 8004084:	d047      	beq.n	8004116 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004086:	4b32      	ldr	r3, [pc, #200]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2238      	movs	r2, #56	; 0x38
 800408c:	4013      	ands	r3, r2
 800408e:	2b18      	cmp	r3, #24
 8004090:	d10a      	bne.n	80040a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004092:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	2202      	movs	r2, #2
 8004098:	4013      	ands	r3, r2
 800409a:	d03c      	beq.n	8004116 <HAL_RCC_OscConfig+0x2f2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d138      	bne.n	8004116 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e1ba      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d019      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040b4:	4b26      	ldr	r3, [pc, #152]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe f908 	bl	80022d0 <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe f903 	bl	80022d0 <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1a2      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d0f1      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2a2>
 80040e2:	e018      	b.n	8004116 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 80040e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe f8ee 	bl	80022d0 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fa:	f7fe f8e9 	bl	80022d0 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e188      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	2202      	movs	r2, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d1f1      	bne.n	80040fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2204      	movs	r2, #4
 800411c:	4013      	ands	r3, r2
 800411e:	d100      	bne.n	8004122 <HAL_RCC_OscConfig+0x2fe>
 8004120:	e0c6      	b.n	80042b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004122:	231f      	movs	r3, #31
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2238      	movs	r2, #56	; 0x38
 8004130:	4013      	ands	r3, r2
 8004132:	2b20      	cmp	r3, #32
 8004134:	d11e      	bne.n	8004174 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_OscConfig+0x32c>)
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d100      	bne.n	8004142 <HAL_RCC_OscConfig+0x31e>
 8004140:	e0b6      	b.n	80042b0 <HAL_RCC_OscConfig+0x48c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <HAL_RCC_OscConfig+0x328>
 800414a:	e0b1      	b.n	80042b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e166      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
 8004150:	40021000 	.word	0x40021000
 8004154:	fffeffff 	.word	0xfffeffff
 8004158:	fffbffff 	.word	0xfffbffff
 800415c:	ffff80ff 	.word	0xffff80ff
 8004160:	ffffc7ff 	.word	0xffffc7ff
 8004164:	00f42400 	.word	0x00f42400
 8004168:	20000000 	.word	0x20000000
 800416c:	20000004 	.word	0x20000004
 8004170:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004174:	4bac      	ldr	r3, [pc, #688]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	055b      	lsls	r3, r3, #21
 800417c:	4013      	ands	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x360>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x362>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4ba7      	ldr	r3, [pc, #668]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800418c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418e:	4ba6      	ldr	r3, [pc, #664]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0549      	lsls	r1, r1, #21
 8004194:	430a      	orrs	r2, r1
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c
 8004198:	4ba3      	ldr	r3, [pc, #652]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800419a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041a6:	231f      	movs	r3, #31
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ae:	4b9f      	ldr	r3, [pc, #636]	; (800442c <HAL_RCC_OscConfig+0x608>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d11a      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ba:	4b9c      	ldr	r3, [pc, #624]	; (800442c <HAL_RCC_OscConfig+0x608>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b9b      	ldr	r3, [pc, #620]	; (800442c <HAL_RCC_OscConfig+0x608>)
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	0049      	lsls	r1, r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041c8:	f7fe f882 	bl	80022d0 <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fe f87d 	bl	80022d0 <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e11c      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e4:	4b91      	ldr	r3, [pc, #580]	; (800442c <HAL_RCC_OscConfig+0x608>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x3e2>
 80041f8:	4b8b      	ldr	r3, [pc, #556]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80041fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041fc:	4b8a      	ldr	r3, [pc, #552]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80041fe:	2101      	movs	r1, #1
 8004200:	430a      	orrs	r2, r1
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c
 8004204:	e01c      	b.n	8004240 <HAL_RCC_OscConfig+0x41c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x404>
 800420e:	4b86      	ldr	r3, [pc, #536]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004214:	2104      	movs	r1, #4
 8004216:	430a      	orrs	r2, r1
 8004218:	65da      	str	r2, [r3, #92]	; 0x5c
 800421a:	4b83      	ldr	r3, [pc, #524]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800421c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800421e:	4b82      	ldr	r3, [pc, #520]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004220:	2101      	movs	r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	65da      	str	r2, [r3, #92]	; 0x5c
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x41c>
 8004228:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800422a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800422c:	4b7e      	ldr	r3, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800422e:	2101      	movs	r1, #1
 8004230:	438a      	bics	r2, r1
 8004232:	65da      	str	r2, [r3, #92]	; 0x5c
 8004234:	4b7c      	ldr	r3, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004236:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004238:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800423a:	2104      	movs	r1, #4
 800423c:	438a      	bics	r2, r1
 800423e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d014      	beq.n	8004272 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fe f842 	bl	80022d0 <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	e009      	b.n	8004266 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe f83d 	bl	80022d0 <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	4a74      	ldr	r2, [pc, #464]	; (8004430 <HAL_RCC_OscConfig+0x60c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0db      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	2202      	movs	r2, #2
 800426c:	4013      	ands	r3, r2
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x42e>
 8004270:	e013      	b.n	800429a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fe f82d 	bl	80022d0 <HAL_GetTick>
 8004276:	0003      	movs	r3, r0
 8004278:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800427a:	e009      	b.n	8004290 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe f828 	bl	80022d0 <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	4a6a      	ldr	r2, [pc, #424]	; (8004430 <HAL_RCC_OscConfig+0x60c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0c6      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004290:	4b65      	ldr	r3, [pc, #404]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	2202      	movs	r2, #2
 8004296:	4013      	ands	r3, r2
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800429a:	231f      	movs	r3, #31
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042a4:	4b60      	ldr	r3, [pc, #384]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80042a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a8:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80042aa:	4962      	ldr	r1, [pc, #392]	; (8004434 <HAL_RCC_OscConfig+0x610>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d100      	bne.n	80042ba <HAL_RCC_OscConfig+0x496>
 80042b8:	e0b0      	b.n	800441c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2238      	movs	r2, #56	; 0x38
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d100      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4a4>
 80042c6:	e078      	b.n	80043ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d153      	bne.n	8004378 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d0:	4b55      	ldr	r3, [pc, #340]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b54      	ldr	r3, [pc, #336]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80042d6:	4958      	ldr	r1, [pc, #352]	; (8004438 <HAL_RCC_OscConfig+0x614>)
 80042d8:	400a      	ands	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fff8 	bl	80022d0 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fd fff3 	bl	80022d0 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e092      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f8:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	049b      	lsls	r3, r3, #18
 8004300:	4013      	ands	r3, r2
 8004302:	d1f0      	bne.n	80042e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a4c      	ldr	r2, [pc, #304]	; (800443c <HAL_RCC_OscConfig+0x618>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	431a      	orrs	r2, r3
 800432c:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800432e:	430a      	orrs	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b3c      	ldr	r3, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	0449      	lsls	r1, r1, #17
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b38      	ldr	r3, [pc, #224]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	0549      	lsls	r1, r1, #21
 800434a:	430a      	orrs	r2, r1
 800434c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd ffbf 	bl	80022d0 <HAL_GetTick>
 8004352:	0003      	movs	r3, r0
 8004354:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd ffba 	bl	80022d0 <HAL_GetTick>
 800435c:	0002      	movs	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e059      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	049b      	lsls	r3, r3, #18
 8004372:	4013      	ands	r3, r2
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x534>
 8004376:	e051      	b.n	800441c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 800437e:	492e      	ldr	r1, [pc, #184]	; (8004438 <HAL_RCC_OscConfig+0x614>)
 8004380:	400a      	ands	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd ffa4 	bl	80022d0 <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438e:	f7fd ff9f 	bl	80022d0 <HAL_GetTick>
 8004392:	0002      	movs	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e03e      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	049b      	lsls	r3, r3, #18
 80043a8:	4013      	ands	r3, r2
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80043b2:	4923      	ldr	r1, [pc, #140]	; (8004440 <HAL_RCC_OscConfig+0x61c>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	e030      	b.n	800441c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e02b      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_RCC_OscConfig+0x604>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2203      	movs	r2, #3
 80043d0:	401a      	ands	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d11e      	bne.n	8004418 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2270      	movs	r2, #112	; 0x70
 80043de:	401a      	ands	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d117      	bne.n	8004418 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	23fe      	movs	r3, #254	; 0xfe
 80043ec:	01db      	lsls	r3, r3, #7
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d10e      	bne.n	8004418 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	23f8      	movs	r3, #248	; 0xf8
 80043fe:	039b      	lsls	r3, r3, #14
 8004400:	401a      	ands	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	0f5b      	lsrs	r3, r3, #29
 800440e:	075a      	lsls	r2, r3, #29
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b008      	add	sp, #32
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
 8004430:	00001388 	.word	0x00001388
 8004434:	efffffff 	.word	0xefffffff
 8004438:	feffffff 	.word	0xfeffffff
 800443c:	1fc1808c 	.word	0x1fc1808c
 8004440:	effefffc 	.word	0xeffefffc

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0e9      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2207      	movs	r2, #7
 800445e:	4013      	ands	r3, r2
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d91e      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2207      	movs	r2, #7
 800446c:	4393      	bics	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004478:	f7fd ff2a 	bl	80022d0 <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004480:	e009      	b.n	8004496 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004482:	f7fd ff25 	bl	80022d0 <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	4a6a      	ldr	r2, [pc, #424]	; (8004638 <HAL_RCC_ClockConfig+0x1f4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0ca      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004496:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2207      	movs	r2, #7
 800449c:	4013      	ands	r3, r2
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1ee      	bne.n	8004482 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2202      	movs	r2, #2
 80044aa:	4013      	ands	r3, r2
 80044ac:	d015      	beq.n	80044da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2204      	movs	r2, #4
 80044b4:	4013      	ands	r3, r2
 80044b6:	d006      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044b8:	4b60      	ldr	r3, [pc, #384]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	4b5f      	ldr	r3, [pc, #380]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80044be:	21e0      	movs	r1, #224	; 0xe0
 80044c0:	01c9      	lsls	r1, r1, #7
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c6:	4b5d      	ldr	r3, [pc, #372]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4a5d      	ldr	r2, [pc, #372]	; (8004640 <HAL_RCC_ClockConfig+0x1fc>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	d057      	beq.n	8004594 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ec:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	4013      	ands	r3, r2
 80044f6:	d12b      	bne.n	8004550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e097      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d107      	bne.n	8004514 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	049b      	lsls	r3, r3, #18
 800450c:	4013      	ands	r3, r2
 800450e:	d11f      	bne.n	8004550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e08b      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4013      	ands	r3, r2
 8004526:	d113      	bne.n	8004550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e07f      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d106      	bne.n	8004542 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004538:	2202      	movs	r2, #2
 800453a:	4013      	ands	r3, r2
 800453c:	d108      	bne.n	8004550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e074      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	2202      	movs	r2, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e06d      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004550:	4b3a      	ldr	r3, [pc, #232]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2207      	movs	r2, #7
 8004556:	4393      	bics	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004560:	430a      	orrs	r2, r1
 8004562:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fd feb4 	bl	80022d0 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456c:	e009      	b.n	8004582 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456e:	f7fd feaf 	bl	80022d0 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <HAL_RCC_ClockConfig+0x1f4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e054      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2e      	ldr	r3, [pc, #184]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2238      	movs	r2, #56	; 0x38
 8004588:	401a      	ands	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	429a      	cmp	r2, r3
 8004592:	d1ec      	bne.n	800456e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2207      	movs	r2, #7
 800459a:	4013      	ands	r3, r2
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d21e      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2207      	movs	r2, #7
 80045a8:	4393      	bics	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045b4:	f7fd fe8c 	bl	80022d0 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045bc:	e009      	b.n	80045d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045be:	f7fd fe87 	bl	80022d0 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_RCC_ClockConfig+0x1f4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e02c      	b.n	800462c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2207      	movs	r2, #7
 80045d8:	4013      	ands	r3, r2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2204      	movs	r2, #4
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_RCC_ClockConfig+0x200>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045fe:	f000 f829 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004602:	0001      	movs	r1, r0
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_RCC_ClockConfig+0x1f8>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	220f      	movs	r2, #15
 800460c:	401a      	ands	r2, r3
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <HAL_RCC_ClockConfig+0x204>)
 8004610:	0092      	lsls	r2, r2, #2
 8004612:	58d3      	ldr	r3, [r2, r3]
 8004614:	221f      	movs	r2, #31
 8004616:	4013      	ands	r3, r2
 8004618:	000a      	movs	r2, r1
 800461a:	40da      	lsrs	r2, r3
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_ClockConfig+0x208>)
 800461e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_ClockConfig+0x20c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0018      	movs	r0, r3
 8004626:	f7fd fc0b 	bl	8001e40 <HAL_InitTick>
 800462a:	0003      	movs	r3, r0
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b004      	add	sp, #16
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40022000 	.word	0x40022000
 8004638:	00001388 	.word	0x00001388
 800463c:	40021000 	.word	0x40021000
 8004640:	fffff0ff 	.word	0xfffff0ff
 8004644:	ffff8fff 	.word	0xffff8fff
 8004648:	08009af4 	.word	0x08009af4
 800464c:	20000000 	.word	0x20000000
 8004650:	20000004 	.word	0x20000004

08004654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800465a:	4b3c      	ldr	r3, [pc, #240]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2238      	movs	r2, #56	; 0x38
 8004660:	4013      	ands	r3, r2
 8004662:	d10f      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0adb      	lsrs	r3, r3, #11
 800466a:	2207      	movs	r2, #7
 800466c:	4013      	ands	r3, r2
 800466e:	2201      	movs	r2, #1
 8004670:	409a      	lsls	r2, r3
 8004672:	0013      	movs	r3, r2
 8004674:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	4835      	ldr	r0, [pc, #212]	; (8004750 <HAL_RCC_GetSysClockFreq+0xfc>)
 800467a:	f7fb fd45 	bl	8000108 <__udivsi3>
 800467e:	0003      	movs	r3, r0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e05d      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2238      	movs	r2, #56	; 0x38
 800468a:	4013      	ands	r3, r2
 800468c:	2b08      	cmp	r3, #8
 800468e:	d102      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004690:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_RCC_GetSysClockFreq+0x100>)
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e054      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004696:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2238      	movs	r2, #56	; 0x38
 800469c:	4013      	ands	r3, r2
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d138      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80046a2:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2203      	movs	r2, #3
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	2207      	movs	r2, #7
 80046b4:	4013      	ands	r3, r2
 80046b6:	3301      	adds	r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d10d      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4824      	ldr	r0, [pc, #144]	; (8004754 <HAL_RCC_GetSysClockFreq+0x100>)
 80046c4:	f7fb fd20 	bl	8000108 <__udivsi3>
 80046c8:	0003      	movs	r3, r0
 80046ca:	0019      	movs	r1, r3
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	227f      	movs	r2, #127	; 0x7f
 80046d4:	4013      	ands	r3, r2
 80046d6:	434b      	muls	r3, r1
 80046d8:	617b      	str	r3, [r7, #20]
        break;
 80046da:	e00d      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	481c      	ldr	r0, [pc, #112]	; (8004750 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046e0:	f7fb fd12 	bl	8000108 <__udivsi3>
 80046e4:	0003      	movs	r3, r0
 80046e6:	0019      	movs	r1, r3
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	227f      	movs	r2, #127	; 0x7f
 80046f0:	4013      	ands	r3, r2
 80046f2:	434b      	muls	r3, r1
 80046f4:	617b      	str	r3, [r7, #20]
        break;
 80046f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0f5b      	lsrs	r3, r3, #29
 80046fe:	2207      	movs	r2, #7
 8004700:	4013      	ands	r3, r2
 8004702:	3301      	adds	r3, #1
 8004704:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	f7fb fcfd 	bl	8000108 <__udivsi3>
 800470e:	0003      	movs	r3, r0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e015      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2238      	movs	r2, #56	; 0x38
 800471a:	4013      	ands	r3, r2
 800471c:	2b20      	cmp	r3, #32
 800471e:	d103      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e00b      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_RCC_GetSysClockFreq+0xf8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2238      	movs	r2, #56	; 0x38
 800472e:	4013      	ands	r3, r2
 8004730:	2b18      	cmp	r3, #24
 8004732:	d103      	bne.n	800473c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004734:	23fa      	movs	r3, #250	; 0xfa
 8004736:	01db      	lsls	r3, r3, #7
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e001      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004740:	693b      	ldr	r3, [r7, #16]
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b006      	add	sp, #24
 8004748:	bd80      	pop	{r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	40021000 	.word	0x40021000
 8004750:	00f42400 	.word	0x00f42400
 8004754:	007a1200 	.word	0x007a1200

08004758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800475c:	4b02      	ldr	r3, [pc, #8]	; (8004768 <HAL_RCC_GetHCLKFreq+0x10>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000000 	.word	0x20000000

0800476c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004770:	f7ff fff2 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 8004774:	0004      	movs	r4, r0
 8004776:	f7ff fb49 	bl	8003e0c <LL_RCC_GetAPB1Prescaler>
 800477a:	0003      	movs	r3, r0
 800477c:	0b1a      	lsrs	r2, r3, #12
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004780:	0092      	lsls	r2, r2, #2
 8004782:	58d3      	ldr	r3, [r2, r3]
 8004784:	221f      	movs	r2, #31
 8004786:	4013      	ands	r3, r2
 8004788:	40dc      	lsrs	r4, r3
 800478a:	0023      	movs	r3, r4
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	bdb0      	pop	{r4, r5, r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	08009b34 	.word	0x08009b34

08004798 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2207      	movs	r2, #7
 80047a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <HAL_RCC_GetClockConfig+0x4c>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2207      	movs	r2, #7
 80047ae:	401a      	ands	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_GetClockConfig+0x4c>)
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	23f0      	movs	r3, #240	; 0xf0
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	401a      	ands	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <HAL_RCC_GetClockConfig+0x4c>)
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	23e0      	movs	r3, #224	; 0xe0
 80047c8:	01db      	lsls	r3, r3, #7
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetClockConfig+0x50>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2207      	movs	r2, #7
 80047d6:	401a      	ands	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40022000 	.word	0x40022000

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80047f4:	2313      	movs	r3, #19
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047fc:	2312      	movs	r3, #18
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	029b      	lsls	r3, r3, #10
 800480c:	4013      	ands	r3, r2
 800480e:	d100      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004810:	e0a3      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004812:	2011      	movs	r0, #17
 8004814:	183b      	adds	r3, r7, r0
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481a:	4b86      	ldr	r3, [pc, #536]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800481c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	055b      	lsls	r3, r3, #21
 8004822:	4013      	ands	r3, r2
 8004824:	d110      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	4b83      	ldr	r3, [pc, #524]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482a:	4b82      	ldr	r3, [pc, #520]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	0549      	lsls	r1, r1, #21
 8004830:	430a      	orrs	r2, r1
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
 8004834:	4b7f      	ldr	r3, [pc, #508]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	055b      	lsls	r3, r3, #21
 800483c:	4013      	ands	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	183b      	adds	r3, r7, r0
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004848:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b7a      	ldr	r3, [pc, #488]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	0049      	lsls	r1, r1, #1
 8004852:	430a      	orrs	r2, r1
 8004854:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004856:	f7fd fd3b 	bl	80022d0 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485e:	e00b      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004860:	f7fd fd36 	bl	80022d0 <HAL_GetTick>
 8004864:	0002      	movs	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d904      	bls.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800486e:	2313      	movs	r3, #19
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2203      	movs	r2, #3
 8004874:	701a      	strb	r2, [r3, #0]
        break;
 8004876:	e005      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004878:	4b6f      	ldr	r3, [pc, #444]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4013      	ands	r3, r2
 8004882:	d0ed      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004884:	2313      	movs	r3, #19
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d154      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800488e:	4b69      	ldr	r3, [pc, #420]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004892:	23c0      	movs	r3, #192	; 0xc0
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4013      	ands	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d019      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d014      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048aa:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	4a63      	ldr	r2, [pc, #396]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b4:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048b8:	4b5e      	ldr	r3, [pc, #376]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	0249      	lsls	r1, r1, #9
 80048be:	430a      	orrs	r2, r1
 80048c0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c2:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c6:	4b5b      	ldr	r3, [pc, #364]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048c8:	495d      	ldr	r1, [pc, #372]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80048ca:	400a      	ands	r2, r1
 80048cc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ce:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	d016      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fcf8 	bl	80022d0 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e4:	e00c      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fd fcf3 	bl	80022d0 <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	4a54      	ldr	r2, [pc, #336]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d904      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80048f6:	2313      	movs	r3, #19
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	2203      	movs	r2, #3
 80048fc:	701a      	strb	r2, [r3, #0]
            break;
 80048fe:	e004      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004900:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	2202      	movs	r2, #2
 8004906:	4013      	ands	r3, r2
 8004908:	d0ed      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800490a:	2313      	movs	r3, #19
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004914:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	4a48      	ldr	r2, [pc, #288]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004924:	430a      	orrs	r2, r1
 8004926:	65da      	str	r2, [r3, #92]	; 0x5c
 8004928:	e00c      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800492a:	2312      	movs	r3, #18
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	2213      	movs	r2, #19
 8004930:	18ba      	adds	r2, r7, r2
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e005      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	2312      	movs	r3, #18
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	2213      	movs	r2, #19
 800493e:	18ba      	adds	r2, r7, r2
 8004940:	7812      	ldrb	r2, [r2, #0]
 8004942:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004944:	2311      	movs	r3, #17
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004952:	4b38      	ldr	r3, [pc, #224]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004954:	493c      	ldr	r1, [pc, #240]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004956:	400a      	ands	r2, r1
 8004958:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	4013      	ands	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004964:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	2203      	movs	r2, #3
 800496a:	4393      	bics	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004974:	430a      	orrs	r2, r1
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2202      	movs	r2, #2
 800497e:	4013      	ands	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	220c      	movs	r2, #12
 8004988:	4393      	bics	r3, r2
 800498a:	0019      	movs	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004992:	430a      	orrs	r2, r1
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2220      	movs	r2, #32
 800499c:	4013      	ands	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049b0:	430a      	orrs	r2, r1
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4013      	ands	r3, r2
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	0899      	lsrs	r1, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049ce:	430a      	orrs	r2, r1
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	05db      	lsls	r3, r3, #23
 80049da:	429a      	cmp	r2, r3
 80049dc:	d106      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049de:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	0249      	lsls	r1, r1, #9
 80049e8:	430a      	orrs	r2, r1
 80049ea:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4013      	ands	r3, r2
 80049f6:	d016      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	01db      	lsls	r3, r3, #7
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d106      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	0249      	lsls	r1, r1, #9
 8004a22:	430a      	orrs	r2, r1
 8004a24:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004a26:	2312      	movs	r3, #18
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	781b      	ldrb	r3, [r3, #0]
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b006      	add	sp, #24
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40007000 	.word	0x40007000
 8004a3c:	fffffcff 	.word	0xfffffcff
 8004a40:	fffeffff 	.word	0xfffeffff
 8004a44:	00001388 	.word	0x00001388
 8004a48:	efffffff 	.word	0xefffffff
 8004a4c:	ffffcfff 	.word	0xffffcfff
 8004a50:	ffff3fff 	.word	0xffff3fff

08004a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0a8      	b.n	8004bb8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	2382      	movs	r3, #130	; 0x82
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d009      	beq.n	8004a8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	61da      	str	r2, [r3, #28]
 8004a80:	e005      	b.n	8004a8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	225d      	movs	r2, #93	; 0x5d
 8004a98:	5c9b      	ldrb	r3, [r3, r2]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	225c      	movs	r2, #92	; 0x5c
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7fd f8d2 	bl	8001c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	225d      	movs	r2, #93	; 0x5d
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2140      	movs	r1, #64	; 0x40
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	23e0      	movs	r3, #224	; 0xe0
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d902      	bls.n	8004ada <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e002      	b.n	8004ae0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	015b      	lsls	r3, r3, #5
 8004ade:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	23f0      	movs	r3, #240	; 0xf0
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d008      	beq.n	8004afe <HAL_SPI_Init+0xaa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	23e0      	movs	r3, #224	; 0xe0
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	2382      	movs	r3, #130	; 0x82
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	401a      	ands	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	2384      	movs	r3, #132	; 0x84
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	400b      	ands	r3, r1
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2102      	movs	r1, #2
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2101      	movs	r1, #1
 8004b24:	400b      	ands	r3, r1
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6999      	ldr	r1, [r3, #24]
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	400b      	ands	r3, r1
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	2138      	movs	r1, #56	; 0x38
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	400b      	ands	r3, r1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	0011      	movs	r1, r2
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	019b      	lsls	r3, r3, #6
 8004b52:	401a      	ands	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	2204      	movs	r2, #4
 8004b64:	401a      	ands	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	2108      	movs	r1, #8
 8004b76:	400b      	ands	r3, r1
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68d9      	ldr	r1, [r3, #12]
 8004b7e:	23f0      	movs	r3, #240	; 0xf0
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	400b      	ands	r3, r1
 8004b84:	431a      	orrs	r2, r3
 8004b86:	0011      	movs	r1, r2
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	015b      	lsls	r3, r3, #5
 8004b8e:	401a      	ands	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4907      	ldr	r1, [pc, #28]	; (8004bc0 <HAL_SPI_Init+0x16c>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	225d      	movs	r2, #93	; 0x5d
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b004      	add	sp, #16
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	fffff7ff 	.word	0xfffff7ff

08004bc4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	1cbb      	adds	r3, r7, #2
 8004bd4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bd6:	2317      	movs	r3, #23
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	225c      	movs	r2, #92	; 0x5c
 8004be2:	5c9b      	ldrb	r3, [r3, r2]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_SPI_TransmitReceive_DMA+0x28>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e186      	b.n	8004efa <HAL_SPI_TransmitReceive_DMA+0x336>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	225c      	movs	r2, #92	; 0x5c
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bf4:	2016      	movs	r0, #22
 8004bf6:	183b      	adds	r3, r7, r0
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	215d      	movs	r1, #93	; 0x5d
 8004bfc:	5c52      	ldrb	r2, [r2, r1]
 8004bfe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004c06:	0001      	movs	r1, r0
 8004c08:	187b      	adds	r3, r7, r1
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d011      	beq.n	8004c34 <HAL_SPI_TransmitReceive_DMA+0x70>
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	2382      	movs	r3, #130	; 0x82
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d107      	bne.n	8004c2a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <HAL_SPI_TransmitReceive_DMA+0x66>
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d004      	beq.n	8004c34 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8004c2a:	2317      	movs	r3, #23
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2202      	movs	r2, #2
 8004c30:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c32:	e15b      	b.n	8004eec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0x84>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0x84>
 8004c40:	1cbb      	adds	r3, r7, #2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8004c48:	2317      	movs	r3, #23
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c50:	e14c      	b.n	8004eec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	225d      	movs	r2, #93	; 0x5d
 8004c56:	5c9b      	ldrb	r3, [r3, r2]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d003      	beq.n	8004c66 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	225d      	movs	r2, #93	; 0x5d
 8004c62:	2105      	movs	r1, #5
 8004c64:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1cba      	adds	r2, r7, #2
 8004c76:	8812      	ldrh	r2, [r2, #0]
 8004c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1cba      	adds	r2, r7, #2
 8004c7e:	8812      	ldrh	r2, [r2, #0]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1cba      	adds	r2, r7, #2
 8004c8c:	2144      	movs	r1, #68	; 0x44
 8004c8e:	8812      	ldrh	r2, [r2, #0]
 8004c90:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1cba      	adds	r2, r7, #2
 8004c96:	2146      	movs	r1, #70	; 0x46
 8004c98:	8812      	ldrh	r2, [r2, #0]
 8004c9a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4994      	ldr	r1, [pc, #592]	; (8004f04 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	23e0      	movs	r3, #224	; 0xe0
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d908      	bls.n	8004cd6 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	498e      	ldr	r1, [pc, #568]	; (8004f08 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	e074      	b.n	8004dc0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	0149      	lsls	r1, r1, #5
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d127      	bne.n	8004d46 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d10f      	bne.n	8004d22 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	497f      	ldr	r1, [pc, #508]	; (8004f0c <HAL_SPI_TransmitReceive_DMA+0x348>)
 8004d0e:	400a      	ands	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d20:	e011      	b.n	8004d46 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2180      	movs	r1, #128	; 0x80
 8004d2e:	01c9      	lsls	r1, r1, #7
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d135      	bne.n	8004dc0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	496a      	ldr	r1, [pc, #424]	; (8004f08 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2246      	movs	r2, #70	; 0x46
 8004d68:	5a9b      	ldrh	r3, [r3, r2]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4964      	ldr	r1, [pc, #400]	; (8004f10 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2246      	movs	r2, #70	; 0x46
 8004d88:	5a9b      	ldrh	r3, [r3, r2]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	b299      	uxth	r1, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2246      	movs	r2, #70	; 0x46
 8004d94:	5299      	strh	r1, [r3, r2]
 8004d96:	e013      	b.n	8004dc0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	0189      	lsls	r1, r1, #6
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2246      	movs	r2, #70	; 0x46
 8004dae:	5a9b      	ldrh	r3, [r3, r2]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	b299      	uxth	r1, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2246      	movs	r2, #70	; 0x46
 8004dbe:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	225d      	movs	r2, #93	; 0x5d
 8004dc4:	5c9b      	ldrb	r3, [r3, r2]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d108      	bne.n	8004dde <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	4a50      	ldr	r2, [pc, #320]	; (8004f14 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	4a4f      	ldr	r2, [pc, #316]	; (8004f18 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ddc:	e007      	b.n	8004dee <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <HAL_SPI_TransmitReceive_DMA+0x358>)
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8004dec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	4a4c      	ldr	r2, [pc, #304]	; (8004f24 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	0019      	movs	r1, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2246      	movs	r2, #70	; 0x46
 8004e14:	5a9b      	ldrh	r3, [r3, r2]
 8004e16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004e18:	0022      	movs	r2, r4
 8004e1a:	f7fe fbe1 	bl	80035e0 <HAL_DMA_Start_IT>
 8004e1e:	1e03      	subs	r3, r0, #0
 8004e20:	d00e      	beq.n	8004e40 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	2210      	movs	r2, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004e2e:	2317      	movs	r3, #23
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	225d      	movs	r2, #93	; 0x5d
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	5499      	strb	r1, [r3, r2]
    goto error;
 8004e3e:	e055      	b.n	8004eec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e64:	2200      	movs	r2, #0
 8004e66:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	0019      	movs	r1, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e88:	f7fe fbaa 	bl	80035e0 <HAL_DMA_Start_IT>
 8004e8c:	1e03      	subs	r3, r0, #0
 8004e8e:	d00e      	beq.n	8004eae <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e94:	2210      	movs	r2, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004e9c:	2317      	movs	r3, #23
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	225d      	movs	r2, #93	; 0x5d
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]
    goto error;
 8004eac:	e01e      	b.n	8004eec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2240      	movs	r2, #64	; 0x40
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2140      	movs	r1, #64	; 0x40
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2120      	movs	r1, #32
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	225c      	movs	r2, #92	; 0x5c
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004ef4:	2317      	movs	r3, #23
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	781b      	ldrb	r3, [r3, #0]
}
 8004efa:	0018      	movs	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b007      	add	sp, #28
 8004f00:	bd90      	pop	{r4, r7, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	ffff9fff 	.word	0xffff9fff
 8004f08:	ffffefff 	.word	0xffffefff
 8004f0c:	ffffbfff 	.word	0xffffbfff
 8004f10:	ffffdfff 	.word	0xffffdfff
 8004f14:	08005137 	.word	0x08005137
 8004f18:	08004ff1 	.word	0x08004ff1
 8004f1c:	08005155 	.word	0x08005155
 8004f20:	080050a1 	.word	0x080050a1
 8004f24:	08005173 	.word	0x08005173

08004f28 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f30:	240f      	movs	r4, #15
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00f      	beq.n	8004f60 <HAL_SPI_DMAStop+0x38>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7fe fbd1 	bl	80036ec <HAL_DMA_Abort>
 8004f4a:	1e03      	subs	r3, r0, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_SPI_DMAStop+0x38>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	2210      	movs	r2, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8004f5a:	193b      	adds	r3, r7, r4
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <HAL_SPI_DMAStop+0x62>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fe fbbd 	bl	80036ec <HAL_DMA_Abort>
 8004f72:	1e03      	subs	r3, r0, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_SPI_DMAStop+0x62>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8004f82:	230f      	movs	r3, #15
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	2201      	movs	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2103      	movs	r1, #3
 8004f96:	438a      	bics	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	225d      	movs	r2, #93	; 0x5d
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004fa2:	230f      	movs	r3, #15
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	781b      	ldrb	r3, [r3, #0]
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b005      	add	sp, #20
 8004fae:	bd90      	pop	{r4, r7, pc}

08004fb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffe:	f7fd f967 	bl	80022d0 <HAL_GetTick>
 8005002:	0003      	movs	r3, r0
 8005004:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2220      	movs	r2, #32
 800500e:	4013      	ands	r3, r2
 8005010:	2b20      	cmp	r3, #32
 8005012:	d03e      	beq.n	8005092 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2120      	movs	r1, #32
 8005020:	438a      	bics	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10e      	bne.n	800504a <SPI_DMAReceiveCplt+0x5a>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	2382      	movs	r3, #130	; 0x82
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	429a      	cmp	r2, r3
 8005036:	d108      	bne.n	800504a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2103      	movs	r1, #3
 8005044:	438a      	bics	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	e007      	b.n	800505a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	0018      	movs	r0, r3
 8005062:	f000 f9d7 	bl	8005414 <SPI_EndRxTransaction>
 8005066:	1e03      	subs	r3, r0, #0
 8005068:	d002      	beq.n	8005070 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2246      	movs	r2, #70	; 0x46
 8005074:	2100      	movs	r1, #0
 8005076:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	225d      	movs	r2, #93	; 0x5d
 800507c:	2101      	movs	r1, #1
 800507e:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	0018      	movs	r0, r3
 800508c:	f004 fb06 	bl	800969c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005090:	e003      	b.n	800509a <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	0018      	movs	r0, r3
 8005096:	f7ff ff8b 	bl	8004fb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800509a:	46bd      	mov	sp, r7
 800509c:	b004      	add	sp, #16
 800509e:	bd80      	pop	{r7, pc}

080050a0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ae:	f7fd f90f 	bl	80022d0 <HAL_GetTick>
 80050b2:	0003      	movs	r3, r0
 80050b4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2220      	movs	r2, #32
 80050be:	4013      	ands	r3, r2
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d031      	beq.n	8005128 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2120      	movs	r1, #32
 80050d0:	438a      	bics	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2164      	movs	r1, #100	; 0x64
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f9f8 	bl	80054d0 <SPI_EndRxTxTransaction>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d005      	beq.n	80050f0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	2220      	movs	r2, #32
 80050ea:	431a      	orrs	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2103      	movs	r1, #3
 80050fc:	438a      	bics	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2246      	movs	r2, #70	; 0x46
 800510a:	2100      	movs	r1, #0
 800510c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	225d      	movs	r2, #93	; 0x5d
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0018      	movs	r0, r3
 8005122:	f004 fabb 	bl	800969c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005126:	e003      	b.n	8005130 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	0018      	movs	r0, r3
 800512c:	f7ff ff48 	bl	8004fc0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005130:	46bd      	mov	sp, r7
 8005132:	b004      	add	sp, #16
 8005134:	bd80      	pop	{r7, pc}

08005136 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	0018      	movs	r0, r3
 8005148:	f7ff ff42 	bl	8004fd0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b004      	add	sp, #16
 8005152:	bd80      	pop	{r7, pc}

08005154 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0018      	movs	r0, r3
 8005166:	f7ff ff3b 	bl	8004fe0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b004      	add	sp, #16
 8005170:	bd80      	pop	{r7, pc}

08005172 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2103      	movs	r1, #3
 800518c:	438a      	bics	r2, r1
 800518e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005194:	2210      	movs	r2, #16
 8005196:	431a      	orrs	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	225d      	movs	r2, #93	; 0x5d
 80051a0:	2101      	movs	r1, #1
 80051a2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	0018      	movs	r0, r3
 80051a8:	f004 fa78 	bl	800969c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b004      	add	sp, #16
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c4:	f7fd f884 	bl	80022d0 <HAL_GetTick>
 80051c8:	0002      	movs	r2, r0
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	18d3      	adds	r3, r2, r3
 80051d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d4:	f7fd f87c 	bl	80022d0 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051dc:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	015b      	lsls	r3, r3, #5
 80051e2:	0d1b      	lsrs	r3, r3, #20
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	4353      	muls	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ea:	e058      	b.n	800529e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	d055      	beq.n	800529e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f2:	f7fd f86d 	bl	80022d0 <HAL_GetTick>
 80051f6:	0002      	movs	r2, r0
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d902      	bls.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d142      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	21e0      	movs	r1, #224	; 0xe0
 8005214:	438a      	bics	r2, r1
 8005216:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	2382      	movs	r3, #130	; 0x82
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	429a      	cmp	r2, r3
 8005222:	d113      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	429a      	cmp	r2, r3
 800522e:	d005      	beq.n	800523c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	429a      	cmp	r2, r3
 800523a:	d107      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2140      	movs	r1, #64	; 0x40
 8005248:	438a      	bics	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	019b      	lsls	r3, r3, #6
 8005254:	429a      	cmp	r2, r3
 8005256:	d110      	bne.n	800527a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	491a      	ldr	r1, [pc, #104]	; (80052cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005264:	400a      	ands	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	0189      	lsls	r1, r1, #6
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	225d      	movs	r2, #93	; 0x5d
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	225c      	movs	r2, #92	; 0x5c
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e017      	b.n	80052be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3b01      	subs	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	425a      	negs	r2, r3
 80052ae:	4153      	adcs	r3, r2
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	001a      	movs	r2, r3
 80052b4:	1dfb      	adds	r3, r7, #7
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d197      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b008      	add	sp, #32
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	20000000 	.word	0x20000000
 80052cc:	ffffdfff 	.word	0xffffdfff

080052d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052de:	2317      	movs	r3, #23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052e6:	f7fc fff3 	bl	80022d0 <HAL_GetTick>
 80052ea:	0002      	movs	r2, r0
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052f6:	f7fc ffeb 	bl	80022d0 <HAL_GetTick>
 80052fa:	0003      	movs	r3, r0
 80052fc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005306:	4b41      	ldr	r3, [pc, #260]	; (800540c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	0013      	movs	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	189b      	adds	r3, r3, r2
 8005310:	00da      	lsls	r2, r3, #3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	0d1b      	lsrs	r3, r3, #20
 8005316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005318:	4353      	muls	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800531c:	e068      	b.n	80053f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	23c0      	movs	r3, #192	; 0xc0
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	429a      	cmp	r2, r3
 8005326:	d10a      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d107      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	2117      	movs	r1, #23
 8005336:	187b      	adds	r3, r7, r1
 8005338:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800533a:	187b      	adds	r3, r7, r1
 800533c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	d055      	beq.n	80053f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005344:	f7fc ffc4 	bl	80022d0 <HAL_GetTick>
 8005348:	0002      	movs	r2, r0
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	429a      	cmp	r2, r3
 8005352:	d902      	bls.n	800535a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d142      	bne.n	80053e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	21e0      	movs	r1, #224	; 0xe0
 8005366:	438a      	bics	r2, r1
 8005368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	2382      	movs	r3, #130	; 0x82
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	429a      	cmp	r2, r3
 8005374:	d113      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	429a      	cmp	r2, r3
 8005380:	d005      	beq.n	800538e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	429a      	cmp	r2, r3
 800538c:	d107      	bne.n	800539e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2140      	movs	r1, #64	; 0x40
 800539a:	438a      	bics	r2, r1
 800539c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d110      	bne.n	80053cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4916      	ldr	r1, [pc, #88]	; (8005410 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80053b6:	400a      	ands	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2180      	movs	r1, #128	; 0x80
 80053c6:	0189      	lsls	r1, r1, #6
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	225d      	movs	r2, #93	; 0x5d
 80053d0:	2101      	movs	r1, #1
 80053d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	225c      	movs	r2, #92	; 0x5c
 80053d8:	2100      	movs	r1, #0
 80053da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e010      	b.n	8005402 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d18e      	bne.n	800531e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b00a      	add	sp, #40	; 0x28
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	20000000 	.word	0x20000000
 8005410:	ffffdfff 	.word	0xffffdfff

08005414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	2382      	movs	r3, #130	; 0x82
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	429a      	cmp	r2, r3
 800542a:	d113      	bne.n	8005454 <SPI_EndRxTransaction+0x40>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	429a      	cmp	r2, r3
 8005436:	d005      	beq.n	8005444 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	429a      	cmp	r2, r3
 8005442:	d107      	bne.n	8005454 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	438a      	bics	r2, r1
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	0013      	movs	r3, r2
 800545e:	2200      	movs	r2, #0
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	f7ff fea7 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005466:	1e03      	subs	r3, r0, #0
 8005468:	d007      	beq.n	800547a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546e:	2220      	movs	r2, #32
 8005470:	431a      	orrs	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e026      	b.n	80054c8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	2382      	movs	r3, #130	; 0x82
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	429a      	cmp	r2, r3
 8005484:	d11f      	bne.n	80054c6 <SPI_EndRxTransaction+0xb2>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	429a      	cmp	r2, r3
 8005490:	d005      	beq.n	800549e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	429a      	cmp	r2, r3
 800549c:	d113      	bne.n	80054c6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	23c0      	movs	r3, #192	; 0xc0
 80054a2:	00d9      	lsls	r1, r3, #3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	0013      	movs	r3, r2
 80054ac:	2200      	movs	r2, #0
 80054ae:	f7ff ff0f 	bl	80052d0 <SPI_WaitFifoStateUntilTimeout>
 80054b2:	1e03      	subs	r3, r0, #0
 80054b4:	d007      	beq.n	80054c6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	2220      	movs	r2, #32
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e000      	b.n	80054c8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	0018      	movs	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b004      	add	sp, #16
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	23c0      	movs	r3, #192	; 0xc0
 80054e0:	0159      	lsls	r1, r3, #5
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	0013      	movs	r3, r2
 80054ea:	2200      	movs	r2, #0
 80054ec:	f7ff fef0 	bl	80052d0 <SPI_WaitFifoStateUntilTimeout>
 80054f0:	1e03      	subs	r3, r0, #0
 80054f2:	d007      	beq.n	8005504 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f8:	2220      	movs	r2, #32
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e027      	b.n	8005554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	0013      	movs	r3, r2
 800550e:	2200      	movs	r2, #0
 8005510:	2180      	movs	r1, #128	; 0x80
 8005512:	f7ff fe4f 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551e:	2220      	movs	r2, #32
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e014      	b.n	8005554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	23c0      	movs	r3, #192	; 0xc0
 800552e:	00d9      	lsls	r1, r3, #3
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	0013      	movs	r3, r2
 8005538:	2200      	movs	r2, #0
 800553a:	f7ff fec9 	bl	80052d0 <SPI_WaitFifoStateUntilTimeout>
 800553e:	1e03      	subs	r3, r0, #0
 8005540:	d007      	beq.n	8005552 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	2220      	movs	r2, #32
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e000      	b.n	8005554 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b004      	add	sp, #16
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e04a      	b.n	8005604 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	223d      	movs	r2, #61	; 0x3d
 8005572:	5c9b      	ldrb	r3, [r3, r2]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d107      	bne.n	800558a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	223c      	movs	r2, #60	; 0x3c
 800557e:	2100      	movs	r1, #0
 8005580:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 f841 	bl	800560c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	223d      	movs	r2, #61	; 0x3d
 800558e:	2102      	movs	r1, #2
 8005590:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	0019      	movs	r1, r3
 800559c:	0010      	movs	r0, r2
 800559e:	f000 f9e5 	bl	800596c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2248      	movs	r2, #72	; 0x48
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	223e      	movs	r2, #62	; 0x3e
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	223f      	movs	r2, #63	; 0x3f
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2240      	movs	r2, #64	; 0x40
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2241      	movs	r2, #65	; 0x41
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2242      	movs	r2, #66	; 0x42
 80055ce:	2101      	movs	r1, #1
 80055d0:	5499      	strb	r1, [r3, r2]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2243      	movs	r2, #67	; 0x43
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2244      	movs	r2, #68	; 0x44
 80055de:	2101      	movs	r1, #1
 80055e0:	5499      	strb	r1, [r3, r2]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2245      	movs	r2, #69	; 0x45
 80055e6:	2101      	movs	r1, #1
 80055e8:	5499      	strb	r1, [r3, r2]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2246      	movs	r2, #70	; 0x46
 80055ee:	2101      	movs	r1, #1
 80055f0:	5499      	strb	r1, [r3, r2]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2247      	movs	r2, #71	; 0x47
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	223d      	movs	r2, #61	; 0x3d
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	0018      	movs	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b002      	add	sp, #8
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	223d      	movs	r2, #61	; 0x3d
 8005628:	5c9b      	ldrb	r3, [r3, r2]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d001      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e03c      	b.n	80056ae <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	223d      	movs	r2, #61	; 0x3d
 8005638:	2102      	movs	r1, #2
 800563a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2101      	movs	r1, #1
 8005648:	430a      	orrs	r2, r1
 800564a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_TIM_Base_Start_IT+0x4e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <HAL_TIM_Base_Start_IT+0xa0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_TIM_Base_Start_IT+0x4e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a16      	ldr	r2, [pc, #88]	; (80056c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d116      	bne.n	8005698 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005672:	4013      	ands	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d016      	beq.n	80056aa <HAL_TIM_Base_Start_IT+0x8e>
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	025b      	lsls	r3, r3, #9
 8005682:	429a      	cmp	r2, r3
 8005684:	d011      	beq.n	80056aa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2101      	movs	r1, #1
 8005692:	430a      	orrs	r2, r1
 8005694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	e008      	b.n	80056aa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2101      	movs	r1, #1
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e000      	b.n	80056ac <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	0018      	movs	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b004      	add	sp, #16
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	00010007 	.word	0x00010007

080056c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2202      	movs	r2, #2
 80056d8:	4013      	ands	r3, r2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d124      	bne.n	8005728 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2202      	movs	r2, #2
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d11d      	bne.n	8005728 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2203      	movs	r2, #3
 80056f2:	4252      	negs	r2, r2
 80056f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2203      	movs	r2, #3
 8005704:	4013      	ands	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f916 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 8005710:	e007      	b.n	8005722 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f000 f909 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f915 	bl	800594c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2204      	movs	r2, #4
 8005730:	4013      	ands	r3, r2
 8005732:	2b04      	cmp	r3, #4
 8005734:	d125      	bne.n	8005782 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2204      	movs	r2, #4
 800573e:	4013      	ands	r3, r2
 8005740:	2b04      	cmp	r3, #4
 8005742:	d11e      	bne.n	8005782 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2205      	movs	r2, #5
 800574a:	4252      	negs	r2, r2
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	23c0      	movs	r3, #192	; 0xc0
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4013      	ands	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f8e9 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 800576a:	e007      	b.n	800577c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	0018      	movs	r0, r3
 8005770:	f000 f8dc 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f000 f8e8 	bl	800594c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2208      	movs	r2, #8
 800578a:	4013      	ands	r3, r2
 800578c:	2b08      	cmp	r3, #8
 800578e:	d124      	bne.n	80057da <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2208      	movs	r2, #8
 8005798:	4013      	ands	r3, r2
 800579a:	2b08      	cmp	r3, #8
 800579c:	d11d      	bne.n	80057da <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2209      	movs	r2, #9
 80057a4:	4252      	negs	r2, r2
 80057a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2204      	movs	r2, #4
 80057ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2203      	movs	r2, #3
 80057b6:	4013      	ands	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 f8bd 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 80057c2:	e007      	b.n	80057d4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	0018      	movs	r0, r3
 80057c8:	f000 f8b0 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f000 f8bc 	bl	800594c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2210      	movs	r2, #16
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d125      	bne.n	8005834 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2210      	movs	r2, #16
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d11e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2211      	movs	r2, #17
 80057fc:	4252      	negs	r2, r2
 80057fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2208      	movs	r2, #8
 8005804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	23c0      	movs	r3, #192	; 0xc0
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4013      	ands	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 f890 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 800581c:	e007      	b.n	800582e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f883 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0018      	movs	r0, r3
 800582a:	f000 f88f 	bl	800594c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2201      	movs	r2, #1
 800583c:	4013      	ands	r3, r2
 800583e:	2b01      	cmp	r3, #1
 8005840:	d10f      	bne.n	8005862 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2202      	movs	r2, #2
 8005856:	4252      	negs	r2, r2
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0018      	movs	r0, r3
 800585e:	f7fc f9a7 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	4013      	ands	r3, r2
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d10f      	bne.n	8005890 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	4013      	ands	r3, r2
 800587a:	2b80      	cmp	r3, #128	; 0x80
 800587c:	d108      	bne.n	8005890 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2281      	movs	r2, #129	; 0x81
 8005884:	4252      	negs	r2, r2
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 f8ec 	bl	8005a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	401a      	ands	r2, r3
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d10e      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2280      	movs	r2, #128	; 0x80
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d107      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_TIM_IRQHandler+0x260>)
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0018      	movs	r0, r3
 80058be:	f000 f8db 	bl	8005a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2240      	movs	r2, #64	; 0x40
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d10f      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2240      	movs	r2, #64	; 0x40
 80058d8:	4013      	ands	r3, r2
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d108      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2241      	movs	r2, #65	; 0x41
 80058e4:	4252      	negs	r2, r2
 80058e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 f836 	bl	800595c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2220      	movs	r2, #32
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d10f      	bne.n	800591e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	4013      	ands	r3, r2
 8005908:	2b20      	cmp	r3, #32
 800590a:	d108      	bne.n	800591e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2221      	movs	r2, #33	; 0x21
 8005912:	4252      	negs	r2, r2
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 f89d 	bl	8005a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b002      	add	sp, #8
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	fffffeff 	.word	0xfffffeff

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2f      	ldr	r2, [pc, #188]	; (8005a3c <TIM_Base_SetConfig+0xd0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0x20>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <TIM_Base_SetConfig+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2270      	movs	r2, #112	; 0x70
 8005990:	4393      	bics	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a26      	ldr	r2, [pc, #152]	; (8005a3c <TIM_Base_SetConfig+0xd0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <TIM_Base_SetConfig+0x62>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a25      	ldr	r2, [pc, #148]	; (8005a40 <TIM_Base_SetConfig+0xd4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00f      	beq.n	80059ce <TIM_Base_SetConfig+0x62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a24      	ldr	r2, [pc, #144]	; (8005a44 <TIM_Base_SetConfig+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00b      	beq.n	80059ce <TIM_Base_SetConfig+0x62>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a23      	ldr	r2, [pc, #140]	; (8005a48 <TIM_Base_SetConfig+0xdc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_Base_SetConfig+0x62>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <TIM_Base_SetConfig+0xe0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_Base_SetConfig+0x62>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <TIM_Base_SetConfig+0xe4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d108      	bne.n	80059e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <TIM_Base_SetConfig+0xe8>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	4393      	bics	r3, r2
 80059e6:	001a      	movs	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <TIM_Base_SetConfig+0xd0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_Base_SetConfig+0xba>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <TIM_Base_SetConfig+0xdc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0xba>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <TIM_Base_SetConfig+0xe0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0xba>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <TIM_Base_SetConfig+0xe4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d103      	bne.n	8005a2e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	615a      	str	r2, [r3, #20]
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40002000 	.word	0x40002000
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	fffffcff 	.word	0xfffffcff

08005a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b002      	add	sp, #8
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b002      	add	sp, #8
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b002      	add	sp, #8
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e046      	b.n	8005b28 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2288      	movs	r2, #136	; 0x88
 8005a9e:	589b      	ldr	r3, [r3, r2]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2284      	movs	r2, #132	; 0x84
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7fc fada 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2288      	movs	r2, #136	; 0x88
 8005ab8:	2124      	movs	r1, #36	; 0x24
 8005aba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	438a      	bics	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 f830 	bl	8005b34 <UART_SetConfig>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e024      	b.n	8005b28 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 f9c7 	bl	8005e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	490d      	ldr	r1, [pc, #52]	; (8005b30 <HAL_UART_Init+0xa8>)
 8005afa:	400a      	ands	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	212a      	movs	r1, #42	; 0x2a
 8005b0a:	438a      	bics	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2101      	movs	r1, #1
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 fa5f 	bl	8005fe4 <UART_CheckIdleState>
 8005b26:	0003      	movs	r3, r0
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	ffffb7ff 	.word	0xffffb7ff

08005b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b3c:	231a      	movs	r3, #26
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4abc      	ldr	r2, [pc, #752]	; (8005e54 <UART_SetConfig+0x320>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	0019      	movs	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4ab7      	ldr	r2, [pc, #732]	; (8005e58 <UART_SetConfig+0x324>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4aae      	ldr	r2, [pc, #696]	; (8005e5c <UART_SetConfig+0x328>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	220f      	movs	r2, #15
 8005bb8:	4393      	bics	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4aa4      	ldr	r2, [pc, #656]	; (8005e60 <UART_SetConfig+0x32c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d127      	bne.n	8005c22 <UART_SetConfig+0xee>
 8005bd2:	4ba4      	ldr	r3, [pc, #656]	; (8005e64 <UART_SetConfig+0x330>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d017      	beq.n	8005c0e <UART_SetConfig+0xda>
 8005bde:	d81b      	bhi.n	8005c18 <UART_SetConfig+0xe4>
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d00a      	beq.n	8005bfa <UART_SetConfig+0xc6>
 8005be4:	d818      	bhi.n	8005c18 <UART_SetConfig+0xe4>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <UART_SetConfig+0xbc>
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d00a      	beq.n	8005c04 <UART_SetConfig+0xd0>
 8005bee:	e013      	b.n	8005c18 <UART_SetConfig+0xe4>
 8005bf0:	231b      	movs	r3, #27
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e058      	b.n	8005cac <UART_SetConfig+0x178>
 8005bfa:	231b      	movs	r3, #27
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2202      	movs	r2, #2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e053      	b.n	8005cac <UART_SetConfig+0x178>
 8005c04:	231b      	movs	r3, #27
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	2204      	movs	r2, #4
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e04e      	b.n	8005cac <UART_SetConfig+0x178>
 8005c0e:	231b      	movs	r3, #27
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2208      	movs	r2, #8
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e049      	b.n	8005cac <UART_SetConfig+0x178>
 8005c18:	231b      	movs	r3, #27
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e044      	b.n	8005cac <UART_SetConfig+0x178>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a90      	ldr	r2, [pc, #576]	; (8005e68 <UART_SetConfig+0x334>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d127      	bne.n	8005c7c <UART_SetConfig+0x148>
 8005c2c:	4b8d      	ldr	r3, [pc, #564]	; (8005e64 <UART_SetConfig+0x330>)
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	220c      	movs	r2, #12
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	d017      	beq.n	8005c68 <UART_SetConfig+0x134>
 8005c38:	d81b      	bhi.n	8005c72 <UART_SetConfig+0x13e>
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d00a      	beq.n	8005c54 <UART_SetConfig+0x120>
 8005c3e:	d818      	bhi.n	8005c72 <UART_SetConfig+0x13e>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <UART_SetConfig+0x116>
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d00a      	beq.n	8005c5e <UART_SetConfig+0x12a>
 8005c48:	e013      	b.n	8005c72 <UART_SetConfig+0x13e>
 8005c4a:	231b      	movs	r3, #27
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e02b      	b.n	8005cac <UART_SetConfig+0x178>
 8005c54:	231b      	movs	r3, #27
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2202      	movs	r2, #2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e026      	b.n	8005cac <UART_SetConfig+0x178>
 8005c5e:	231b      	movs	r3, #27
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	2204      	movs	r2, #4
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e021      	b.n	8005cac <UART_SetConfig+0x178>
 8005c68:	231b      	movs	r3, #27
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e01c      	b.n	8005cac <UART_SetConfig+0x178>
 8005c72:	231b      	movs	r3, #27
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2210      	movs	r2, #16
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e017      	b.n	8005cac <UART_SetConfig+0x178>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a7a      	ldr	r2, [pc, #488]	; (8005e6c <UART_SetConfig+0x338>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d104      	bne.n	8005c90 <UART_SetConfig+0x15c>
 8005c86:	231b      	movs	r3, #27
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e00d      	b.n	8005cac <UART_SetConfig+0x178>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a76      	ldr	r2, [pc, #472]	; (8005e70 <UART_SetConfig+0x33c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d104      	bne.n	8005ca4 <UART_SetConfig+0x170>
 8005c9a:	231b      	movs	r3, #27
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e003      	b.n	8005cac <UART_SetConfig+0x178>
 8005ca4:	231b      	movs	r3, #27
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	2210      	movs	r2, #16
 8005caa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	2380      	movs	r3, #128	; 0x80
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d000      	beq.n	8005cba <UART_SetConfig+0x186>
 8005cb8:	e065      	b.n	8005d86 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005cba:	231b      	movs	r3, #27
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d015      	beq.n	8005cf0 <UART_SetConfig+0x1bc>
 8005cc4:	dc18      	bgt.n	8005cf8 <UART_SetConfig+0x1c4>
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d00d      	beq.n	8005ce6 <UART_SetConfig+0x1b2>
 8005cca:	dc15      	bgt.n	8005cf8 <UART_SetConfig+0x1c4>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <UART_SetConfig+0x1a2>
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d005      	beq.n	8005ce0 <UART_SetConfig+0x1ac>
 8005cd4:	e010      	b.n	8005cf8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd6:	f7fe fd49 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	617b      	str	r3, [r7, #20]
        break;
 8005cde:	e012      	b.n	8005d06 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce0:	4b64      	ldr	r3, [pc, #400]	; (8005e74 <UART_SetConfig+0x340>)
 8005ce2:	617b      	str	r3, [r7, #20]
        break;
 8005ce4:	e00f      	b.n	8005d06 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce6:	f7fe fcb5 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005cea:	0003      	movs	r3, r0
 8005cec:	617b      	str	r3, [r7, #20]
        break;
 8005cee:	e00a      	b.n	8005d06 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	617b      	str	r3, [r7, #20]
        break;
 8005cf6:	e006      	b.n	8005d06 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cfc:	231a      	movs	r3, #26
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
        break;
 8005d04:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d100      	bne.n	8005d0e <UART_SetConfig+0x1da>
 8005d0c:	e08d      	b.n	8005e2a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d12:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <UART_SetConfig+0x344>)
 8005d14:	0052      	lsls	r2, r2, #1
 8005d16:	5ad3      	ldrh	r3, [r2, r3]
 8005d18:	0019      	movs	r1, r3
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	f7fa f9f4 	bl	8000108 <__udivsi3>
 8005d20:	0003      	movs	r3, r0
 8005d22:	005a      	lsls	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	18d2      	adds	r2, r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	0019      	movs	r1, r3
 8005d32:	0010      	movs	r0, r2
 8005d34:	f7fa f9e8 	bl	8000108 <__udivsi3>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b0f      	cmp	r3, #15
 8005d40:	d91c      	bls.n	8005d7c <UART_SetConfig+0x248>
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	025b      	lsls	r3, r3, #9
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d217      	bcs.n	8005d7c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	200e      	movs	r0, #14
 8005d52:	183b      	adds	r3, r7, r0
 8005d54:	210f      	movs	r1, #15
 8005d56:	438a      	bics	r2, r1
 8005d58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2207      	movs	r2, #7
 8005d62:	4013      	ands	r3, r2
 8005d64:	b299      	uxth	r1, r3
 8005d66:	183b      	adds	r3, r7, r0
 8005d68:	183a      	adds	r2, r7, r0
 8005d6a:	8812      	ldrh	r2, [r2, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	183a      	adds	r2, r7, r0
 8005d76:	8812      	ldrh	r2, [r2, #0]
 8005d78:	60da      	str	r2, [r3, #12]
 8005d7a:	e056      	b.n	8005e2a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005d7c:	231a      	movs	r3, #26
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e051      	b.n	8005e2a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d86:	231b      	movs	r3, #27
 8005d88:	18fb      	adds	r3, r7, r3
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d015      	beq.n	8005dbc <UART_SetConfig+0x288>
 8005d90:	dc18      	bgt.n	8005dc4 <UART_SetConfig+0x290>
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d00d      	beq.n	8005db2 <UART_SetConfig+0x27e>
 8005d96:	dc15      	bgt.n	8005dc4 <UART_SetConfig+0x290>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <UART_SetConfig+0x26e>
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d005      	beq.n	8005dac <UART_SetConfig+0x278>
 8005da0:	e010      	b.n	8005dc4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da2:	f7fe fce3 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8005da6:	0003      	movs	r3, r0
 8005da8:	617b      	str	r3, [r7, #20]
        break;
 8005daa:	e012      	b.n	8005dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dac:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <UART_SetConfig+0x340>)
 8005dae:	617b      	str	r3, [r7, #20]
        break;
 8005db0:	e00f      	b.n	8005dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db2:	f7fe fc4f 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005db6:	0003      	movs	r3, r0
 8005db8:	617b      	str	r3, [r7, #20]
        break;
 8005dba:	e00a      	b.n	8005dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	617b      	str	r3, [r7, #20]
        break;
 8005dc2:	e006      	b.n	8005dd2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dc8:	231a      	movs	r3, #26
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	2201      	movs	r2, #1
 8005dce:	701a      	strb	r2, [r3, #0]
        break;
 8005dd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d028      	beq.n	8005e2a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <UART_SetConfig+0x344>)
 8005dde:	0052      	lsls	r2, r2, #1
 8005de0:	5ad3      	ldrh	r3, [r2, r3]
 8005de2:	0019      	movs	r1, r3
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f7fa f98f 	bl	8000108 <__udivsi3>
 8005dea:	0003      	movs	r3, r0
 8005dec:	001a      	movs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	18d2      	adds	r2, r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	0019      	movs	r1, r3
 8005dfc:	0010      	movs	r0, r2
 8005dfe:	f7fa f983 	bl	8000108 <__udivsi3>
 8005e02:	0003      	movs	r3, r0
 8005e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b0f      	cmp	r3, #15
 8005e0a:	d90a      	bls.n	8005e22 <UART_SetConfig+0x2ee>
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	025b      	lsls	r3, r3, #9
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d205      	bcs.n	8005e22 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	e003      	b.n	8005e2a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005e22:	231a      	movs	r3, #26
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	226a      	movs	r2, #106	; 0x6a
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2268      	movs	r2, #104	; 0x68
 8005e36:	2101      	movs	r1, #1
 8005e38:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e46:	231a      	movs	r3, #26
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	781b      	ldrb	r3, [r3, #0]
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b008      	add	sp, #32
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	cfff69f3 	.word	0xcfff69f3
 8005e58:	ffffcfff 	.word	0xffffcfff
 8005e5c:	11fff4ff 	.word	0x11fff4ff
 8005e60:	40013800 	.word	0x40013800
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40004400 	.word	0x40004400
 8005e6c:	40004800 	.word	0x40004800
 8005e70:	40004c00 	.word	0x40004c00
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	08009b54 	.word	0x08009b54

08005e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4a4a      	ldr	r2, [pc, #296]	; (8005fc0 <UART_AdvFeatureConfig+0x144>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	2202      	movs	r2, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a43      	ldr	r2, [pc, #268]	; (8005fc4 <UART_AdvFeatureConfig+0x148>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	0019      	movs	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	2204      	movs	r2, #4
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a3b      	ldr	r2, [pc, #236]	; (8005fc8 <UART_AdvFeatureConfig+0x14c>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	0019      	movs	r1, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	2208      	movs	r2, #8
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4a34      	ldr	r2, [pc, #208]	; (8005fcc <UART_AdvFeatureConfig+0x150>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	0019      	movs	r1, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	2210      	movs	r2, #16
 8005f12:	4013      	ands	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <UART_AdvFeatureConfig+0x154>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	0019      	movs	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	2220      	movs	r2, #32
 8005f34:	4013      	ands	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <UART_AdvFeatureConfig+0x158>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	0019      	movs	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2240      	movs	r2, #64	; 0x40
 8005f56:	4013      	ands	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <UART_AdvFeatureConfig+0x15c>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	0019      	movs	r1, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	035b      	lsls	r3, r3, #13
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d10b      	bne.n	8005f96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <UART_AdvFeatureConfig+0x160>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a0e      	ldr	r2, [pc, #56]	; (8005fe0 <UART_AdvFeatureConfig+0x164>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	0019      	movs	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	fffdffff 	.word	0xfffdffff
 8005fc4:	fffeffff 	.word	0xfffeffff
 8005fc8:	fffbffff 	.word	0xfffbffff
 8005fcc:	ffff7fff 	.word	0xffff7fff
 8005fd0:	ffffefff 	.word	0xffffefff
 8005fd4:	ffffdfff 	.word	0xffffdfff
 8005fd8:	ffefffff 	.word	0xffefffff
 8005fdc:	ff9fffff 	.word	0xff9fffff
 8005fe0:	fff7ffff 	.word	0xfff7ffff

08005fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2290      	movs	r2, #144	; 0x90
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff4:	f7fc f96c 	bl	80022d0 <HAL_GetTick>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2208      	movs	r2, #8
 8006004:	4013      	ands	r3, r2
 8006006:	2b08      	cmp	r3, #8
 8006008:	d10c      	bne.n	8006024 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	0391      	lsls	r1, r2, #14
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4a1a      	ldr	r2, [pc, #104]	; (800607c <UART_CheckIdleState+0x98>)
 8006014:	9200      	str	r2, [sp, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f832 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d001      	beq.n	8006024 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e026      	b.n	8006072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2204      	movs	r2, #4
 800602c:	4013      	ands	r3, r2
 800602e:	2b04      	cmp	r3, #4
 8006030:	d10c      	bne.n	800604c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2280      	movs	r2, #128	; 0x80
 8006036:	03d1      	lsls	r1, r2, #15
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4a10      	ldr	r2, [pc, #64]	; (800607c <UART_CheckIdleState+0x98>)
 800603c:	9200      	str	r2, [sp, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	f000 f81e 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8006044:	1e03      	subs	r3, r0, #0
 8006046:	d001      	beq.n	800604c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e012      	b.n	8006072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2288      	movs	r2, #136	; 0x88
 8006050:	2120      	movs	r1, #32
 8006052:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	228c      	movs	r2, #140	; 0x8c
 8006058:	2120      	movs	r1, #32
 800605a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2284      	movs	r2, #132	; 0x84
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b004      	add	sp, #16
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	01ffffff 	.word	0x01ffffff

08006080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b094      	sub	sp, #80	; 0x50
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	e0a7      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006094:	3301      	adds	r3, #1
 8006096:	d100      	bne.n	800609a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006098:	e0a3      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fc f919 	bl	80022d0 <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d13f      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b0:	f3ef 8310 	mrs	r3, PRIMASK
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060b8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ba:	2301      	movs	r3, #1
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	f383 8810 	msr	PRIMASK, r3
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	494e      	ldr	r1, [pc, #312]	; (800620c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060d2:	400a      	ands	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f383 8810 	msr	PRIMASK, r3
}
 80060e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e2:	f3ef 8310 	mrs	r3, PRIMASK
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	643b      	str	r3, [r7, #64]	; 0x40
 80060ec:	2301      	movs	r3, #1
 80060ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f383 8810 	msr	PRIMASK, r3
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	438a      	bics	r2, r1
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610e:	f383 8810 	msr	PRIMASK, r3
}
 8006112:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2288      	movs	r2, #136	; 0x88
 8006118:	2120      	movs	r1, #32
 800611a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	228c      	movs	r2, #140	; 0x8c
 8006120:	2120      	movs	r1, #32
 8006122:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2284      	movs	r2, #132	; 0x84
 8006128:	2100      	movs	r1, #0
 800612a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e069      	b.n	8006204 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2204      	movs	r2, #4
 8006138:	4013      	ands	r3, r2
 800613a:	d052      	beq.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	401a      	ands	r2, r3
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	429a      	cmp	r2, r3
 800614e:	d148      	bne.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2280      	movs	r2, #128	; 0x80
 8006156:	0112      	lsls	r2, r2, #4
 8006158:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615a:	f3ef 8310 	mrs	r3, PRIMASK
 800615e:	613b      	str	r3, [r7, #16]
  return(result);
 8006160:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f383 8810 	msr	PRIMASK, r3
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4924      	ldr	r1, [pc, #144]	; (800620c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800617c:	400a      	ands	r2, r1
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f383 8810 	msr	PRIMASK, r3
}
 800618a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618c:	f3ef 8310 	mrs	r3, PRIMASK
 8006190:	61fb      	str	r3, [r7, #28]
  return(result);
 8006192:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	64bb      	str	r3, [r7, #72]	; 0x48
 8006196:	2301      	movs	r3, #1
 8006198:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	438a      	bics	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]
 80061b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	f383 8810 	msr	PRIMASK, r3
}
 80061bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2288      	movs	r2, #136	; 0x88
 80061c2:	2120      	movs	r1, #32
 80061c4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	228c      	movs	r2, #140	; 0x8c
 80061ca:	2120      	movs	r1, #32
 80061cc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2290      	movs	r2, #144	; 0x90
 80061d2:	2120      	movs	r1, #32
 80061d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2284      	movs	r2, #132	; 0x84
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e010      	b.n	8006204 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	425a      	negs	r2, r3
 80061f2:	4153      	adcs	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	001a      	movs	r2, r3
 80061f8:	1dfb      	adds	r3, r7, #7
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d100      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x182>
 8006200:	e747      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b014      	add	sp, #80	; 0x50
 800620a:	bd80      	pop	{r7, pc}
 800620c:	fffffe5f 	.word	0xfffffe5f

08006210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2284      	movs	r2, #132	; 0x84
 800621c:	5c9b      	ldrb	r3, [r3, r2]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_UARTEx_DisableFifoMode+0x16>
 8006222:	2302      	movs	r3, #2
 8006224:	e027      	b.n	8006276 <HAL_UARTEx_DisableFifoMode+0x66>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2284      	movs	r2, #132	; 0x84
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2288      	movs	r2, #136	; 0x88
 8006232:	2124      	movs	r1, #36	; 0x24
 8006234:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2101      	movs	r1, #1
 800624a:	438a      	bics	r2, r1
 800624c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a0b      	ldr	r2, [pc, #44]	; (8006280 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006252:	4013      	ands	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2288      	movs	r2, #136	; 0x88
 8006268:	2120      	movs	r1, #32
 800626a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2284      	movs	r2, #132	; 0x84
 8006270:	2100      	movs	r1, #0
 8006272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	0018      	movs	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	b004      	add	sp, #16
 800627c:	bd80      	pop	{r7, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	dfffffff 	.word	0xdfffffff

08006284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2284      	movs	r2, #132	; 0x84
 8006292:	5c9b      	ldrb	r3, [r3, r2]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006298:	2302      	movs	r3, #2
 800629a:	e02e      	b.n	80062fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2284      	movs	r2, #132	; 0x84
 80062a0:	2101      	movs	r1, #1
 80062a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2288      	movs	r2, #136	; 0x88
 80062a8:	2124      	movs	r1, #36	; 0x24
 80062aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2101      	movs	r1, #1
 80062c0:	438a      	bics	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	08d9      	lsrs	r1, r3, #3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 f854 	bl	8006388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2288      	movs	r2, #136	; 0x88
 80062ec:	2120      	movs	r1, #32
 80062ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2284      	movs	r2, #132	; 0x84
 80062f4:	2100      	movs	r1, #0
 80062f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2284      	movs	r2, #132	; 0x84
 8006312:	5c9b      	ldrb	r3, [r3, r2]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e02f      	b.n	800637c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2284      	movs	r2, #132	; 0x84
 8006320:	2101      	movs	r1, #1
 8006322:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2288      	movs	r2, #136	; 0x88
 8006328:	2124      	movs	r1, #36	; 0x24
 800632a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	438a      	bics	r2, r1
 8006342:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800634c:	4013      	ands	r3, r2
 800634e:	0019      	movs	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 f813 	bl	8006388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2288      	movs	r2, #136	; 0x88
 800636e:	2120      	movs	r1, #32
 8006370:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2284      	movs	r2, #132	; 0x84
 8006376:	2100      	movs	r1, #0
 8006378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	0018      	movs	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	b004      	add	sp, #16
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f1ffffff 	.word	0xf1ffffff

08006388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	226a      	movs	r2, #106	; 0x6a
 800639c:	2101      	movs	r1, #1
 800639e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2268      	movs	r2, #104	; 0x68
 80063a4:	2101      	movs	r1, #1
 80063a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a8:	e043      	b.n	8006432 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063aa:	260f      	movs	r6, #15
 80063ac:	19bb      	adds	r3, r7, r6
 80063ae:	2208      	movs	r2, #8
 80063b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063b2:	200e      	movs	r0, #14
 80063b4:	183b      	adds	r3, r7, r0
 80063b6:	2208      	movs	r2, #8
 80063b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0e5b      	lsrs	r3, r3, #25
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	240d      	movs	r4, #13
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	2107      	movs	r1, #7
 80063ca:	400a      	ands	r2, r1
 80063cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	0f5b      	lsrs	r3, r3, #29
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	250c      	movs	r5, #12
 80063da:	197b      	adds	r3, r7, r5
 80063dc:	2107      	movs	r1, #7
 80063de:	400a      	ands	r2, r1
 80063e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	197a      	adds	r2, r7, r5
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	4914      	ldr	r1, [pc, #80]	; (800643c <UARTEx_SetNbDataToProcess+0xb4>)
 80063ec:	5c8a      	ldrb	r2, [r1, r2]
 80063ee:	435a      	muls	r2, r3
 80063f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063f2:	197b      	adds	r3, r7, r5
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4a12      	ldr	r2, [pc, #72]	; (8006440 <UARTEx_SetNbDataToProcess+0xb8>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063fa:	0019      	movs	r1, r3
 80063fc:	f7f9 ff0e 	bl	800021c <__divsi3>
 8006400:	0003      	movs	r3, r0
 8006402:	b299      	uxth	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	226a      	movs	r2, #106	; 0x6a
 8006408:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800640a:	19bb      	adds	r3, r7, r6
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	193a      	adds	r2, r7, r4
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	490a      	ldr	r1, [pc, #40]	; (800643c <UARTEx_SetNbDataToProcess+0xb4>)
 8006414:	5c8a      	ldrb	r2, [r1, r2]
 8006416:	435a      	muls	r2, r3
 8006418:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800641a:	193b      	adds	r3, r7, r4
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	4a08      	ldr	r2, [pc, #32]	; (8006440 <UARTEx_SetNbDataToProcess+0xb8>)
 8006420:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006422:	0019      	movs	r1, r3
 8006424:	f7f9 fefa 	bl	800021c <__divsi3>
 8006428:	0003      	movs	r3, r0
 800642a:	b299      	uxth	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2268      	movs	r2, #104	; 0x68
 8006430:	5299      	strh	r1, [r3, r2]
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b005      	add	sp, #20
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	08009b6c 	.word	0x08009b6c
 8006440:	08009b74 	.word	0x08009b74

08006444 <__NVIC_SetPriority>:
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	0002      	movs	r2, r0
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	1dfb      	adds	r3, r7, #7
 8006450:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006452:	1dfb      	adds	r3, r7, #7
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b7f      	cmp	r3, #127	; 0x7f
 8006458:	d828      	bhi.n	80064ac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800645a:	4a2f      	ldr	r2, [pc, #188]	; (8006518 <__NVIC_SetPriority+0xd4>)
 800645c:	1dfb      	adds	r3, r7, #7
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	b25b      	sxtb	r3, r3
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	33c0      	adds	r3, #192	; 0xc0
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	589b      	ldr	r3, [r3, r2]
 800646a:	1dfa      	adds	r2, r7, #7
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	0011      	movs	r1, r2
 8006470:	2203      	movs	r2, #3
 8006472:	400a      	ands	r2, r1
 8006474:	00d2      	lsls	r2, r2, #3
 8006476:	21ff      	movs	r1, #255	; 0xff
 8006478:	4091      	lsls	r1, r2
 800647a:	000a      	movs	r2, r1
 800647c:	43d2      	mvns	r2, r2
 800647e:	401a      	ands	r2, r3
 8006480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	019b      	lsls	r3, r3, #6
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	401a      	ands	r2, r3
 800648a:	1dfb      	adds	r3, r7, #7
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	0018      	movs	r0, r3
 8006490:	2303      	movs	r3, #3
 8006492:	4003      	ands	r3, r0
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006498:	481f      	ldr	r0, [pc, #124]	; (8006518 <__NVIC_SetPriority+0xd4>)
 800649a:	1dfb      	adds	r3, r7, #7
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	089b      	lsrs	r3, r3, #2
 80064a2:	430a      	orrs	r2, r1
 80064a4:	33c0      	adds	r3, #192	; 0xc0
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	501a      	str	r2, [r3, r0]
}
 80064aa:	e031      	b.n	8006510 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064ac:	4a1b      	ldr	r2, [pc, #108]	; (800651c <__NVIC_SetPriority+0xd8>)
 80064ae:	1dfb      	adds	r3, r7, #7
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	0019      	movs	r1, r3
 80064b4:	230f      	movs	r3, #15
 80064b6:	400b      	ands	r3, r1
 80064b8:	3b08      	subs	r3, #8
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	3306      	adds	r3, #6
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	18d3      	adds	r3, r2, r3
 80064c2:	3304      	adds	r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	1dfa      	adds	r2, r7, #7
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	0011      	movs	r1, r2
 80064cc:	2203      	movs	r2, #3
 80064ce:	400a      	ands	r2, r1
 80064d0:	00d2      	lsls	r2, r2, #3
 80064d2:	21ff      	movs	r1, #255	; 0xff
 80064d4:	4091      	lsls	r1, r2
 80064d6:	000a      	movs	r2, r1
 80064d8:	43d2      	mvns	r2, r2
 80064da:	401a      	ands	r2, r3
 80064dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	401a      	ands	r2, r3
 80064e6:	1dfb      	adds	r3, r7, #7
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	0018      	movs	r0, r3
 80064ec:	2303      	movs	r3, #3
 80064ee:	4003      	ands	r3, r0
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <__NVIC_SetPriority+0xd8>)
 80064f6:	1dfb      	adds	r3, r7, #7
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	001c      	movs	r4, r3
 80064fc:	230f      	movs	r3, #15
 80064fe:	4023      	ands	r3, r4
 8006500:	3b08      	subs	r3, #8
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	430a      	orrs	r2, r1
 8006506:	3306      	adds	r3, #6
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	18c3      	adds	r3, r0, r3
 800650c:	3304      	adds	r3, #4
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	46c0      	nop			; (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b003      	add	sp, #12
 8006516:	bd90      	pop	{r4, r7, pc}
 8006518:	e000e100 	.word	0xe000e100
 800651c:	e000ed00 	.word	0xe000ed00

08006520 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <SysTick_Handler+0x1c>)
 8006526:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006528:	f001 fec8 	bl	80082bc <xTaskGetSchedulerState>
 800652c:	0003      	movs	r3, r0
 800652e:	2b01      	cmp	r3, #1
 8006530:	d001      	beq.n	8006536 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006532:	f002 fbd1 	bl	8008cd8 <xPortSysTickHandler>
  }
}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	e000e010 	.word	0xe000e010

08006540 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006544:	2305      	movs	r3, #5
 8006546:	425b      	negs	r3, r3
 8006548:	2100      	movs	r1, #0
 800654a:	0018      	movs	r0, r3
 800654c:	f7ff ff7a 	bl	8006444 <__NVIC_SetPriority>
#endif
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655e:	f3ef 8305 	mrs	r3, IPSR
 8006562:	603b      	str	r3, [r7, #0]
  return(result);
 8006564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800656a:	2306      	movs	r3, #6
 800656c:	425b      	negs	r3, r3
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	e00c      	b.n	800658c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <osKernelInitialize+0x40>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <osKernelInitialize+0x40>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006580:	2300      	movs	r3, #0
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	e002      	b.n	800658c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006586:	2301      	movs	r3, #1
 8006588:	425b      	negs	r3, r3
 800658a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800658c:	687b      	ldr	r3, [r7, #4]
}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b002      	add	sp, #8
 8006594:	bd80      	pop	{r7, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	2000035c 	.word	0x2000035c

0800659c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a2:	f3ef 8305 	mrs	r3, IPSR
 80065a6:	603b      	str	r3, [r7, #0]
  return(result);
 80065a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80065ae:	2306      	movs	r3, #6
 80065b0:	425b      	negs	r3, r3
 80065b2:	607b      	str	r3, [r7, #4]
 80065b4:	e010      	b.n	80065d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <osKernelStart+0x48>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d109      	bne.n	80065d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065be:	f7ff ffbf 	bl	8006540 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065c2:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <osKernelStart+0x48>)
 80065c4:	2202      	movs	r2, #2
 80065c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065c8:	f001 fa0e 	bl	80079e8 <vTaskStartScheduler>
      stat = osOK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	607b      	str	r3, [r7, #4]
 80065d0:	e002      	b.n	80065d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065d2:	2301      	movs	r3, #1
 80065d4:	425b      	negs	r3, r3
 80065d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065d8:	687b      	ldr	r3, [r7, #4]
}
 80065da:	0018      	movs	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	b002      	add	sp, #8
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	2000035c 	.word	0x2000035c

080065e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b08e      	sub	sp, #56	; 0x38
 80065ec:	af04      	add	r7, sp, #16
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f8:	f3ef 8305 	mrs	r3, IPSR
 80065fc:	617b      	str	r3, [r7, #20]
  return(result);
 80065fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006600:	2b00      	cmp	r3, #0
 8006602:	d000      	beq.n	8006606 <osThreadNew+0x1e>
 8006604:	e081      	b.n	800670a <osThreadNew+0x122>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d100      	bne.n	800660e <osThreadNew+0x26>
 800660c:	e07d      	b.n	800670a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006612:	2318      	movs	r3, #24
 8006614:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800661a:	2301      	movs	r3, #1
 800661c:	425b      	negs	r3, r3
 800661e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d044      	beq.n	80066b0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <osThreadNew+0x4c>
        name = attr->name;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <osThreadNew+0x70>
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b38      	cmp	r3, #56	; 0x38
 800664c:	d804      	bhi.n	8006658 <osThreadNew+0x70>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	4013      	ands	r3, r2
 8006656:	d001      	beq.n	800665c <osThreadNew+0x74>
        return (NULL);
 8006658:	2300      	movs	r3, #0
 800665a:	e057      	b.n	800670c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	089b      	lsrs	r3, r3, #2
 800666a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <osThreadNew+0xaa>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2ba7      	cmp	r3, #167	; 0xa7
 800667a:	d90a      	bls.n	8006692 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <osThreadNew+0xaa>
        mem = 1;
 800668c:	2301      	movs	r3, #1
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	e010      	b.n	80066b4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10c      	bne.n	80066b4 <osThreadNew+0xcc>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <osThreadNew+0xcc>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <osThreadNew+0xcc>
          mem = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e001      	b.n	80066b4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d112      	bne.n	80066e0 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066c2:	68bd      	ldr	r5, [r7, #8]
 80066c4:	6a3c      	ldr	r4, [r7, #32]
 80066c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	9201      	str	r2, [sp, #4]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	002b      	movs	r3, r5
 80066d4:	0022      	movs	r2, r4
 80066d6:	f000 ffc8 	bl	800766a <xTaskCreateStatic>
 80066da:	0003      	movs	r3, r0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e014      	b.n	800670a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d111      	bne.n	800670a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68bc      	ldr	r4, [r7, #8]
 80066ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	2310      	movs	r3, #16
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	0023      	movs	r3, r4
 80066fc:	f000 fff9 	bl	80076f2 <xTaskCreate>
 8006700:	0003      	movs	r3, r0
 8006702:	2b01      	cmp	r3, #1
 8006704:	d001      	beq.n	800670a <osThreadNew+0x122>
            hTask = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800670a:	693b      	ldr	r3, [r7, #16]
}
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	b00a      	add	sp, #40	; 0x28
 8006712:	bdb0      	pop	{r4, r5, r7, pc}

08006714 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671c:	f3ef 8305 	mrs	r3, IPSR
 8006720:	60bb      	str	r3, [r7, #8]
  return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <osDelay+0x1c>
    stat = osErrorISR;
 8006728:	2306      	movs	r3, #6
 800672a:	425b      	negs	r3, r3
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	e008      	b.n	8006742 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <osDelay+0x2e>
      vTaskDelay(ticks);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	0018      	movs	r0, r3
 800673e:	f001 f92d 	bl	800799c <vTaskDelay>
    }
  }

  return (stat);
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	0018      	movs	r0, r3
 8006746:	46bd      	mov	sp, r7
 8006748:	b004      	add	sp, #16
 800674a:	bd80      	pop	{r7, pc}

0800674c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006758:	f3ef 8305 	mrs	r3, IPSR
 800675c:	60fb      	str	r3, [r7, #12]
  return(result);
 800675e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006760:	2b00      	cmp	r3, #0
 8006762:	d12f      	bne.n	80067c4 <osEventFlagsNew+0x78>
    mem = -1;
 8006764:	2301      	movs	r3, #1
 8006766:	425b      	negs	r3, r3
 8006768:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <osEventFlagsNew+0x3a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b1f      	cmp	r3, #31
 800677e:	d902      	bls.n	8006786 <osEventFlagsNew+0x3a>
        mem = 1;
 8006780:	2301      	movs	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e00c      	b.n	80067a0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d108      	bne.n	80067a0 <osEventFlagsNew+0x54>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <osEventFlagsNew+0x54>
          mem = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	e001      	b.n	80067a0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d107      	bne.n	80067b6 <osEventFlagsNew+0x6a>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f000 f8e4 	bl	8006978 <xEventGroupCreateStatic>
 80067b0:	0003      	movs	r3, r0
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e006      	b.n	80067c4 <osEventFlagsNew+0x78>
      #endif
    }
    else {
      if (mem == 0) {
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <osEventFlagsNew+0x78>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80067bc:	f000 f901 	bl	80069c2 <xEventGroupCreate>
 80067c0:	0003      	movs	r3, r0
 80067c2:	617b      	str	r3, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80067c4:	697b      	ldr	r3, [r7, #20]
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b006      	add	sp, #24
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <osEventFlagsSet+0x1c>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	0e1b      	lsrs	r3, r3, #24
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	d003      	beq.n	80067f4 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80067ec:	2304      	movs	r3, #4
 80067ee:	425b      	negs	r3, r3
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	e026      	b.n	8006842 <osEventFlagsSet+0x72>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f4:	f3ef 8305 	mrs	r3, IPSR
 80067f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80067fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d018      	beq.n	8006832 <osEventFlagsSet+0x62>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006800:	2300      	movs	r3, #0
 8006802:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006804:	2308      	movs	r3, #8
 8006806:	18fa      	adds	r2, r7, r3
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	0018      	movs	r0, r3
 800680e:	f000 fa41 	bl	8006c94 <xEventGroupSetBitsFromISR>
 8006812:	1e03      	subs	r3, r0, #0
 8006814:	d103      	bne.n	800681e <osEventFlagsSet+0x4e>
      rflags = (uint32_t)osErrorResource;
 8006816:	2303      	movs	r3, #3
 8006818:	425b      	negs	r3, r3
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	e011      	b.n	8006842 <osEventFlagsSet+0x72>
    } else {
      rflags = flags;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <osEventFlagsSet+0x72>
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <osEventFlagsSet+0x7c>)
 800682a:	2280      	movs	r2, #128	; 0x80
 800682c:	0552      	lsls	r2, r2, #21
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e007      	b.n	8006842 <osEventFlagsSet+0x72>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	0011      	movs	r1, r2
 8006838:	0018      	movs	r0, r3
 800683a:	f000 f983 	bl	8006b44 <xEventGroupSetBits>
 800683e:	0003      	movs	r3, r0
 8006840:	617b      	str	r3, [r7, #20]
  }

  return (rflags);
 8006842:	697b      	ldr	r3, [r7, #20]
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b006      	add	sp, #24
 800684a:	bd80      	pop	{r7, pc}
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b08d      	sub	sp, #52	; 0x34
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <osEventFlagsWait+0x20>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	0e1b      	lsrs	r3, r3, #24
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	d003      	beq.n	8006878 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8006870:	2304      	movs	r3, #4
 8006872:	425b      	negs	r3, r3
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	e049      	b.n	800690c <osEventFlagsWait+0xbc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006878:	f3ef 8305 	mrs	r3, IPSR
 800687c:	617b      	str	r3, [r7, #20]
  return(result);
 800687e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8006884:	2306      	movs	r3, #6
 8006886:	425b      	negs	r3, r3
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	e03f      	b.n	800690c <osEventFlagsWait+0xbc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	4013      	ands	r3, r2
 8006892:	d002      	beq.n	800689a <osEventFlagsWait+0x4a>
      wait_all = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
 8006898:	e001      	b.n	800689e <osEventFlagsWait+0x4e>
    } else {
      wait_all = pdFAIL;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	4013      	ands	r3, r2
 80068a4:	d002      	beq.n	80068ac <osEventFlagsWait+0x5c>
      exit_clr = pdFAIL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	e001      	b.n	80068b0 <osEventFlagsWait+0x60>
    } else {
      exit_clr = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80068b0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	69b8      	ldr	r0, [r7, #24]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	0023      	movs	r3, r4
 80068be:	f000 f89b 	bl	80069f8 <xEventGroupWaitBits>
 80068c2:	0003      	movs	r3, r0
 80068c4:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	4013      	ands	r3, r2
 80068cc:	d010      	beq.n	80068f0 <osEventFlagsWait+0xa0>
      if ((flags & rflags) != flags) {
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	4013      	ands	r3, r2
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d018      	beq.n	800690c <osEventFlagsWait+0xbc>
        if (timeout > 0U) {
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <osEventFlagsWait+0x98>
          rflags = (uint32_t)osErrorTimeout;
 80068e0:	2302      	movs	r3, #2
 80068e2:	425b      	negs	r3, r3
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e011      	b.n	800690c <osEventFlagsWait+0xbc>
        } else {
          rflags = (uint32_t)osErrorResource;
 80068e8:	2303      	movs	r3, #3
 80068ea:	425b      	negs	r3, r3
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	e00d      	b.n	800690c <osEventFlagsWait+0xbc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	4013      	ands	r3, r2
 80068f6:	d109      	bne.n	800690c <osEventFlagsWait+0xbc>
        if (timeout > 0U) {
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 80068fe:	2302      	movs	r3, #2
 8006900:	425b      	negs	r3, r3
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	e002      	b.n	800690c <osEventFlagsWait+0xbc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006906:	2303      	movs	r3, #3
 8006908:	425b      	negs	r3, r3
 800690a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800690c:	69fb      	ldr	r3, [r7, #28]
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b00b      	add	sp, #44	; 0x2c
 8006914:	bd90      	pop	{r4, r7, pc}
	...

08006918 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a06      	ldr	r2, [pc, #24]	; (8006940 <vApplicationGetIdleTaskMemory+0x28>)
 8006928:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a05      	ldr	r2, [pc, #20]	; (8006944 <vApplicationGetIdleTaskMemory+0x2c>)
 800692e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	601a      	str	r2, [r3, #0]
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b004      	add	sp, #16
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	20000360 	.word	0x20000360
 8006944:	20000408 	.word	0x20000408

08006948 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a06      	ldr	r2, [pc, #24]	; (8006970 <vApplicationGetTimerTaskMemory+0x28>)
 8006958:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4a05      	ldr	r2, [pc, #20]	; (8006974 <vApplicationGetTimerTaskMemory+0x2c>)
 800695e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	0052      	lsls	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
}
 8006968:	46c0      	nop			; (mov r8, r8)
 800696a:	46bd      	mov	sp, r7
 800696c:	b004      	add	sp, #16
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000608 	.word	0x20000608
 8006974:	200006b0 	.word	0x200006b0

08006978 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xEventGroupCreateStatic+0x12>
 8006986:	b672      	cpsid	i
 8006988:	e7fe      	b.n	8006988 <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800698a:	2320      	movs	r3, #32
 800698c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b20      	cmp	r3, #32
 8006992:	d001      	beq.n	8006998 <xEventGroupCreateStatic+0x20>
 8006994:	b672      	cpsid	i
 8006996:	e7fe      	b.n	8006996 <xEventGroupCreateStatic+0x1e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3304      	adds	r3, #4
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 f987 	bl	8006cc0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80069b8:	68fb      	ldr	r3, [r7, #12]
	}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b004      	add	sp, #16
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80069c8:	2020      	movs	r0, #32
 80069ca:	f002 f9c1 	bl	8008d50 <pvPortMalloc>
 80069ce:	0003      	movs	r3, r0
 80069d0:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 f96c 	bl	8006cc0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80069ee:	687b      	ldr	r3, [r7, #4]
	}
 80069f0:	0018      	movs	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b002      	add	sp, #8
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	; 0x30
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <xEventGroupWaitBits+0x24>
 8006a18:	b672      	cpsid	i
 8006a1a:	e7fe      	b.n	8006a1a <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	0e1b      	lsrs	r3, r3, #24
 8006a20:	061b      	lsls	r3, r3, #24
 8006a22:	d001      	beq.n	8006a28 <xEventGroupWaitBits+0x30>
 8006a24:	b672      	cpsid	i
 8006a26:	e7fe      	b.n	8006a26 <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <xEventGroupWaitBits+0x3a>
 8006a2e:	b672      	cpsid	i
 8006a30:	e7fe      	b.n	8006a30 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a32:	f001 fc43 	bl	80082bc <xTaskGetSchedulerState>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d102      	bne.n	8006a40 <xEventGroupWaitBits+0x48>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xEventGroupWaitBits+0x4c>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xEventGroupWaitBits+0x4e>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <xEventGroupWaitBits+0x56>
 8006a4a:	b672      	cpsid	i
 8006a4c:	e7fe      	b.n	8006a4c <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 8006a4e:	f001 f829 	bl	8007aa4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 f8f8 	bl	8006c54 <prvTestWaitCondition>
 8006a64:	0003      	movs	r3, r0
 8006a66:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02a      	beq.n	8006ad2 <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	43d2      	mvns	r2, r2
 8006a84:	401a      	ands	r2, r3
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e022      	b.n	8006ad2 <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	623b      	str	r3, [r7, #32]
 8006a9a:	e01a      	b.n	8006ad2 <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	2280      	movs	r2, #128	; 0x80
 8006aa6:	0452      	lsls	r2, r2, #17
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	04d2      	lsls	r2, r2, #19
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	1d18      	adds	r0, r3, #4
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac8:	0019      	movs	r1, r3
 8006aca:	f001 f9b9 	bl	8007e40 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006ad2:	f000 fff3 	bl	8007abc <xTaskResumeAll>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02c      	beq.n	8006b3a <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 8006ae6:	f002 f88b 	bl	8008c00 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006aea:	f001 fc5f 	bl	80083ac <uxTaskResetEventItemValue>
 8006aee:	0003      	movs	r3, r0
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	049b      	lsls	r3, r3, #18
 8006af8:	4013      	ands	r3, r2
 8006afa:	d11a      	bne.n	8006b32 <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 8006afc:	f002 f890 	bl	8008c20 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f8a1 	bl	8006c54 <prvTestWaitCondition>
 8006b12:	1e03      	subs	r3, r0, #0
 8006b14:	d009      	beq.n	8006b2a <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	43d2      	mvns	r2, r2
 8006b24:	401a      	ands	r2, r3
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 8006b2e:	f002 f889 	bl	8008c44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b00c      	add	sp, #48	; 0x30
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08c      	sub	sp, #48	; 0x30
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xEventGroupSetBits+0x20>
 8006b60:	b672      	cpsid	i
 8006b62:	e7fe      	b.n	8006b62 <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	0e1b      	lsrs	r3, r3, #24
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	d001      	beq.n	8006b70 <xEventGroupSetBits+0x2c>
 8006b6c:	b672      	cpsid	i
 8006b6e:	e7fe      	b.n	8006b6e <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	3304      	adds	r3, #4
 8006b74:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 8006b7c:	f000 ff92 	bl	8007aa4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006b92:	e03d      	b.n	8006c10 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	0e1b      	lsrs	r3, r3, #24
 8006ba8:	061b      	lsls	r3, r3, #24
 8006baa:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	04db      	lsls	r3, r3, #19
 8006bba:	4013      	ands	r3, r2
 8006bbc:	d107      	bne.n	8006bce <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
 8006bcc:	e008      	b.n	8006be0 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d101      	bne.n	8006be0 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d012      	beq.n	8006c0c <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	045b      	lsls	r3, r3, #17
 8006bec:	4013      	ands	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2280      	movs	r2, #128	; 0x80
 8006bfe:	0492      	lsls	r2, r2, #18
 8006c00:	431a      	orrs	r2, r3
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	0011      	movs	r1, r2
 8006c06:	0018      	movs	r0, r3
 8006c08:	f001 f9ca 	bl	8007fa0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 8006c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d1bd      	bne.n	8006b94 <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1e:	43d2      	mvns	r2, r2
 8006c20:	401a      	ands	r2, r3
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006c26:	f000 ff49 	bl	8007abc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	681b      	ldr	r3, [r3, #0]
}
 8006c2e:	0018      	movs	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b00c      	add	sp, #48	; 0x30
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	0011      	movs	r1, r2
 8006c46:	0018      	movs	r0, r3
 8006c48:	f7ff ff7c 	bl	8006b44 <xEventGroupSetBits>
}
 8006c4c:	46c0      	nop			; (mov r8, r8)
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b002      	add	sp, #8
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	d00a      	beq.n	8006c88 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	e007      	b.n	8006c88 <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d101      	bne.n	8006c88 <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006c88:	697b      	ldr	r3, [r7, #20]
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b006      	add	sp, #24
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	4805      	ldr	r0, [pc, #20]	; (8006cbc <xEventGroupSetBitsFromISR+0x28>)
 8006ca8:	f001 fefc 	bl	8008aa4 <xTimerPendFunctionCallFromISR>
 8006cac:	0003      	movs	r3, r0
 8006cae:	617b      	str	r3, [r7, #20]

		return xReturn;
 8006cb0:	697b      	ldr	r3, [r7, #20]
	}
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b006      	add	sp, #24
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	08006c37 	.word	0x08006c37

08006cc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	001a      	movs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	4252      	negs	r2, r2
 8006cd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	001a      	movs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	001a      	movs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cf4:	46c0      	nop			; (mov r8, r8)
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b002      	add	sp, #8
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b002      	add	sp, #8
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	46bd      	mov	sp, r7
 8006d52:	b004      	add	sp, #16
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	d103      	bne.n	8006d74 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e00c      	b.n	8006d8e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3308      	adds	r3, #8
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e002      	b.n	8006d82 <vListInsert+0x2c>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d2f6      	bcs.n	8006d7c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b004      	add	sp, #16
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6892      	ldr	r2, [r2, #8]
 8006dd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6852      	ldr	r2, [r2, #4]
 8006de2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d103      	bne.n	8006df6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
}
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b004      	add	sp, #16
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <xQueueGenericReset+0x18>
 8006e26:	b672      	cpsid	i
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006e2a:	f001 fef9 	bl	8008c20 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	434b      	muls	r3, r1
 8006e3c:	18d2      	adds	r2, r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	1e59      	subs	r1, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	434b      	muls	r3, r1
 8006e60:	18d2      	adds	r2, r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2244      	movs	r2, #68	; 0x44
 8006e6a:	21ff      	movs	r1, #255	; 0xff
 8006e6c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2245      	movs	r2, #69	; 0x45
 8006e72:	21ff      	movs	r1, #255	; 0xff
 8006e74:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10d      	bne.n	8006e98 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d013      	beq.n	8006eac <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3310      	adds	r3, #16
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f001 f82d 	bl	8007ee8 <xTaskRemoveFromEventList>
 8006e8e:	1e03      	subs	r3, r0, #0
 8006e90:	d00c      	beq.n	8006eac <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e92:	f001 feb5 	bl	8008c00 <vPortYield>
 8006e96:	e009      	b.n	8006eac <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3310      	adds	r3, #16
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7ff ff0f 	bl	8006cc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3324      	adds	r3, #36	; 0x24
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff ff0a 	bl	8006cc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006eac:	f001 feca 	bl	8008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eb0:	2301      	movs	r3, #1
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b004      	add	sp, #16
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006eba:	b590      	push	{r4, r7, lr}
 8006ebc:	b089      	sub	sp, #36	; 0x24
 8006ebe:	af02      	add	r7, sp, #8
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
 8006ec6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <xQueueGenericCreateStatic+0x18>
 8006ece:	b672      	cpsid	i
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <xQueueGenericCreateStatic+0x22>
 8006ed8:	b672      	cpsid	i
 8006eda:	e7fe      	b.n	8006eda <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <xQueueGenericCreateStatic+0x2e>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <xQueueGenericCreateStatic+0x32>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueGenericCreateStatic+0x34>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <xQueueGenericCreateStatic+0x3c>
 8006ef2:	b672      	cpsid	i
 8006ef4:	e7fe      	b.n	8006ef4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <xQueueGenericCreateStatic+0x48>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <xQueueGenericCreateStatic+0x4c>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <xQueueGenericCreateStatic+0x4e>
 8006f06:	2300      	movs	r3, #0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <xQueueGenericCreateStatic+0x56>
 8006f0c:	b672      	cpsid	i
 8006f0e:	e7fe      	b.n	8006f0e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f10:	2350      	movs	r3, #80	; 0x50
 8006f12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b50      	cmp	r3, #80	; 0x50
 8006f18:	d001      	beq.n	8006f1e <xQueueGenericCreateStatic+0x64>
 8006f1a:	b672      	cpsid	i
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f1e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00e      	beq.n	8006f48 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2246      	movs	r2, #70	; 0x46
 8006f2e:	2101      	movs	r1, #1
 8006f30:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f32:	2328      	movs	r3, #40	; 0x28
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	781c      	ldrb	r4, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	0023      	movs	r3, r4
 8006f44:	f000 f805 	bl	8006f52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f48:	697b      	ldr	r3, [r7, #20]
	}
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b007      	add	sp, #28
 8006f50:	bd90      	pop	{r4, r7, pc}

08006f52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	001a      	movs	r2, r3
 8006f60:	1cfb      	adds	r3, r7, #3
 8006f62:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e002      	b.n	8006f78 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2101      	movs	r1, #1
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7ff ff42 	bl	8006e12 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	1cfa      	adds	r2, r7, #3
 8006f92:	214c      	movs	r1, #76	; 0x4c
 8006f94:	7812      	ldrb	r2, [r2, #0]
 8006f96:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <xQueueGenericSend+0x20>
 8006fbc:	b672      	cpsid	i
 8006fbe:	e7fe      	b.n	8006fbe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d103      	bne.n	8006fce <xQueueGenericSend+0x2e>
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <xQueueGenericSend+0x32>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <xQueueGenericSend+0x34>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <xQueueGenericSend+0x3c>
 8006fd8:	b672      	cpsid	i
 8006fda:	e7fe      	b.n	8006fda <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d103      	bne.n	8006fea <xQueueGenericSend+0x4a>
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <xQueueGenericSend+0x4e>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <xQueueGenericSend+0x50>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <xQueueGenericSend+0x58>
 8006ff4:	b672      	cpsid	i
 8006ff6:	e7fe      	b.n	8006ff6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ff8:	f001 f960 	bl	80082bc <xTaskGetSchedulerState>
 8006ffc:	1e03      	subs	r3, r0, #0
 8006ffe:	d102      	bne.n	8007006 <xQueueGenericSend+0x66>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <xQueueGenericSend+0x6a>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <xQueueGenericSend+0x6c>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <xQueueGenericSend+0x74>
 8007010:	b672      	cpsid	i
 8007012:	e7fe      	b.n	8007012 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007014:	f001 fe04 	bl	8008c20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	429a      	cmp	r2, r3
 8007022:	d302      	bcc.n	800702a <xQueueGenericSend+0x8a>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d11e      	bne.n	8007068 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	0018      	movs	r0, r3
 8007032:	f000 f9a2 	bl	800737a <prvCopyDataToQueue>
 8007036:	0003      	movs	r3, r0
 8007038:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	3324      	adds	r3, #36	; 0x24
 8007046:	0018      	movs	r0, r3
 8007048:	f000 ff4e 	bl	8007ee8 <xTaskRemoveFromEventList>
 800704c:	1e03      	subs	r3, r0, #0
 800704e:	d007      	beq.n	8007060 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007050:	f001 fdd6 	bl	8008c00 <vPortYield>
 8007054:	e004      	b.n	8007060 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800705c:	f001 fdd0 	bl	8008c00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007060:	f001 fdf0 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8007064:	2301      	movs	r3, #1
 8007066:	e05b      	b.n	8007120 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800706e:	f001 fde9 	bl	8008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007072:	2300      	movs	r3, #0
 8007074:	e054      	b.n	8007120 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800707c:	2314      	movs	r3, #20
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	0018      	movs	r0, r3
 8007082:	f000 ffdf 	bl	8008044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800708a:	f001 fddb 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800708e:	f000 fd09 	bl	8007aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007092:	f001 fdc5 	bl	8008c20 <vPortEnterCritical>
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	2244      	movs	r2, #68	; 0x44
 800709a:	5c9b      	ldrb	r3, [r3, r2]
 800709c:	b25b      	sxtb	r3, r3
 800709e:	3301      	adds	r3, #1
 80070a0:	d103      	bne.n	80070aa <xQueueGenericSend+0x10a>
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2244      	movs	r2, #68	; 0x44
 80070a6:	2100      	movs	r1, #0
 80070a8:	5499      	strb	r1, [r3, r2]
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	2245      	movs	r2, #69	; 0x45
 80070ae:	5c9b      	ldrb	r3, [r3, r2]
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	3301      	adds	r3, #1
 80070b4:	d103      	bne.n	80070be <xQueueGenericSend+0x11e>
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	2245      	movs	r2, #69	; 0x45
 80070ba:	2100      	movs	r1, #0
 80070bc:	5499      	strb	r1, [r3, r2]
 80070be:	f001 fdc1 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070c2:	1d3a      	adds	r2, r7, #4
 80070c4:	2314      	movs	r3, #20
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	0011      	movs	r1, r2
 80070ca:	0018      	movs	r0, r3
 80070cc:	f000 ffce 	bl	800806c <xTaskCheckForTimeOut>
 80070d0:	1e03      	subs	r3, r0, #0
 80070d2:	d11e      	bne.n	8007112 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	0018      	movs	r0, r3
 80070d8:	f000 fa54 	bl	8007584 <prvIsQueueFull>
 80070dc:	1e03      	subs	r3, r0, #0
 80070de:	d011      	beq.n	8007104 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	3310      	adds	r3, #16
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	0011      	movs	r1, r2
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 fe8b 	bl	8007e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f000 f9d3 	bl	800749c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070f6:	f000 fce1 	bl	8007abc <xTaskResumeAll>
 80070fa:	1e03      	subs	r3, r0, #0
 80070fc:	d18a      	bne.n	8007014 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80070fe:	f001 fd7f 	bl	8008c00 <vPortYield>
 8007102:	e787      	b.n	8007014 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	0018      	movs	r0, r3
 8007108:	f000 f9c8 	bl	800749c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800710c:	f000 fcd6 	bl	8007abc <xTaskResumeAll>
 8007110:	e780      	b.n	8007014 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	0018      	movs	r0, r3
 8007116:	f000 f9c1 	bl	800749c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800711a:	f000 fccf 	bl	8007abc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800711e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007120:	0018      	movs	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	b00a      	add	sp, #40	; 0x28
 8007126:	bd80      	pop	{r7, pc}

08007128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b08b      	sub	sp, #44	; 0x2c
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <xQueueGenericSendFromISR+0x1c>
 8007140:	b672      	cpsid	i
 8007142:	e7fe      	b.n	8007142 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <xQueueGenericSendFromISR+0x2a>
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <xQueueGenericSendFromISR+0x2e>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <xQueueGenericSendFromISR+0x30>
 8007156:	2300      	movs	r3, #0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <xQueueGenericSendFromISR+0x38>
 800715c:	b672      	cpsid	i
 800715e:	e7fe      	b.n	800715e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d103      	bne.n	800716e <xQueueGenericSendFromISR+0x46>
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <xQueueGenericSendFromISR+0x4a>
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <xQueueGenericSendFromISR+0x4c>
 8007172:	2300      	movs	r3, #0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <xQueueGenericSendFromISR+0x54>
 8007178:	b672      	cpsid	i
 800717a:	e7fe      	b.n	800717a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800717c:	f001 fd7a 	bl	8008c74 <ulSetInterruptMaskFromISR>
 8007180:	0003      	movs	r3, r0
 8007182:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718c:	429a      	cmp	r2, r3
 800718e:	d302      	bcc.n	8007196 <xQueueGenericSendFromISR+0x6e>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d131      	bne.n	80071fa <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007196:	241b      	movs	r4, #27
 8007198:	193b      	adds	r3, r7, r4
 800719a:	6a3a      	ldr	r2, [r7, #32]
 800719c:	2145      	movs	r1, #69	; 0x45
 800719e:	5c52      	ldrb	r2, [r2, r1]
 80071a0:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	0018      	movs	r0, r3
 80071b0:	f000 f8e3 	bl	800737a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071b4:	193b      	adds	r3, r7, r4
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b25b      	sxtb	r3, r3
 80071ba:	3301      	adds	r3, #1
 80071bc:	d111      	bne.n	80071e2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	0018      	movs	r0, r3
 80071cc:	f000 fe8c 	bl	8007ee8 <xTaskRemoveFromEventList>
 80071d0:	1e03      	subs	r3, r0, #0
 80071d2:	d00f      	beq.n	80071f4 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e008      	b.n	80071f4 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071e2:	231b      	movs	r3, #27
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	b259      	sxtb	r1, r3
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	2245      	movs	r2, #69	; 0x45
 80071f2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80071f4:	2301      	movs	r3, #1
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80071f8:	e001      	b.n	80071fe <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	0018      	movs	r0, r3
 8007202:	f001 fd3d 	bl	8008c80 <vClearInterruptMaskFromISR>

	return xReturn;
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007208:	0018      	movs	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	b00b      	add	sp, #44	; 0x2c
 800720e:	bd90      	pop	{r4, r7, pc}

08007210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800721c:	2300      	movs	r3, #0
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <xQueueReceive+0x1e>
 800722a:	b672      	cpsid	i
 800722c:	e7fe      	b.n	800722c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <xQueueReceive+0x2c>
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <xQueueReceive+0x30>
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <xQueueReceive+0x32>
 8007240:	2300      	movs	r3, #0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <xQueueReceive+0x3a>
 8007246:	b672      	cpsid	i
 8007248:	e7fe      	b.n	8007248 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800724a:	f001 f837 	bl	80082bc <xTaskGetSchedulerState>
 800724e:	1e03      	subs	r3, r0, #0
 8007250:	d102      	bne.n	8007258 <xQueueReceive+0x48>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <xQueueReceive+0x4c>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <xQueueReceive+0x4e>
 800725c:	2300      	movs	r3, #0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <xQueueReceive+0x56>
 8007262:	b672      	cpsid	i
 8007264:	e7fe      	b.n	8007264 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007266:	f001 fcdb 	bl	8008c20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01a      	beq.n	80072ac <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f000 f8e7 	bl	8007450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	3310      	adds	r3, #16
 8007296:	0018      	movs	r0, r3
 8007298:	f000 fe26 	bl	8007ee8 <xTaskRemoveFromEventList>
 800729c:	1e03      	subs	r3, r0, #0
 800729e:	d001      	beq.n	80072a4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072a0:	f001 fcae 	bl	8008c00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072a4:	f001 fcce 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e062      	b.n	8007372 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072b2:	f001 fcc7 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e05b      	b.n	8007372 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072c0:	2314      	movs	r3, #20
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	0018      	movs	r0, r3
 80072c6:	f000 febd 	bl	8008044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ca:	2301      	movs	r3, #1
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ce:	f001 fcb9 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072d2:	f000 fbe7 	bl	8007aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d6:	f001 fca3 	bl	8008c20 <vPortEnterCritical>
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	2244      	movs	r2, #68	; 0x44
 80072de:	5c9b      	ldrb	r3, [r3, r2]
 80072e0:	b25b      	sxtb	r3, r3
 80072e2:	3301      	adds	r3, #1
 80072e4:	d103      	bne.n	80072ee <xQueueReceive+0xde>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2244      	movs	r2, #68	; 0x44
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2245      	movs	r2, #69	; 0x45
 80072f2:	5c9b      	ldrb	r3, [r3, r2]
 80072f4:	b25b      	sxtb	r3, r3
 80072f6:	3301      	adds	r3, #1
 80072f8:	d103      	bne.n	8007302 <xQueueReceive+0xf2>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2245      	movs	r2, #69	; 0x45
 80072fe:	2100      	movs	r1, #0
 8007300:	5499      	strb	r1, [r3, r2]
 8007302:	f001 fc9f 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007306:	1d3a      	adds	r2, r7, #4
 8007308:	2314      	movs	r3, #20
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	0011      	movs	r1, r2
 800730e:	0018      	movs	r0, r3
 8007310:	f000 feac 	bl	800806c <xTaskCheckForTimeOut>
 8007314:	1e03      	subs	r3, r0, #0
 8007316:	d11e      	bne.n	8007356 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	0018      	movs	r0, r3
 800731c:	f000 f91c 	bl	8007558 <prvIsQueueEmpty>
 8007320:	1e03      	subs	r3, r0, #0
 8007322:	d011      	beq.n	8007348 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	3324      	adds	r3, #36	; 0x24
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	0011      	movs	r1, r2
 800732c:	0018      	movs	r0, r3
 800732e:	f000 fd69 	bl	8007e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	0018      	movs	r0, r3
 8007336:	f000 f8b1 	bl	800749c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800733a:	f000 fbbf 	bl	8007abc <xTaskResumeAll>
 800733e:	1e03      	subs	r3, r0, #0
 8007340:	d191      	bne.n	8007266 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8007342:	f001 fc5d 	bl	8008c00 <vPortYield>
 8007346:	e78e      	b.n	8007266 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	0018      	movs	r0, r3
 800734c:	f000 f8a6 	bl	800749c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007350:	f000 fbb4 	bl	8007abc <xTaskResumeAll>
 8007354:	e787      	b.n	8007266 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 f89f 	bl	800749c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800735e:	f000 fbad 	bl	8007abc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	0018      	movs	r0, r3
 8007366:	f000 f8f7 	bl	8007558 <prvIsQueueEmpty>
 800736a:	1e03      	subs	r3, r0, #0
 800736c:	d100      	bne.n	8007370 <xQueueReceive+0x160>
 800736e:	e77a      	b.n	8007266 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	b00a      	add	sp, #40	; 0x28
 8007378:	bd80      	pop	{r7, pc}

0800737a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10e      	bne.n	80073b6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d14e      	bne.n	800743e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	0018      	movs	r0, r3
 80073a6:	f000 ffa5 	bl	80082f4 <xTaskPriorityDisinherit>
 80073aa:	0003      	movs	r3, r0
 80073ac:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	e043      	b.n	800743e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d119      	bne.n	80073f0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6858      	ldr	r0, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	0019      	movs	r1, r3
 80073c8:	f002 fa9e 	bl	8009908 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	18d2      	adds	r2, r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d32b      	bcc.n	800743e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e026      	b.n	800743e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68d8      	ldr	r0, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	0019      	movs	r1, r3
 80073fc:	f002 fa84 	bl	8009908 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007408:	425b      	negs	r3, r3
 800740a:	18d2      	adds	r2, r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d207      	bcs.n	800742c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	425b      	negs	r3, r3
 8007426:	18d2      	adds	r2, r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d105      	bne.n	800743e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3b01      	subs	r3, #1
 800743c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b006      	add	sp, #24
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d018      	beq.n	8007494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	18d2      	adds	r2, r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d303      	bcc.n	8007484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68d9      	ldr	r1, [r3, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	0018      	movs	r0, r3
 8007490:	f002 fa3a 	bl	8009908 <memcpy>
	}
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b002      	add	sp, #8
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074a4:	f001 fbbc 	bl	8008c20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074a8:	230f      	movs	r3, #15
 80074aa:	18fb      	adds	r3, r7, r3
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	2145      	movs	r1, #69	; 0x45
 80074b0:	5c52      	ldrb	r2, [r2, r1]
 80074b2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074b4:	e013      	b.n	80074de <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3324      	adds	r3, #36	; 0x24
 80074c2:	0018      	movs	r0, r3
 80074c4:	f000 fd10 	bl	8007ee8 <xTaskRemoveFromEventList>
 80074c8:	1e03      	subs	r3, r0, #0
 80074ca:	d001      	beq.n	80074d0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074cc:	f000 fe1e 	bl	800810c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074d0:	210f      	movs	r1, #15
 80074d2:	187b      	adds	r3, r7, r1
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	187b      	adds	r3, r7, r1
 80074dc:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074de:	230f      	movs	r3, #15
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dce5      	bgt.n	80074b6 <prvUnlockQueue+0x1a>
 80074ea:	e000      	b.n	80074ee <prvUnlockQueue+0x52>
					break;
 80074ec:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2245      	movs	r2, #69	; 0x45
 80074f2:	21ff      	movs	r1, #255	; 0xff
 80074f4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80074f6:	f001 fba5 	bl	8008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074fa:	f001 fb91 	bl	8008c20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074fe:	230e      	movs	r3, #14
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	2144      	movs	r1, #68	; 0x44
 8007506:	5c52      	ldrb	r2, [r2, r1]
 8007508:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800750a:	e013      	b.n	8007534 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d016      	beq.n	8007542 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3310      	adds	r3, #16
 8007518:	0018      	movs	r0, r3
 800751a:	f000 fce5 	bl	8007ee8 <xTaskRemoveFromEventList>
 800751e:	1e03      	subs	r3, r0, #0
 8007520:	d001      	beq.n	8007526 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8007522:	f000 fdf3 	bl	800810c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007526:	210e      	movs	r1, #14
 8007528:	187b      	adds	r3, r7, r1
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	3b01      	subs	r3, #1
 800752e:	b2da      	uxtb	r2, r3
 8007530:	187b      	adds	r3, r7, r1
 8007532:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007534:	230e      	movs	r3, #14
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	b25b      	sxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	dce5      	bgt.n	800750c <prvUnlockQueue+0x70>
 8007540:	e000      	b.n	8007544 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8007542:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2244      	movs	r2, #68	; 0x44
 8007548:	21ff      	movs	r1, #255	; 0xff
 800754a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800754c:	f001 fb7a 	bl	8008c44 <vPortExitCritical>
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b004      	add	sp, #16
 8007556:	bd80      	pop	{r7, pc}

08007558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007560:	f001 fb5e 	bl	8008c20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d102      	bne.n	8007572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e001      	b.n	8007576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007576:	f001 fb65 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 800757a:	68fb      	ldr	r3, [r7, #12]
}
 800757c:	0018      	movs	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	b004      	add	sp, #16
 8007582:	bd80      	pop	{r7, pc}

08007584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800758c:	f001 fb48 	bl	8008c20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007598:	429a      	cmp	r2, r3
 800759a:	d102      	bne.n	80075a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e001      	b.n	80075a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075a6:	f001 fb4d 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	0018      	movs	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b004      	add	sp, #16
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e015      	b.n	80075f0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075c4:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <vQueueAddToRegistry+0x4c>)
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	00d2      	lsls	r2, r2, #3
 80075ca:	58d3      	ldr	r3, [r2, r3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <vQueueAddToRegistry+0x4c>)
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	00d2      	lsls	r2, r2, #3
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075da:	4a09      	ldr	r2, [pc, #36]	; (8007600 <vQueueAddToRegistry+0x4c>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	18d3      	adds	r3, r2, r3
 80075e2:	3304      	adds	r3, #4
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075e8:	e006      	b.n	80075f8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b07      	cmp	r3, #7
 80075f4:	d9e6      	bls.n	80075c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075f6:	46c0      	nop			; (mov r8, r8)
 80075f8:	46c0      	nop			; (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b004      	add	sp, #16
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000ab0 	.word	0x20000ab0

08007604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007614:	f001 fb04 	bl	8008c20 <vPortEnterCritical>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2244      	movs	r2, #68	; 0x44
 800761c:	5c9b      	ldrb	r3, [r3, r2]
 800761e:	b25b      	sxtb	r3, r3
 8007620:	3301      	adds	r3, #1
 8007622:	d103      	bne.n	800762c <vQueueWaitForMessageRestricted+0x28>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2244      	movs	r2, #68	; 0x44
 8007628:	2100      	movs	r1, #0
 800762a:	5499      	strb	r1, [r3, r2]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2245      	movs	r2, #69	; 0x45
 8007630:	5c9b      	ldrb	r3, [r3, r2]
 8007632:	b25b      	sxtb	r3, r3
 8007634:	3301      	adds	r3, #1
 8007636:	d103      	bne.n	8007640 <vQueueWaitForMessageRestricted+0x3c>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2245      	movs	r2, #69	; 0x45
 800763c:	2100      	movs	r1, #0
 800763e:	5499      	strb	r1, [r3, r2]
 8007640:	f001 fb00 	bl	8008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	0018      	movs	r0, r3
 8007656:	f000 fc21 	bl	8007e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	0018      	movs	r0, r3
 800765e:	f7ff ff1d 	bl	800749c <prvUnlockQueue>
	}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	46bd      	mov	sp, r7
 8007666:	b006      	add	sp, #24
 8007668:	bd80      	pop	{r7, pc}

0800766a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800766a:	b590      	push	{r4, r7, lr}
 800766c:	b08d      	sub	sp, #52	; 0x34
 800766e:	af04      	add	r7, sp, #16
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <xTaskCreateStatic+0x18>
 800767e:	b672      	cpsid	i
 8007680:	e7fe      	b.n	8007680 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <xTaskCreateStatic+0x22>
 8007688:	b672      	cpsid	i
 800768a:	e7fe      	b.n	800768a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768c:	23a8      	movs	r3, #168	; 0xa8
 800768e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2ba8      	cmp	r3, #168	; 0xa8
 8007694:	d001      	beq.n	800769a <xTaskCreateStatic+0x30>
 8007696:	b672      	cpsid	i
 8007698:	e7fe      	b.n	8007698 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800769a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d020      	beq.n	80076e4 <xTaskCreateStatic+0x7a>
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01d      	beq.n	80076e4 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	22a5      	movs	r2, #165	; 0xa5
 80076b6:	2102      	movs	r1, #2
 80076b8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076ba:	683c      	ldr	r4, [r7, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9303      	str	r3, [sp, #12]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	9302      	str	r3, [sp, #8]
 80076ca:	2318      	movs	r3, #24
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	0023      	movs	r3, r4
 80076d6:	f000 f859 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	0018      	movs	r0, r3
 80076de:	f000 f8f5 	bl	80078cc <prvAddNewTaskToReadyList>
 80076e2:	e001      	b.n	80076e8 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076e8:	69bb      	ldr	r3, [r7, #24]
	}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b009      	add	sp, #36	; 0x24
 80076f0:	bd90      	pop	{r4, r7, pc}

080076f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076f2:	b590      	push	{r4, r7, lr}
 80076f4:	b08d      	sub	sp, #52	; 0x34
 80076f6:	af04      	add	r7, sp, #16
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	1dbb      	adds	r3, r7, #6
 8007700:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007702:	1dbb      	adds	r3, r7, #6
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	0018      	movs	r0, r3
 800770a:	f001 fb21 	bl	8008d50 <pvPortMalloc>
 800770e:	0003      	movs	r3, r0
 8007710:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007718:	20a8      	movs	r0, #168	; 0xa8
 800771a:	f001 fb19 	bl	8008d50 <pvPortMalloc>
 800771e:	0003      	movs	r3, r0
 8007720:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
 800772e:	e006      	b.n	800773e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	0018      	movs	r0, r3
 8007734:	f001 fbb8 	bl	8008ea8 <vPortFree>
 8007738:	e001      	b.n	800773e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01a      	beq.n	800777a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	22a5      	movs	r2, #165	; 0xa5
 8007748:	2100      	movs	r1, #0
 800774a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800774c:	1dbb      	adds	r3, r7, #6
 800774e:	881a      	ldrh	r2, [r3, #0]
 8007750:	683c      	ldr	r4, [r7, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	2300      	movs	r3, #0
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	0023      	movs	r3, r4
 8007768:	f000 f810 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	0018      	movs	r0, r3
 8007770:	f000 f8ac 	bl	80078cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007774:	2301      	movs	r3, #1
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	e002      	b.n	8007780 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800777a:	2301      	movs	r3, #1
 800777c:	425b      	negs	r3, r3
 800777e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007780:	69bb      	ldr	r3, [r7, #24]
	}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	b009      	add	sp, #36	; 0x24
 8007788:	bd90      	pop	{r4, r7, pc}
	...

0800778c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	001a      	movs	r2, r3
 80077a4:	21a5      	movs	r1, #165	; 0xa5
 80077a6:	f002 f825 	bl	80097f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4942      	ldr	r1, [pc, #264]	; (80078bc <prvInitialiseNewTask+0x130>)
 80077b2:	468c      	mov	ip, r1
 80077b4:	4463      	add	r3, ip
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	18d3      	adds	r3, r2, r3
 80077ba:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2207      	movs	r2, #7
 80077c0:	4393      	bics	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2207      	movs	r2, #7
 80077c8:	4013      	ands	r3, r2
 80077ca:	d001      	beq.n	80077d0 <prvInitialiseNewTask+0x44>
 80077cc:	b672      	cpsid	i
 80077ce:	e7fe      	b.n	80077ce <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d020      	beq.n	8007818 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	e013      	b.n	8007804 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	18d3      	adds	r3, r2, r3
 80077e2:	7818      	ldrb	r0, [r3, #0]
 80077e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e6:	2134      	movs	r1, #52	; 0x34
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	18d3      	adds	r3, r2, r3
 80077ec:	185b      	adds	r3, r3, r1
 80077ee:	1c02      	adds	r2, r0, #0
 80077f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	18d3      	adds	r3, r2, r3
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	3301      	adds	r3, #1
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d9e8      	bls.n	80077dc <prvInitialiseNewTask+0x50>
 800780a:	e000      	b.n	800780e <prvInitialiseNewTask+0x82>
			{
				break;
 800780c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	2243      	movs	r2, #67	; 0x43
 8007812:	2100      	movs	r1, #0
 8007814:	5499      	strb	r1, [r3, r2]
 8007816:	e003      	b.n	8007820 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	2234      	movs	r2, #52	; 0x34
 800781c:	2100      	movs	r1, #0
 800781e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	2b37      	cmp	r3, #55	; 0x37
 8007824:	d901      	bls.n	800782a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007826:	2337      	movs	r3, #55	; 0x37
 8007828:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	6a3a      	ldr	r2, [r7, #32]
 800782e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	6a3a      	ldr	r2, [r7, #32]
 8007834:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	2200      	movs	r2, #0
 800783a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	3304      	adds	r3, #4
 8007840:	0018      	movs	r0, r3
 8007842:	f7ff fa5b 	bl	8006cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	3318      	adds	r3, #24
 800784a:	0018      	movs	r0, r3
 800784c:	f7ff fa56 	bl	8006cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007854:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	2238      	movs	r2, #56	; 0x38
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007864:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	22a0      	movs	r2, #160	; 0xa0
 800786a:	2100      	movs	r1, #0
 800786c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	22a4      	movs	r2, #164	; 0xa4
 8007872:	2100      	movs	r1, #0
 8007874:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	3354      	adds	r3, #84	; 0x54
 800787a:	224c      	movs	r2, #76	; 0x4c
 800787c:	2100      	movs	r1, #0
 800787e:	0018      	movs	r0, r3
 8007880:	f001 ffb8 	bl	80097f4 <memset>
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	4a0e      	ldr	r2, [pc, #56]	; (80078c0 <prvInitialiseNewTask+0x134>)
 8007888:	659a      	str	r2, [r3, #88]	; 0x58
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <prvInitialiseNewTask+0x138>)
 800788e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	4a0d      	ldr	r2, [pc, #52]	; (80078c8 <prvInitialiseNewTask+0x13c>)
 8007894:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	0018      	movs	r0, r3
 800789e:	f001 f927 	bl	8008af0 <pxPortInitialiseStack>
 80078a2:	0002      	movs	r2, r0
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b4:	46c0      	nop			; (mov r8, r8)
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b006      	add	sp, #24
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	3fffffff 	.word	0x3fffffff
 80078c0:	20001e94 	.word	0x20001e94
 80078c4:	20001efc 	.word	0x20001efc
 80078c8:	20001f64 	.word	0x20001f64

080078cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078d4:	f001 f9a4 	bl	8008c20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078d8:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <prvAddNewTaskToReadyList+0xb8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	4b29      	ldr	r3, [pc, #164]	; (8007984 <prvAddNewTaskToReadyList+0xb8>)
 80078e0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80078e2:	4b29      	ldr	r3, [pc, #164]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ea:	4b27      	ldr	r3, [pc, #156]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078f0:	4b24      	ldr	r3, [pc, #144]	; (8007984 <prvAddNewTaskToReadyList+0xb8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d110      	bne.n	800791a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078f8:	f000 fc22 	bl	8008140 <prvInitialiseTaskLists>
 80078fc:	e00d      	b.n	800791a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <prvAddNewTaskToReadyList+0xc0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d802      	bhi.n	800791a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007914:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800791a:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <prvAddNewTaskToReadyList+0xc4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <prvAddNewTaskToReadyList+0xc4>)
 8007922:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007924:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <prvAddNewTaskToReadyList+0xc4>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4b18      	ldr	r3, [pc, #96]	; (8007994 <prvAddNewTaskToReadyList+0xc8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d903      	bls.n	8007940 <prvAddNewTaskToReadyList+0x74>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4b15      	ldr	r3, [pc, #84]	; (8007994 <prvAddNewTaskToReadyList+0xc8>)
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	0013      	movs	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	189b      	adds	r3, r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4a12      	ldr	r2, [pc, #72]	; (8007998 <prvAddNewTaskToReadyList+0xcc>)
 800794e:	189a      	adds	r2, r3, r2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	0019      	movs	r1, r3
 8007956:	0010      	movs	r0, r2
 8007958:	f7ff f9db 	bl	8006d12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800795c:	f001 f972 	bl	8008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <prvAddNewTaskToReadyList+0xc0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	429a      	cmp	r2, r3
 8007974:	d201      	bcs.n	800797a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007976:	f001 f943 	bl	8008c00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46bd      	mov	sp, r7
 800797e:	b002      	add	sp, #8
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	20000fc4 	.word	0x20000fc4
 8007988:	20000af0 	.word	0x20000af0
 800798c:	20000fd0 	.word	0x20000fd0
 8007990:	20000fe0 	.word	0x20000fe0
 8007994:	20000fcc 	.word	0x20000fcc
 8007998:	20000af4 	.word	0x20000af4

0800799c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079ae:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <vTaskDelay+0x48>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <vTaskDelay+0x1e>
 80079b6:	b672      	cpsid	i
 80079b8:	e7fe      	b.n	80079b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80079ba:	f000 f873 	bl	8007aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2100      	movs	r1, #0
 80079c2:	0018      	movs	r0, r3
 80079c4:	f000 fd08 	bl	80083d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079c8:	f000 f878 	bl	8007abc <xTaskResumeAll>
 80079cc:	0003      	movs	r3, r0
 80079ce:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80079d6:	f001 f913 	bl	8008c00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	46bd      	mov	sp, r7
 80079de:	b004      	add	sp, #16
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	20000fec 	.word	0x20000fec

080079e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079f6:	003a      	movs	r2, r7
 80079f8:	1d39      	adds	r1, r7, #4
 80079fa:	2308      	movs	r3, #8
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7fe ff8a 	bl	8006918 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a04:	683c      	ldr	r4, [r7, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	491e      	ldr	r1, [pc, #120]	; (8007a84 <vTaskStartScheduler+0x9c>)
 8007a0c:	481e      	ldr	r0, [pc, #120]	; (8007a88 <vTaskStartScheduler+0xa0>)
 8007a0e:	9202      	str	r2, [sp, #8]
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	2300      	movs	r3, #0
 8007a18:	0022      	movs	r2, r4
 8007a1a:	f7ff fe26 	bl	800766a <xTaskCreateStatic>
 8007a1e:	0002      	movs	r2, r0
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <vTaskStartScheduler+0xa4>)
 8007a22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a24:	4b19      	ldr	r3, [pc, #100]	; (8007a8c <vTaskStartScheduler+0xa4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e001      	b.n	8007a36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d103      	bne.n	8007a44 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007a3c:	f000 fd20 	bl	8008480 <xTimerCreateTimerTask>
 8007a40:	0003      	movs	r3, r0
 8007a42:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d113      	bne.n	8007a72 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007a4a:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a4c:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <vTaskStartScheduler+0xa8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3354      	adds	r3, #84	; 0x54
 8007a52:	001a      	movs	r2, r3
 8007a54:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <vTaskStartScheduler+0xac>)
 8007a56:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <vTaskStartScheduler+0xb0>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4252      	negs	r2, r2
 8007a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <vTaskStartScheduler+0xb4>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <vTaskStartScheduler+0xb8>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a6c:	f001 f8a4 	bl	8008bb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a70:	e004      	b.n	8007a7c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	d101      	bne.n	8007a7c <vTaskStartScheduler+0x94>
 8007a78:	b672      	cpsid	i
 8007a7a:	e7fe      	b.n	8007a7a <vTaskStartScheduler+0x92>
}
 8007a7c:	46c0      	nop			; (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b005      	add	sp, #20
 8007a82:	bd90      	pop	{r4, r7, pc}
 8007a84:	080099d4 	.word	0x080099d4
 8007a88:	08008121 	.word	0x08008121
 8007a8c:	20000fe8 	.word	0x20000fe8
 8007a90:	20000af0 	.word	0x20000af0
 8007a94:	20000068 	.word	0x20000068
 8007a98:	20000fe4 	.word	0x20000fe4
 8007a9c:	20000fd0 	.word	0x20000fd0
 8007aa0:	20000fc8 	.word	0x20000fc8

08007aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007aa8:	4b03      	ldr	r3, [pc, #12]	; (8007ab8 <vTaskSuspendAll+0x14>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	4b02      	ldr	r3, [pc, #8]	; (8007ab8 <vTaskSuspendAll+0x14>)
 8007ab0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000fec 	.word	0x20000fec

08007abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aca:	4b3a      	ldr	r3, [pc, #232]	; (8007bb4 <xTaskResumeAll+0xf8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <xTaskResumeAll+0x1a>
 8007ad2:	b672      	cpsid	i
 8007ad4:	e7fe      	b.n	8007ad4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ad6:	f001 f8a3 	bl	8008c20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ada:	4b36      	ldr	r3, [pc, #216]	; (8007bb4 <xTaskResumeAll+0xf8>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	1e5a      	subs	r2, r3, #1
 8007ae0:	4b34      	ldr	r3, [pc, #208]	; (8007bb4 <xTaskResumeAll+0xf8>)
 8007ae2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae4:	4b33      	ldr	r3, [pc, #204]	; (8007bb4 <xTaskResumeAll+0xf8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d15b      	bne.n	8007ba4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007aec:	4b32      	ldr	r3, [pc, #200]	; (8007bb8 <xTaskResumeAll+0xfc>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d057      	beq.n	8007ba4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af4:	e02f      	b.n	8007b56 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af6:	4b31      	ldr	r3, [pc, #196]	; (8007bbc <xTaskResumeAll+0x100>)
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3318      	adds	r3, #24
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7ff f95d 	bl	8006dc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f7ff f958 	bl	8006dc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b16:	4b2a      	ldr	r3, [pc, #168]	; (8007bc0 <xTaskResumeAll+0x104>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d903      	bls.n	8007b26 <xTaskResumeAll+0x6a>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <xTaskResumeAll+0x104>)
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2a:	0013      	movs	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4a24      	ldr	r2, [pc, #144]	; (8007bc4 <xTaskResumeAll+0x108>)
 8007b34:	189a      	adds	r2, r3, r2
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	0010      	movs	r0, r2
 8007b3e:	f7ff f8e8 	bl	8006d12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b46:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <xTaskResumeAll+0x10c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d302      	bcc.n	8007b56 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007b50:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <xTaskResumeAll+0x110>)
 8007b52:	2201      	movs	r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b56:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <xTaskResumeAll+0x100>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1cb      	bne.n	8007af6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b64:	f000 fb8c 	bl	8008280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b68:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <xTaskResumeAll+0x114>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b74:	f000 f83c 	bl	8007bf0 <xTaskIncrementTick>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d002      	beq.n	8007b82 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007b7c:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <xTaskResumeAll+0x110>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f2      	bne.n	8007b74 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8007b8e:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <xTaskResumeAll+0x114>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <xTaskResumeAll+0x110>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ba0:	f001 f82e 	bl	8008c00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba4:	f001 f84e 	bl	8008c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
}
 8007baa:	0018      	movs	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b004      	add	sp, #16
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	20000fec 	.word	0x20000fec
 8007bb8:	20000fc4 	.word	0x20000fc4
 8007bbc:	20000f84 	.word	0x20000f84
 8007bc0:	20000fcc 	.word	0x20000fcc
 8007bc4:	20000af4 	.word	0x20000af4
 8007bc8:	20000af0 	.word	0x20000af0
 8007bcc:	20000fd8 	.word	0x20000fd8
 8007bd0:	20000fd4 	.word	0x20000fd4

08007bd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <xTaskGetTickCount+0x18>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007be0:	687b      	ldr	r3, [r7, #4]
}
 8007be2:	0018      	movs	r0, r3
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b002      	add	sp, #8
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	20000fc8 	.word	0x20000fc8

08007bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bfa:	4b4a      	ldr	r3, [pc, #296]	; (8007d24 <xTaskIncrementTick+0x134>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d000      	beq.n	8007c04 <xTaskIncrementTick+0x14>
 8007c02:	e084      	b.n	8007d0e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c04:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <xTaskIncrementTick+0x138>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c0c:	4b46      	ldr	r3, [pc, #280]	; (8007d28 <xTaskIncrementTick+0x138>)
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d117      	bne.n	8007c48 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c18:	4b44      	ldr	r3, [pc, #272]	; (8007d2c <xTaskIncrementTick+0x13c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <xTaskIncrementTick+0x36>
 8007c22:	b672      	cpsid	i
 8007c24:	e7fe      	b.n	8007c24 <xTaskIncrementTick+0x34>
 8007c26:	4b41      	ldr	r3, [pc, #260]	; (8007d2c <xTaskIncrementTick+0x13c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	4b40      	ldr	r3, [pc, #256]	; (8007d30 <xTaskIncrementTick+0x140>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	4b3e      	ldr	r3, [pc, #248]	; (8007d2c <xTaskIncrementTick+0x13c>)
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	4b3e      	ldr	r3, [pc, #248]	; (8007d30 <xTaskIncrementTick+0x140>)
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	4b3e      	ldr	r3, [pc, #248]	; (8007d34 <xTaskIncrementTick+0x144>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	4b3c      	ldr	r3, [pc, #240]	; (8007d34 <xTaskIncrementTick+0x144>)
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f000 fb1c 	bl	8008280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c48:	4b3b      	ldr	r3, [pc, #236]	; (8007d38 <xTaskIncrementTick+0x148>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d349      	bcc.n	8007ce6 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c52:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <xTaskIncrementTick+0x13c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5c:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <xTaskIncrementTick+0x148>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	4252      	negs	r2, r2
 8007c62:	601a      	str	r2, [r3, #0]
					break;
 8007c64:	e03f      	b.n	8007ce6 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c66:	4b31      	ldr	r3, [pc, #196]	; (8007d2c <xTaskIncrementTick+0x13c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d203      	bcs.n	8007c86 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c7e:	4b2e      	ldr	r3, [pc, #184]	; (8007d38 <xTaskIncrementTick+0x148>)
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c84:	e02f      	b.n	8007ce6 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f7ff f899 	bl	8006dc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f7ff f890 	bl	8006dc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <xTaskIncrementTick+0x14c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d903      	bls.n	8007cb6 <xTaskIncrementTick+0xc6>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	4b22      	ldr	r3, [pc, #136]	; (8007d3c <xTaskIncrementTick+0x14c>)
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	0013      	movs	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	189b      	adds	r3, r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007cc4:	189a      	adds	r2, r3, r2
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	0019      	movs	r1, r3
 8007ccc:	0010      	movs	r0, r2
 8007cce:	f7ff f820 	bl	8006d12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <xTaskIncrementTick+0x154>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d3b8      	bcc.n	8007c52 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce4:	e7b5      	b.n	8007c52 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ce6:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <xTaskIncrementTick+0x154>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	4914      	ldr	r1, [pc, #80]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007cee:	0013      	movs	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	585b      	ldr	r3, [r3, r1]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d901      	bls.n	8007d00 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <xTaskIncrementTick+0x158>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e004      	b.n	8007d18 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <xTaskIncrementTick+0x15c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <xTaskIncrementTick+0x15c>)
 8007d16:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d18:	697b      	ldr	r3, [r7, #20]
}
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b006      	add	sp, #24
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	20000fec 	.word	0x20000fec
 8007d28:	20000fc8 	.word	0x20000fc8
 8007d2c:	20000f7c 	.word	0x20000f7c
 8007d30:	20000f80 	.word	0x20000f80
 8007d34:	20000fdc 	.word	0x20000fdc
 8007d38:	20000fe4 	.word	0x20000fe4
 8007d3c:	20000fcc 	.word	0x20000fcc
 8007d40:	20000af4 	.word	0x20000af4
 8007d44:	20000af0 	.word	0x20000af0
 8007d48:	20000fd8 	.word	0x20000fd8
 8007d4c:	20000fd4 	.word	0x20000fd4

08007d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d56:	4b25      	ldr	r3, [pc, #148]	; (8007dec <vTaskSwitchContext+0x9c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d5e:	4b24      	ldr	r3, [pc, #144]	; (8007df0 <vTaskSwitchContext+0xa0>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d64:	e03d      	b.n	8007de2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8007d66:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <vTaskSwitchContext+0xa0>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6c:	4b21      	ldr	r3, [pc, #132]	; (8007df4 <vTaskSwitchContext+0xa4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	e007      	b.n	8007d84 <vTaskSwitchContext+0x34>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <vTaskSwitchContext+0x2e>
 8007d7a:	b672      	cpsid	i
 8007d7c:	e7fe      	b.n	8007d7c <vTaskSwitchContext+0x2c>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	607b      	str	r3, [r7, #4]
 8007d84:	491c      	ldr	r1, [pc, #112]	; (8007df8 <vTaskSwitchContext+0xa8>)
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	0013      	movs	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	189b      	adds	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	585b      	ldr	r3, [r3, r1]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0ee      	beq.n	8007d74 <vTaskSwitchContext+0x24>
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	0013      	movs	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	189b      	adds	r3, r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <vTaskSwitchContext+0xa8>)
 8007da2:	189b      	adds	r3, r3, r2
 8007da4:	603b      	str	r3, [r7, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	605a      	str	r2, [r3, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d104      	bne.n	8007dc6 <vTaskSwitchContext+0x76>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	605a      	str	r2, [r3, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <vTaskSwitchContext+0xac>)
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <vTaskSwitchContext+0xa4>)
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <vTaskSwitchContext+0xac>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3354      	adds	r3, #84	; 0x54
 8007ddc:	001a      	movs	r2, r3
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <vTaskSwitchContext+0xb0>)
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b002      	add	sp, #8
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	20000fec 	.word	0x20000fec
 8007df0:	20000fd8 	.word	0x20000fd8
 8007df4:	20000fcc 	.word	0x20000fcc
 8007df8:	20000af4 	.word	0x20000af4
 8007dfc:	20000af0 	.word	0x20000af0
 8007e00:	20000068 	.word	0x20000068

08007e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <vTaskPlaceOnEventList+0x14>
 8007e14:	b672      	cpsid	i
 8007e16:	e7fe      	b.n	8007e16 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e18:	4b08      	ldr	r3, [pc, #32]	; (8007e3c <vTaskPlaceOnEventList+0x38>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3318      	adds	r3, #24
 8007e1e:	001a      	movs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	0011      	movs	r1, r2
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fe ff96 	bl	8006d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 fad2 	bl	80083d8 <prvAddCurrentTaskToDelayedList>
}
 8007e34:	46c0      	nop			; (mov r8, r8)
 8007e36:	46bd      	mov	sp, r7
 8007e38:	b002      	add	sp, #8
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20000af0 	.word	0x20000af0

08007e40 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <vTaskPlaceOnUnorderedEventList+0x16>
 8007e52:	b672      	cpsid	i
 8007e54:	e7fe      	b.n	8007e54 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <vTaskPlaceOnUnorderedEventList+0x54>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <vTaskPlaceOnUnorderedEventList+0x22>
 8007e5e:	b672      	cpsid	i
 8007e60:	e7fe      	b.n	8007e60 <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007e62:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <vTaskPlaceOnUnorderedEventList+0x58>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	0609      	lsls	r1, r1, #24
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <vTaskPlaceOnUnorderedEventList+0x58>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3318      	adds	r3, #24
 8007e76:	001a      	movs	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	0011      	movs	r1, r2
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f7fe ff48 	bl	8006d12 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2101      	movs	r1, #1
 8007e86:	0018      	movs	r0, r3
 8007e88:	f000 faa6 	bl	80083d8 <prvAddCurrentTaskToDelayedList>
}
 8007e8c:	46c0      	nop			; (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b004      	add	sp, #16
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000fec 	.word	0x20000fec
 8007e98:	20000af0 	.word	0x20000af0

08007e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <vTaskPlaceOnEventListRestricted+0x16>
 8007eae:	b672      	cpsid	i
 8007eb0:	e7fe      	b.n	8007eb0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <vTaskPlaceOnEventListRestricted+0x48>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	001a      	movs	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7fe ff27 	bl	8006d12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	425b      	negs	r3, r3
 8007ece:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	0011      	movs	r1, r2
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f000 fa7e 	bl	80083d8 <prvAddCurrentTaskToDelayedList>
	}
 8007edc:	46c0      	nop			; (mov r8, r8)
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b004      	add	sp, #16
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000af0 	.word	0x20000af0

08007ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <xTaskRemoveFromEventList+0x1a>
 8007efe:	b672      	cpsid	i
 8007f00:	e7fe      	b.n	8007f00 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	3318      	adds	r3, #24
 8007f06:	0018      	movs	r0, r3
 8007f08:	f7fe ff5b 	bl	8006dc2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f0c:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <xTaskRemoveFromEventList+0xa0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11d      	bne.n	8007f50 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	3304      	adds	r3, #4
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f7fe ff52 	bl	8006dc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <xTaskRemoveFromEventList+0xa4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d903      	bls.n	8007f32 <xTaskRemoveFromEventList+0x4a>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2e:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <xTaskRemoveFromEventList+0xa4>)
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	0013      	movs	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	189b      	adds	r3, r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4a14      	ldr	r2, [pc, #80]	; (8007f90 <xTaskRemoveFromEventList+0xa8>)
 8007f40:	189a      	adds	r2, r3, r2
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	3304      	adds	r3, #4
 8007f46:	0019      	movs	r1, r3
 8007f48:	0010      	movs	r0, r2
 8007f4a:	f7fe fee2 	bl	8006d12 <vListInsertEnd>
 8007f4e:	e007      	b.n	8007f60 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3318      	adds	r3, #24
 8007f54:	001a      	movs	r2, r3
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <xTaskRemoveFromEventList+0xac>)
 8007f58:	0011      	movs	r1, r2
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7fe fed9 	bl	8006d12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <xTaskRemoveFromEventList+0xb0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d905      	bls.n	8007f7a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <xTaskRemoveFromEventList+0xb4>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e001      	b.n	8007f7e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b004      	add	sp, #16
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000fec 	.word	0x20000fec
 8007f8c:	20000fcc 	.word	0x20000fcc
 8007f90:	20000af4 	.word	0x20000af4
 8007f94:	20000f84 	.word	0x20000f84
 8007f98:	20000af0 	.word	0x20000af0
 8007f9c:	20000fd8 	.word	0x20000fd8

08007fa0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007faa:	4b21      	ldr	r3, [pc, #132]	; (8008030 <vTaskRemoveFromUnorderedEventList+0x90>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <vTaskRemoveFromUnorderedEventList+0x16>
 8007fb2:	b672      	cpsid	i
 8007fb4:	e7fe      	b.n	8007fb4 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	0612      	lsls	r2, r2, #24
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <vTaskRemoveFromUnorderedEventList+0x32>
 8007fce:	b672      	cpsid	i
 8007fd0:	e7fe      	b.n	8007fd0 <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	f7fe fef4 	bl	8006dc2 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f7fe feef 	bl	8006dc2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	4b12      	ldr	r3, [pc, #72]	; (8008034 <vTaskRemoveFromUnorderedEventList+0x94>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d903      	bls.n	8007ff8 <vTaskRemoveFromUnorderedEventList+0x58>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <vTaskRemoveFromUnorderedEventList+0x94>)
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	0013      	movs	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	189b      	adds	r3, r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <vTaskRemoveFromUnorderedEventList+0x98>)
 8008006:	189a      	adds	r2, r3, r2
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3304      	adds	r3, #4
 800800c:	0019      	movs	r1, r3
 800800e:	0010      	movs	r0, r2
 8008010:	f7fe fe7f 	bl	8006d12 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	4b08      	ldr	r3, [pc, #32]	; (800803c <vTaskRemoveFromUnorderedEventList+0x9c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	429a      	cmp	r2, r3
 8008020:	d902      	bls.n	8008028 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008022:	4b07      	ldr	r3, [pc, #28]	; (8008040 <vTaskRemoveFromUnorderedEventList+0xa0>)
 8008024:	2201      	movs	r2, #1
 8008026:	601a      	str	r2, [r3, #0]
	}
}
 8008028:	46c0      	nop			; (mov r8, r8)
 800802a:	46bd      	mov	sp, r7
 800802c:	b004      	add	sp, #16
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000fec 	.word	0x20000fec
 8008034:	20000fcc 	.word	0x20000fcc
 8008038:	20000af4 	.word	0x20000af4
 800803c:	20000af0 	.word	0x20000af0
 8008040:	20000fd8 	.word	0x20000fd8

08008044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <vTaskInternalSetTimeOutState+0x20>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <vTaskInternalSetTimeOutState+0x24>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	605a      	str	r2, [r3, #4]
}
 800805c:	46c0      	nop			; (mov r8, r8)
 800805e:	46bd      	mov	sp, r7
 8008060:	b002      	add	sp, #8
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000fdc 	.word	0x20000fdc
 8008068:	20000fc8 	.word	0x20000fc8

0800806c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <xTaskCheckForTimeOut+0x14>
 800807c:	b672      	cpsid	i
 800807e:	e7fe      	b.n	800807e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <xTaskCheckForTimeOut+0x1e>
 8008086:	b672      	cpsid	i
 8008088:	e7fe      	b.n	8008088 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800808a:	f000 fdc9 	bl	8008c20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800808e:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <xTaskCheckForTimeOut+0x98>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	d102      	bne.n	80080ac <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	e024      	b.n	80080f6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	4b15      	ldr	r3, [pc, #84]	; (8008108 <xTaskCheckForTimeOut+0x9c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d007      	beq.n	80080c8 <xTaskCheckForTimeOut+0x5c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d302      	bcc.n	80080c8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080c2:	2301      	movs	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e016      	b.n	80080f6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d20c      	bcs.n	80080ec <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	1ad2      	subs	r2, r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7ff ffaf 	bl	8008044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	e004      	b.n	80080f6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80080f6:	f000 fda5 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 80080fa:	697b      	ldr	r3, [r7, #20]
}
 80080fc:	0018      	movs	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	b006      	add	sp, #24
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000fc8 	.word	0x20000fc8
 8008108:	20000fdc 	.word	0x20000fdc

0800810c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008110:	4b02      	ldr	r3, [pc, #8]	; (800811c <vTaskMissedYield+0x10>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
}
 8008116:	46c0      	nop			; (mov r8, r8)
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20000fd8 	.word	0x20000fd8

08008120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008128:	f000 f84e 	bl	80081c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800812c:	4b03      	ldr	r3, [pc, #12]	; (800813c <prvIdleTask+0x1c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d9f9      	bls.n	8008128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008134:	f000 fd64 	bl	8008c00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008138:	e7f6      	b.n	8008128 <prvIdleTask+0x8>
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	20000af4 	.word	0x20000af4

08008140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008146:	2300      	movs	r3, #0
 8008148:	607b      	str	r3, [r7, #4]
 800814a:	e00c      	b.n	8008166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	0013      	movs	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	189b      	adds	r3, r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4a14      	ldr	r2, [pc, #80]	; (80081a8 <prvInitialiseTaskLists+0x68>)
 8008158:	189b      	adds	r3, r3, r2
 800815a:	0018      	movs	r0, r3
 800815c:	f7fe fdb0 	bl	8006cc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3301      	adds	r3, #1
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b37      	cmp	r3, #55	; 0x37
 800816a:	d9ef      	bls.n	800814c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800816c:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <prvInitialiseTaskLists+0x6c>)
 800816e:	0018      	movs	r0, r3
 8008170:	f7fe fda6 	bl	8006cc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <prvInitialiseTaskLists+0x70>)
 8008176:	0018      	movs	r0, r3
 8008178:	f7fe fda2 	bl	8006cc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <prvInitialiseTaskLists+0x74>)
 800817e:	0018      	movs	r0, r3
 8008180:	f7fe fd9e 	bl	8006cc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <prvInitialiseTaskLists+0x78>)
 8008186:	0018      	movs	r0, r3
 8008188:	f7fe fd9a 	bl	8006cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <prvInitialiseTaskLists+0x7c>)
 800818e:	0018      	movs	r0, r3
 8008190:	f7fe fd96 	bl	8006cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008194:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <prvInitialiseTaskLists+0x80>)
 8008196:	4a05      	ldr	r2, [pc, #20]	; (80081ac <prvInitialiseTaskLists+0x6c>)
 8008198:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800819a:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <prvInitialiseTaskLists+0x84>)
 800819c:	4a04      	ldr	r2, [pc, #16]	; (80081b0 <prvInitialiseTaskLists+0x70>)
 800819e:	601a      	str	r2, [r3, #0]
}
 80081a0:	46c0      	nop			; (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b002      	add	sp, #8
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000af4 	.word	0x20000af4
 80081ac:	20000f54 	.word	0x20000f54
 80081b0:	20000f68 	.word	0x20000f68
 80081b4:	20000f84 	.word	0x20000f84
 80081b8:	20000f98 	.word	0x20000f98
 80081bc:	20000fb0 	.word	0x20000fb0
 80081c0:	20000f7c 	.word	0x20000f7c
 80081c4:	20000f80 	.word	0x20000f80

080081c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ce:	e01a      	b.n	8008206 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80081d0:	f000 fd26 	bl	8008c20 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d4:	4b10      	ldr	r3, [pc, #64]	; (8008218 <prvCheckTasksWaitingTermination+0x50>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3304      	adds	r3, #4
 80081e0:	0018      	movs	r0, r3
 80081e2:	f7fe fdee 	bl	8006dc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081e6:	4b0d      	ldr	r3, [pc, #52]	; (800821c <prvCheckTasksWaitingTermination+0x54>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	1e5a      	subs	r2, r3, #1
 80081ec:	4b0b      	ldr	r3, [pc, #44]	; (800821c <prvCheckTasksWaitingTermination+0x54>)
 80081ee:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <prvCheckTasksWaitingTermination+0x58>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	1e5a      	subs	r2, r3, #1
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <prvCheckTasksWaitingTermination+0x58>)
 80081f8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80081fa:	f000 fd23 	bl	8008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	0018      	movs	r0, r3
 8008202:	f000 f80f 	bl	8008224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008206:	4b06      	ldr	r3, [pc, #24]	; (8008220 <prvCheckTasksWaitingTermination+0x58>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e0      	bne.n	80081d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b002      	add	sp, #8
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000f98 	.word	0x20000f98
 800821c:	20000fc4 	.word	0x20000fc4
 8008220:	20000fac 	.word	0x20000fac

08008224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3354      	adds	r3, #84	; 0x54
 8008230:	0018      	movs	r0, r3
 8008232:	f001 fae7 	bl	8009804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	22a5      	movs	r2, #165	; 0xa5
 800823a:	5c9b      	ldrb	r3, [r3, r2]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d109      	bne.n	8008254 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	0018      	movs	r0, r3
 8008246:	f000 fe2f 	bl	8008ea8 <vPortFree>
				vPortFree( pxTCB );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	0018      	movs	r0, r3
 800824e:	f000 fe2b 	bl	8008ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008252:	e010      	b.n	8008276 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	22a5      	movs	r2, #165	; 0xa5
 8008258:	5c9b      	ldrb	r3, [r3, r2]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d104      	bne.n	8008268 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0018      	movs	r0, r3
 8008262:	f000 fe21 	bl	8008ea8 <vPortFree>
	}
 8008266:	e006      	b.n	8008276 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	22a5      	movs	r2, #165	; 0xa5
 800826c:	5c9b      	ldrb	r3, [r3, r2]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d001      	beq.n	8008276 <prvDeleteTCB+0x52>
 8008272:	b672      	cpsid	i
 8008274:	e7fe      	b.n	8008274 <prvDeleteTCB+0x50>
	}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008286:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <prvResetNextTaskUnblockTime+0x34>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <prvResetNextTaskUnblockTime+0x38>)
 8008292:	2201      	movs	r2, #1
 8008294:	4252      	negs	r2, r2
 8008296:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008298:	e008      	b.n	80082ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <prvResetNextTaskUnblockTime+0x34>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <prvResetNextTaskUnblockTime+0x38>)
 80082aa:	601a      	str	r2, [r3, #0]
}
 80082ac:	46c0      	nop			; (mov r8, r8)
 80082ae:	46bd      	mov	sp, r7
 80082b0:	b002      	add	sp, #8
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000f7c 	.word	0x20000f7c
 80082b8:	20000fe4 	.word	0x20000fe4

080082bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082c2:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <xTaskGetSchedulerState+0x30>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082ca:	2301      	movs	r3, #1
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	e008      	b.n	80082e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <xTaskGetSchedulerState+0x34>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082d8:	2302      	movs	r3, #2
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	e001      	b.n	80082e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082de:	2300      	movs	r3, #0
 80082e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082e2:	687b      	ldr	r3, [r7, #4]
	}
 80082e4:	0018      	movs	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b002      	add	sp, #8
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000fd0 	.word	0x20000fd0
 80082f0:	20000fec 	.word	0x20000fec

080082f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d044      	beq.n	8008394 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800830a:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <xTaskPriorityDisinherit+0xac>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <xTaskPriorityDisinherit+0x24>
 8008314:	b672      	cpsid	i
 8008316:	e7fe      	b.n	8008316 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <xTaskPriorityDisinherit+0x30>
 8008320:	b672      	cpsid	i
 8008322:	e7fe      	b.n	8008322 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008328:	1e5a      	subs	r2, r3, #1
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008336:	429a      	cmp	r2, r3
 8008338:	d02c      	beq.n	8008394 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833e:	2b00      	cmp	r3, #0
 8008340:	d128      	bne.n	8008394 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3304      	adds	r3, #4
 8008346:	0018      	movs	r0, r3
 8008348:	f7fe fd3b 	bl	8006dc2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	2238      	movs	r2, #56	; 0x38
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <xTaskPriorityDisinherit+0xb0>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d903      	bls.n	8008374 <xTaskPriorityDisinherit+0x80>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <xTaskPriorityDisinherit+0xb0>)
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	0013      	movs	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	189b      	adds	r3, r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4a09      	ldr	r2, [pc, #36]	; (80083a8 <xTaskPriorityDisinherit+0xb4>)
 8008382:	189a      	adds	r2, r3, r2
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	3304      	adds	r3, #4
 8008388:	0019      	movs	r1, r3
 800838a:	0010      	movs	r0, r2
 800838c:	f7fe fcc1 	bl	8006d12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008390:	2301      	movs	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008394:	68fb      	ldr	r3, [r7, #12]
	}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b004      	add	sp, #16
 800839c:	bd80      	pop	{r7, pc}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	20000af0 	.word	0x20000af0
 80083a4:	20000fcc 	.word	0x20000fcc
 80083a8:	20000af4 	.word	0x20000af4

080083ac <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80083b2:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <uxTaskResetEventItemValue+0x28>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ba:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <uxTaskResetEventItemValue+0x28>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <uxTaskResetEventItemValue+0x28>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2138      	movs	r1, #56	; 0x38
 80083c6:	1a8a      	subs	r2, r1, r2
 80083c8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80083ca:	687b      	ldr	r3, [r7, #4]
}
 80083cc:	0018      	movs	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	b002      	add	sp, #8
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000af0 	.word	0x20000af0

080083d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083e2:	4b21      	ldr	r3, [pc, #132]	; (8008468 <prvAddCurrentTaskToDelayedList+0x90>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e8:	4b20      	ldr	r3, [pc, #128]	; (800846c <prvAddCurrentTaskToDelayedList+0x94>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3304      	adds	r3, #4
 80083ee:	0018      	movs	r0, r3
 80083f0:	f7fe fce7 	bl	8006dc2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3301      	adds	r3, #1
 80083f8:	d10b      	bne.n	8008412 <prvAddCurrentTaskToDelayedList+0x3a>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d008      	beq.n	8008412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008400:	4b1a      	ldr	r3, [pc, #104]	; (800846c <prvAddCurrentTaskToDelayedList+0x94>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	1d1a      	adds	r2, r3, #4
 8008406:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <prvAddCurrentTaskToDelayedList+0x98>)
 8008408:	0011      	movs	r1, r2
 800840a:	0018      	movs	r0, r3
 800840c:	f7fe fc81 	bl	8006d12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008410:	e026      	b.n	8008460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	18d3      	adds	r3, r2, r3
 8008418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <prvAddCurrentTaskToDelayedList+0x94>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	429a      	cmp	r2, r3
 8008428:	d209      	bcs.n	800843e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <prvAddCurrentTaskToDelayedList+0x94>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3304      	adds	r3, #4
 8008434:	0019      	movs	r1, r3
 8008436:	0010      	movs	r0, r2
 8008438:	f7fe fc8d 	bl	8006d56 <vListInsert>
}
 800843c:	e010      	b.n	8008460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800843e:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <prvAddCurrentTaskToDelayedList+0x94>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3304      	adds	r3, #4
 8008448:	0019      	movs	r1, r3
 800844a:	0010      	movs	r0, r2
 800844c:	f7fe fc83 	bl	8006d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	d202      	bcs.n	8008460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800845a:	4b08      	ldr	r3, [pc, #32]	; (800847c <prvAddCurrentTaskToDelayedList+0xa4>)
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	601a      	str	r2, [r3, #0]
}
 8008460:	46c0      	nop			; (mov r8, r8)
 8008462:	46bd      	mov	sp, r7
 8008464:	b004      	add	sp, #16
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000fc8 	.word	0x20000fc8
 800846c:	20000af0 	.word	0x20000af0
 8008470:	20000fb0 	.word	0x20000fb0
 8008474:	20000f80 	.word	0x20000f80
 8008478:	20000f7c 	.word	0x20000f7c
 800847c:	20000fe4 	.word	0x20000fe4

08008480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800848a:	f000 fac9 	bl	8008a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800848e:	4b17      	ldr	r3, [pc, #92]	; (80084ec <xTimerCreateTimerTask+0x6c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d020      	beq.n	80084d8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008496:	2300      	movs	r3, #0
 8008498:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800849e:	003a      	movs	r2, r7
 80084a0:	1d39      	adds	r1, r7, #4
 80084a2:	2308      	movs	r3, #8
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7fe fa4e 	bl	8006948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084ac:	683c      	ldr	r4, [r7, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	490f      	ldr	r1, [pc, #60]	; (80084f0 <xTimerCreateTimerTask+0x70>)
 80084b4:	480f      	ldr	r0, [pc, #60]	; (80084f4 <xTimerCreateTimerTask+0x74>)
 80084b6:	9202      	str	r2, [sp, #8]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	2302      	movs	r3, #2
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	2300      	movs	r3, #0
 80084c0:	0022      	movs	r2, r4
 80084c2:	f7ff f8d2 	bl	800766a <xTaskCreateStatic>
 80084c6:	0002      	movs	r2, r0
 80084c8:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <xTimerCreateTimerTask+0x78>)
 80084ca:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <xTimerCreateTimerTask+0x78>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80084d4:	2301      	movs	r3, #1
 80084d6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <xTimerCreateTimerTask+0x62>
 80084de:	b672      	cpsid	i
 80084e0:	e7fe      	b.n	80084e0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80084e2:	68fb      	ldr	r3, [r7, #12]
}
 80084e4:	0018      	movs	r0, r3
 80084e6:	46bd      	mov	sp, r7
 80084e8:	b005      	add	sp, #20
 80084ea:	bd90      	pop	{r4, r7, pc}
 80084ec:	20001020 	.word	0x20001020
 80084f0:	080099dc 	.word	0x080099dc
 80084f4:	08008619 	.word	0x08008619
 80084f8:	20001024 	.word	0x20001024

080084fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b08b      	sub	sp, #44	; 0x2c
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <xTimerGenericCommand+0x1c>
 8008514:	b672      	cpsid	i
 8008516:	e7fe      	b.n	8008516 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008518:	4b1c      	ldr	r3, [pc, #112]	; (800858c <xTimerGenericCommand+0x90>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d030      	beq.n	8008582 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008520:	2414      	movs	r4, #20
 8008522:	193b      	adds	r3, r7, r4
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008528:	193b      	adds	r3, r7, r4
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800852e:	193b      	adds	r3, r7, r4
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b05      	cmp	r3, #5
 8008538:	dc19      	bgt.n	800856e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800853a:	f7ff febf 	bl	80082bc <xTaskGetSchedulerState>
 800853e:	0003      	movs	r3, r0
 8008540:	2b02      	cmp	r3, #2
 8008542:	d109      	bne.n	8008558 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008544:	4b11      	ldr	r3, [pc, #68]	; (800858c <xTimerGenericCommand+0x90>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854a:	1939      	adds	r1, r7, r4
 800854c:	2300      	movs	r3, #0
 800854e:	f7fe fd27 	bl	8006fa0 <xQueueGenericSend>
 8008552:	0003      	movs	r3, r0
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
 8008556:	e014      	b.n	8008582 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008558:	4b0c      	ldr	r3, [pc, #48]	; (800858c <xTimerGenericCommand+0x90>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	2314      	movs	r3, #20
 800855e:	18f9      	adds	r1, r7, r3
 8008560:	2300      	movs	r3, #0
 8008562:	2200      	movs	r2, #0
 8008564:	f7fe fd1c 	bl	8006fa0 <xQueueGenericSend>
 8008568:	0003      	movs	r3, r0
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
 800856c:	e009      	b.n	8008582 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800856e:	4b07      	ldr	r3, [pc, #28]	; (800858c <xTimerGenericCommand+0x90>)
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	2314      	movs	r3, #20
 8008576:	18f9      	adds	r1, r7, r3
 8008578:	2300      	movs	r3, #0
 800857a:	f7fe fdd5 	bl	8007128 <xQueueGenericSendFromISR>
 800857e:	0003      	movs	r3, r0
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008584:	0018      	movs	r0, r3
 8008586:	46bd      	mov	sp, r7
 8008588:	b00b      	add	sp, #44	; 0x2c
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	20001020 	.word	0x20001020

08008590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859a:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <prvProcessExpiredTimer+0x84>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3304      	adds	r3, #4
 80085a8:	0018      	movs	r0, r3
 80085aa:	f7fe fc0a 	bl	8006dc2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2228      	movs	r2, #40	; 0x28
 80085b2:	5c9b      	ldrb	r3, [r3, r2]
 80085b4:	001a      	movs	r2, r3
 80085b6:	2304      	movs	r3, #4
 80085b8:	4013      	ands	r3, r2
 80085ba:	d019      	beq.n	80085f0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	699a      	ldr	r2, [r3, #24]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	18d1      	adds	r1, r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 f8c3 	bl	8008754 <prvInsertTimerInActiveList>
 80085ce:	1e03      	subs	r3, r0, #0
 80085d0:	d017      	beq.n	8008602 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	2100      	movs	r1, #0
 80085de:	f7ff ff8d 	bl	80084fc <xTimerGenericCommand>
 80085e2:	0003      	movs	r3, r0
 80085e4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <prvProcessExpiredTimer+0x72>
 80085ec:	b672      	cpsid	i
 80085ee:	e7fe      	b.n	80085ee <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2228      	movs	r2, #40	; 0x28
 80085f4:	5c9b      	ldrb	r3, [r3, r2]
 80085f6:	2201      	movs	r2, #1
 80085f8:	4393      	bics	r3, r2
 80085fa:	b2d9      	uxtb	r1, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2228      	movs	r2, #40	; 0x28
 8008600:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	0010      	movs	r0, r2
 800860a:	4798      	blx	r3
}
 800860c:	46c0      	nop			; (mov r8, r8)
 800860e:	46bd      	mov	sp, r7
 8008610:	b004      	add	sp, #16
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20001018 	.word	0x20001018

08008618 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008620:	2308      	movs	r3, #8
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	0018      	movs	r0, r3
 8008626:	f000 f853 	bl	80086d0 <prvGetNextExpireTime>
 800862a:	0003      	movs	r3, r0
 800862c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	0011      	movs	r1, r2
 8008634:	0018      	movs	r0, r3
 8008636:	f000 f803 	bl	8008640 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800863a:	f000 f8cd 	bl	80087d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800863e:	e7ef      	b.n	8008620 <prvTimerTask+0x8>

08008640 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800864a:	f7ff fa2b 	bl	8007aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800864e:	2308      	movs	r3, #8
 8008650:	18fb      	adds	r3, r7, r3
 8008652:	0018      	movs	r0, r3
 8008654:	f000 f85e 	bl	8008714 <prvSampleTimeNow>
 8008658:	0003      	movs	r3, r0
 800865a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d12b      	bne.n	80086ba <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10c      	bne.n	8008682 <prvProcessTimerOrBlockTask+0x42>
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d808      	bhi.n	8008682 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8008670:	f7ff fa24 	bl	8007abc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	0011      	movs	r1, r2
 800867a:	0018      	movs	r0, r3
 800867c:	f7ff ff88 	bl	8008590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008680:	e01d      	b.n	80086be <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008688:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <prvProcessTimerOrBlockTask+0x88>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <prvProcessTimerOrBlockTask+0x56>
 8008692:	2301      	movs	r3, #1
 8008694:	e000      	b.n	8008698 <prvProcessTimerOrBlockTask+0x58>
 8008696:	2300      	movs	r3, #0
 8008698:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <prvProcessTimerOrBlockTask+0x8c>)
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	0019      	movs	r1, r3
 80086a8:	f7fe ffac 	bl	8007604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ac:	f7ff fa06 	bl	8007abc <xTaskResumeAll>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d104      	bne.n	80086be <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80086b4:	f000 faa4 	bl	8008c00 <vPortYield>
}
 80086b8:	e001      	b.n	80086be <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80086ba:	f7ff f9ff 	bl	8007abc <xTaskResumeAll>
}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b004      	add	sp, #16
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	2000101c 	.word	0x2000101c
 80086cc:	20001020 	.word	0x20001020

080086d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086d8:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <prvGetNextExpireTime+0x40>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <prvGetNextExpireTime+0x16>
 80086e2:	2201      	movs	r2, #1
 80086e4:	e000      	b.n	80086e8 <prvGetNextExpireTime+0x18>
 80086e6:	2200      	movs	r2, #0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d105      	bne.n	8008700 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <prvGetNextExpireTime+0x40>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e001      	b.n	8008704 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008704:	68fb      	ldr	r3, [r7, #12]
}
 8008706:	0018      	movs	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	b004      	add	sp, #16
 800870c:	bd80      	pop	{r7, pc}
 800870e:	46c0      	nop			; (mov r8, r8)
 8008710:	20001018 	.word	0x20001018

08008714 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800871c:	f7ff fa5a 	bl	8007bd4 <xTaskGetTickCount>
 8008720:	0003      	movs	r3, r0
 8008722:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <prvSampleTimeNow+0x3c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	429a      	cmp	r2, r3
 800872c:	d205      	bcs.n	800873a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800872e:	f000 f919 	bl	8008964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	e002      	b.n	8008740 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008740:	4b03      	ldr	r3, [pc, #12]	; (8008750 <prvSampleTimeNow+0x3c>)
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8008746:	68fb      	ldr	r3, [r7, #12]
}
 8008748:	0018      	movs	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	b004      	add	sp, #16
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20001028 	.word	0x20001028

08008754 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	429a      	cmp	r2, r3
 8008778:	d812      	bhi.n	80087a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	429a      	cmp	r2, r3
 8008786:	d302      	bcc.n	800878e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	e01b      	b.n	80087c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800878e:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <prvInsertTimerInActiveList+0x7c>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3304      	adds	r3, #4
 8008796:	0019      	movs	r1, r3
 8008798:	0010      	movs	r0, r2
 800879a:	f7fe fadc 	bl	8006d56 <vListInsert>
 800879e:	e012      	b.n	80087c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d206      	bcs.n	80087b6 <prvInsertTimerInActiveList+0x62>
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d302      	bcc.n	80087b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	e007      	b.n	80087c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087b6:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <prvInsertTimerInActiveList+0x80>)
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	0019      	movs	r1, r3
 80087c0:	0010      	movs	r0, r2
 80087c2:	f7fe fac8 	bl	8006d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087c6:	697b      	ldr	r3, [r7, #20]
}
 80087c8:	0018      	movs	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	b006      	add	sp, #24
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	2000101c 	.word	0x2000101c
 80087d4:	20001018 	.word	0x20001018

080087d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b08d      	sub	sp, #52	; 0x34
 80087dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087de:	e0ac      	b.n	800893a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087e0:	2208      	movs	r2, #8
 80087e2:	18bb      	adds	r3, r7, r2
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da0f      	bge.n	800880a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087ea:	18bb      	adds	r3, r7, r2
 80087ec:	3304      	adds	r3, #4
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <prvProcessReceivedCommands+0x22>
 80087f6:	b672      	cpsid	i
 80087f8:	e7fe      	b.n	80087f8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	6858      	ldr	r0, [r3, #4]
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	0019      	movs	r1, r3
 8008808:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800880a:	2208      	movs	r2, #8
 800880c:	18bb      	adds	r3, r7, r2
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	da00      	bge.n	8008816 <prvProcessReceivedCommands+0x3e>
 8008814:	e091      	b.n	800893a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008816:	18bb      	adds	r3, r7, r2
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	3304      	adds	r3, #4
 8008828:	0018      	movs	r0, r3
 800882a:	f7fe faca 	bl	8006dc2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800882e:	1d3b      	adds	r3, r7, #4
 8008830:	0018      	movs	r0, r3
 8008832:	f7ff ff6f 	bl	8008714 <prvSampleTimeNow>
 8008836:	0003      	movs	r3, r0
 8008838:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800883a:	2308      	movs	r3, #8
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b09      	cmp	r3, #9
 8008842:	d900      	bls.n	8008846 <prvProcessReceivedCommands+0x6e>
 8008844:	e078      	b.n	8008938 <prvProcessReceivedCommands+0x160>
 8008846:	009a      	lsls	r2, r3, #2
 8008848:	4b44      	ldr	r3, [pc, #272]	; (800895c <prvProcessReceivedCommands+0x184>)
 800884a:	18d3      	adds	r3, r2, r3
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	2228      	movs	r2, #40	; 0x28
 8008854:	5c9b      	ldrb	r3, [r3, r2]
 8008856:	2201      	movs	r2, #1
 8008858:	4313      	orrs	r3, r2
 800885a:	b2d9      	uxtb	r1, r3
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2228      	movs	r2, #40	; 0x28
 8008860:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008862:	2408      	movs	r4, #8
 8008864:	193b      	adds	r3, r7, r4
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	18d1      	adds	r1, r2, r3
 800886e:	193b      	adds	r3, r7, r4
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	6a38      	ldr	r0, [r7, #32]
 8008876:	f7ff ff6d 	bl	8008754 <prvInsertTimerInActiveList>
 800887a:	1e03      	subs	r3, r0, #0
 800887c:	d05d      	beq.n	800893a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	6a3a      	ldr	r2, [r7, #32]
 8008884:	0010      	movs	r0, r2
 8008886:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	2228      	movs	r2, #40	; 0x28
 800888c:	5c9b      	ldrb	r3, [r3, r2]
 800888e:	001a      	movs	r2, r3
 8008890:	2304      	movs	r3, #4
 8008892:	4013      	ands	r3, r2
 8008894:	d051      	beq.n	800893a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008896:	193b      	adds	r3, r7, r4
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	18d2      	adds	r2, r2, r3
 80088a0:	6a38      	ldr	r0, [r7, #32]
 80088a2:	2300      	movs	r3, #0
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	2100      	movs	r1, #0
 80088aa:	f7ff fe27 	bl	80084fc <xTimerGenericCommand>
 80088ae:	0003      	movs	r3, r0
 80088b0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d140      	bne.n	800893a <prvProcessReceivedCommands+0x162>
 80088b8:	b672      	cpsid	i
 80088ba:	e7fe      	b.n	80088ba <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	2228      	movs	r2, #40	; 0x28
 80088c0:	5c9b      	ldrb	r3, [r3, r2]
 80088c2:	2201      	movs	r2, #1
 80088c4:	4393      	bics	r3, r2
 80088c6:	b2d9      	uxtb	r1, r3
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2228      	movs	r2, #40	; 0x28
 80088cc:	5499      	strb	r1, [r3, r2]
					break;
 80088ce:	e034      	b.n	800893a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	2228      	movs	r2, #40	; 0x28
 80088d4:	5c9b      	ldrb	r3, [r3, r2]
 80088d6:	2201      	movs	r2, #1
 80088d8:	4313      	orrs	r3, r2
 80088da:	b2d9      	uxtb	r1, r3
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	2228      	movs	r2, #40	; 0x28
 80088e0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088e2:	2308      	movs	r3, #8
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <prvProcessReceivedCommands+0x120>
 80088f4:	b672      	cpsid	i
 80088f6:	e7fe      	b.n	80088f6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	699a      	ldr	r2, [r3, #24]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	18d1      	adds	r1, r2, r3
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	69fa      	ldr	r2, [r7, #28]
 8008904:	6a38      	ldr	r0, [r7, #32]
 8008906:	f7ff ff25 	bl	8008754 <prvInsertTimerInActiveList>
					break;
 800890a:	e016      	b.n	800893a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	2228      	movs	r2, #40	; 0x28
 8008910:	5c9b      	ldrb	r3, [r3, r2]
 8008912:	001a      	movs	r2, r3
 8008914:	2302      	movs	r3, #2
 8008916:	4013      	ands	r3, r2
 8008918:	d104      	bne.n	8008924 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	0018      	movs	r0, r3
 800891e:	f000 fac3 	bl	8008ea8 <vPortFree>
 8008922:	e00a      	b.n	800893a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	2228      	movs	r2, #40	; 0x28
 8008928:	5c9b      	ldrb	r3, [r3, r2]
 800892a:	2201      	movs	r2, #1
 800892c:	4393      	bics	r3, r2
 800892e:	b2d9      	uxtb	r1, r3
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2228      	movs	r2, #40	; 0x28
 8008934:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008936:	e000      	b.n	800893a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8008938:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <prvProcessReceivedCommands+0x188>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2208      	movs	r2, #8
 8008940:	18b9      	adds	r1, r7, r2
 8008942:	2200      	movs	r2, #0
 8008944:	0018      	movs	r0, r3
 8008946:	f7fe fc63 	bl	8007210 <xQueueReceive>
 800894a:	1e03      	subs	r3, r0, #0
 800894c:	d000      	beq.n	8008950 <prvProcessReceivedCommands+0x178>
 800894e:	e747      	b.n	80087e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	b00b      	add	sp, #44	; 0x2c
 8008958:	bd90      	pop	{r4, r7, pc}
 800895a:	46c0      	nop			; (mov r8, r8)
 800895c:	08009b7c 	.word	0x08009b7c
 8008960:	20001020 	.word	0x20001020

08008964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800896a:	e041      	b.n	80089f0 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800896c:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <prvSwitchTimerLists+0xb4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008976:	4b28      	ldr	r3, [pc, #160]	; (8008a18 <prvSwitchTimerLists+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3304      	adds	r3, #4
 8008984:	0018      	movs	r0, r3
 8008986:	f7fe fa1c 	bl	8006dc2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	0010      	movs	r0, r2
 8008992:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2228      	movs	r2, #40	; 0x28
 8008998:	5c9b      	ldrb	r3, [r3, r2]
 800899a:	001a      	movs	r2, r3
 800899c:	2304      	movs	r3, #4
 800899e:	4013      	ands	r3, r2
 80089a0:	d026      	beq.n	80089f0 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	18d3      	adds	r3, r2, r3
 80089aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d90e      	bls.n	80089d2 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089c0:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <prvSwitchTimerLists+0xb4>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3304      	adds	r3, #4
 80089c8:	0019      	movs	r1, r3
 80089ca:	0010      	movs	r0, r2
 80089cc:	f7fe f9c3 	bl	8006d56 <vListInsert>
 80089d0:	e00e      	b.n	80089f0 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	2300      	movs	r3, #0
 80089dc:	2100      	movs	r1, #0
 80089de:	f7ff fd8d 	bl	80084fc <xTimerGenericCommand>
 80089e2:	0003      	movs	r3, r0
 80089e4:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <prvSwitchTimerLists+0x8c>
 80089ec:	b672      	cpsid	i
 80089ee:	e7fe      	b.n	80089ee <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <prvSwitchTimerLists+0xb4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1b8      	bne.n	800896c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <prvSwitchTimerLists+0xb4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <prvSwitchTimerLists+0xb8>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <prvSwitchTimerLists+0xb4>)
 8008a06:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <prvSwitchTimerLists+0xb8>)
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	46bd      	mov	sp, r7
 8008a12:	b006      	add	sp, #24
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	20001018 	.word	0x20001018
 8008a1c:	2000101c 	.word	0x2000101c

08008a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a26:	f000 f8fb 	bl	8008c20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a2a:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <prvCheckForValidListAndQueue+0x64>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d123      	bne.n	8008a7a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <prvCheckForValidListAndQueue+0x68>)
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7fe f943 	bl	8006cc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <prvCheckForValidListAndQueue+0x6c>)
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fe f93f 	bl	8006cc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <prvCheckForValidListAndQueue+0x70>)
 8008a44:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <prvCheckForValidListAndQueue+0x68>)
 8008a46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <prvCheckForValidListAndQueue+0x74>)
 8008a4a:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <prvCheckForValidListAndQueue+0x6c>)
 8008a4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a4e:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <prvCheckForValidListAndQueue+0x78>)
 8008a50:	4a12      	ldr	r2, [pc, #72]	; (8008a9c <prvCheckForValidListAndQueue+0x7c>)
 8008a52:	2100      	movs	r1, #0
 8008a54:	9100      	str	r1, [sp, #0]
 8008a56:	2110      	movs	r1, #16
 8008a58:	200a      	movs	r0, #10
 8008a5a:	f7fe fa2e 	bl	8006eba <xQueueGenericCreateStatic>
 8008a5e:	0002      	movs	r2, r0
 8008a60:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <prvCheckForValidListAndQueue+0x64>)
 8008a62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a64:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <prvCheckForValidListAndQueue+0x64>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d006      	beq.n	8008a7a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <prvCheckForValidListAndQueue+0x64>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a0b      	ldr	r2, [pc, #44]	; (8008aa0 <prvCheckForValidListAndQueue+0x80>)
 8008a72:	0011      	movs	r1, r2
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7fe fd9d 	bl	80075b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a7a:	f000 f8e3 	bl	8008c44 <vPortExitCritical>
}
 8008a7e:	46c0      	nop			; (mov r8, r8)
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20001020 	.word	0x20001020
 8008a88:	20000ff0 	.word	0x20000ff0
 8008a8c:	20001004 	.word	0x20001004
 8008a90:	20001018 	.word	0x20001018
 8008a94:	2000101c 	.word	0x2000101c
 8008a98:	200010cc 	.word	0x200010cc
 8008a9c:	2000102c 	.word	0x2000102c
 8008aa0:	080099e4 	.word	0x080099e4

08008aa4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08a      	sub	sp, #40	; 0x28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008ab2:	2114      	movs	r1, #20
 8008ab4:	187b      	adds	r3, r7, r1
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	4252      	negs	r2, r2
 8008aba:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008abc:	187b      	adds	r3, r7, r1
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008ac2:	187b      	adds	r3, r7, r1
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008ac8:	187b      	adds	r3, r7, r1
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ace:	4b07      	ldr	r3, [pc, #28]	; (8008aec <xTimerPendFunctionCallFromISR+0x48>)
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	1879      	adds	r1, r7, r1
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f7fe fb26 	bl	8007128 <xQueueGenericSendFromISR>
 8008adc:	0003      	movs	r3, r0
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b00a      	add	sp, #40	; 0x28
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	20001020 	.word	0x20001020

08008af0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3b04      	subs	r3, #4
 8008b00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2280      	movs	r2, #128	; 0x80
 8008b06:	0452      	lsls	r2, r2, #17
 8008b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b1c:	4a08      	ldr	r2, [pc, #32]	; (8008b40 <pxPortInitialiseStack+0x50>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b14      	subs	r3, #20
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b20      	subs	r3, #32
 8008b32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b34:	68fb      	ldr	r3, [r7, #12]
}
 8008b36:	0018      	movs	r0, r3
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	b004      	add	sp, #16
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	08008b45 	.word	0x08008b45

08008b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b4e:	4b08      	ldr	r3, [pc, #32]	; (8008b70 <prvTaskExitError+0x2c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	d001      	beq.n	8008b5a <prvTaskExitError+0x16>
 8008b56:	b672      	cpsid	i
 8008b58:	e7fe      	b.n	8008b58 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008b5a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008b5c:	46c0      	nop			; (mov r8, r8)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0fc      	beq.n	8008b5e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b64:	46c0      	nop			; (mov r8, r8)
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b002      	add	sp, #8
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	2000000c 	.word	0x2000000c

08008b74 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008b78:	46c0      	nop			; (mov r8, r8)
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008b80:	4a0b      	ldr	r2, [pc, #44]	; (8008bb0 <pxCurrentTCBConst2>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	3020      	adds	r0, #32
 8008b88:	f380 8809 	msr	PSP, r0
 8008b8c:	2002      	movs	r0, #2
 8008b8e:	f380 8814 	msr	CONTROL, r0
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008b98:	46ae      	mov	lr, r5
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	bc04      	pop	{r2}
 8008b9e:	b662      	cpsie	i
 8008ba0:	4718      	bx	r3
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	46c0      	nop			; (mov r8, r8)
 8008ba6:	46c0      	nop			; (mov r8, r8)
 8008ba8:	46c0      	nop			; (mov r8, r8)
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	46c0      	nop			; (mov r8, r8)
 8008bae:	46c0      	nop			; (mov r8, r8)

08008bb0 <pxCurrentTCBConst2>:
 8008bb0:	20000af0 	.word	0x20000af0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008bb4:	46c0      	nop			; (mov r8, r8)
 8008bb6:	46c0      	nop			; (mov r8, r8)

08008bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <xPortStartScheduler+0x40>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	; (8008bf8 <xPortStartScheduler+0x40>)
 8008bc2:	21ff      	movs	r1, #255	; 0xff
 8008bc4:	0409      	lsls	r1, r1, #16
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bca:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <xPortStartScheduler+0x40>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <xPortStartScheduler+0x40>)
 8008bd0:	21ff      	movs	r1, #255	; 0xff
 8008bd2:	0609      	lsls	r1, r1, #24
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bd8:	f000 f898 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <xPortStartScheduler+0x44>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008be2:	f7ff ffcd 	bl	8008b80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008be6:	f7ff f8b3 	bl	8007d50 <vTaskSwitchContext>
	prvTaskExitError();
 8008bea:	f7ff ffab 	bl	8008b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	e000ed20 	.word	0xe000ed20
 8008bfc:	2000000c 	.word	0x2000000c

08008c00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <vPortYield+0x1c>)
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	0552      	lsls	r2, r2, #21
 8008c0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008c0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008c10:	f3bf 8f6f 	isb	sy
}
 8008c14:	46c0      	nop			; (mov r8, r8)
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	e000ed04 	.word	0xe000ed04

08008c20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8008c24:	b672      	cpsid	i
	uxCriticalNesting++;
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <vPortEnterCritical+0x20>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <vPortEnterCritical+0x20>)
 8008c2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008c30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008c34:	f3bf 8f6f 	isb	sy
}
 8008c38:	46c0      	nop			; (mov r8, r8)
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	2000000c 	.word	0x2000000c

08008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c48:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <vPortExitCritical+0x2c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <vPortExitCritical+0x10>
 8008c50:	b672      	cpsid	i
 8008c52:	e7fe      	b.n	8008c52 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <vPortExitCritical+0x2c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	1e5a      	subs	r2, r3, #1
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <vPortExitCritical+0x2c>)
 8008c5c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <vPortExitCritical+0x2c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d100      	bne.n	8008c68 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8008c66:	b662      	cpsie	i
	}
}
 8008c68:	46c0      	nop			; (mov r8, r8)
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	2000000c 	.word	0x2000000c

08008c74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008c74:	f3ef 8010 	mrs	r0, PRIMASK
 8008c78:	b672      	cpsid	i
 8008c7a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008c7c:	46c0      	nop			; (mov r8, r8)
 8008c7e:	0018      	movs	r0, r3

08008c80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008c80:	f380 8810 	msr	PRIMASK, r0
 8008c84:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008c86:	46c0      	nop			; (mov r8, r8)
	...

08008c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c90:	f3ef 8009 	mrs	r0, PSP
 8008c94:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <pxCurrentTCBConst>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	3820      	subs	r0, #32
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008c9e:	4644      	mov	r4, r8
 8008ca0:	464d      	mov	r5, r9
 8008ca2:	4656      	mov	r6, sl
 8008ca4:	465f      	mov	r7, fp
 8008ca6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008ca8:	b508      	push	{r3, lr}
 8008caa:	b672      	cpsid	i
 8008cac:	f7ff f850 	bl	8007d50 <vTaskSwitchContext>
 8008cb0:	b662      	cpsie	i
 8008cb2:	bc0c      	pop	{r2, r3}
 8008cb4:	6811      	ldr	r1, [r2, #0]
 8008cb6:	6808      	ldr	r0, [r1, #0]
 8008cb8:	3010      	adds	r0, #16
 8008cba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008cbc:	46a0      	mov	r8, r4
 8008cbe:	46a9      	mov	r9, r5
 8008cc0:	46b2      	mov	sl, r6
 8008cc2:	46bb      	mov	fp, r7
 8008cc4:	f380 8809 	msr	PSP, r0
 8008cc8:	3820      	subs	r0, #32
 8008cca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008ccc:	4718      	bx	r3
 8008cce:	46c0      	nop			; (mov r8, r8)

08008cd0 <pxCurrentTCBConst>:
 8008cd0:	20000af0 	.word	0x20000af0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008cd4:	46c0      	nop			; (mov r8, r8)
 8008cd6:	46c0      	nop			; (mov r8, r8)

08008cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cde:	f7ff ffc9 	bl	8008c74 <ulSetInterruptMaskFromISR>
 8008ce2:	0003      	movs	r3, r0
 8008ce4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce6:	f7fe ff83 	bl	8007bf0 <xTaskIncrementTick>
 8008cea:	1e03      	subs	r3, r0, #0
 8008cec:	d003      	beq.n	8008cf6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <xPortSysTickHandler+0x30>)
 8008cf0:	2280      	movs	r2, #128	; 0x80
 8008cf2:	0552      	lsls	r2, r2, #21
 8008cf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff ffc1 	bl	8008c80 <vClearInterruptMaskFromISR>
}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	46bd      	mov	sp, r7
 8008d02:	b002      	add	sp, #8
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	46c0      	nop			; (mov r8, r8)
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	22fa      	movs	r2, #250	; 0xfa
 8008d22:	0091      	lsls	r1, r2, #2
 8008d24:	0018      	movs	r0, r3
 8008d26:	f7f7 f9ef 	bl	8000108 <__udivsi3>
 8008d2a:	0003      	movs	r3, r0
 8008d2c:	001a      	movs	r2, r3
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d30:	3a01      	subs	r2, #1
 8008d32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d36:	2207      	movs	r2, #7
 8008d38:	601a      	str	r2, [r3, #0]
}
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	20000000 	.word	0x20000000
 8008d4c:	e000e014 	.word	0xe000e014

08008d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008d5c:	f7fe fea2 	bl	8007aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d60:	4b4b      	ldr	r3, [pc, #300]	; (8008e90 <pvPortMalloc+0x140>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d68:	f000 f8ec 	bl	8008f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d6c:	4b49      	ldr	r3, [pc, #292]	; (8008e94 <pvPortMalloc+0x144>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	4013      	ands	r3, r2
 8008d74:	d000      	beq.n	8008d78 <pvPortMalloc+0x28>
 8008d76:	e07e      	b.n	8008e76 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d012      	beq.n	8008da4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008d7e:	2208      	movs	r2, #8
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2207      	movs	r2, #7
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	d00a      	beq.n	8008da4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2207      	movs	r2, #7
 8008d92:	4393      	bics	r3, r2
 8008d94:	3308      	adds	r3, #8
 8008d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2207      	movs	r2, #7
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d001      	beq.n	8008da4 <pvPortMalloc+0x54>
 8008da0:	b672      	cpsid	i
 8008da2:	e7fe      	b.n	8008da2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d065      	beq.n	8008e76 <pvPortMalloc+0x126>
 8008daa:	4b3b      	ldr	r3, [pc, #236]	; (8008e98 <pvPortMalloc+0x148>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d860      	bhi.n	8008e76 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008db4:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <pvPortMalloc+0x14c>)
 8008db6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008db8:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <pvPortMalloc+0x14c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dbe:	e004      	b.n	8008dca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d903      	bls.n	8008ddc <pvPortMalloc+0x8c>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1f1      	bne.n	8008dc0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ddc:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <pvPortMalloc+0x140>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d047      	beq.n	8008e76 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2208      	movs	r2, #8
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	2308      	movs	r3, #8
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d916      	bls.n	8008e36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	18d3      	adds	r3, r2, r3
 8008e0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2207      	movs	r2, #7
 8008e14:	4013      	ands	r3, r2
 8008e16:	d001      	beq.n	8008e1c <pvPortMalloc+0xcc>
 8008e18:	b672      	cpsid	i
 8008e1a:	e7fe      	b.n	8008e1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	0018      	movs	r0, r3
 8008e32:	f000 f8e7 	bl	8009004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e36:	4b18      	ldr	r3, [pc, #96]	; (8008e98 <pvPortMalloc+0x148>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <pvPortMalloc+0x148>)
 8008e42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e44:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <pvPortMalloc+0x148>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <pvPortMalloc+0x150>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d203      	bcs.n	8008e58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e50:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <pvPortMalloc+0x148>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <pvPortMalloc+0x150>)
 8008e56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <pvPortMalloc+0x144>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	431a      	orrs	r2, r3
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <pvPortMalloc+0x154>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <pvPortMalloc+0x154>)
 8008e74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e76:	f7fe fe21 	bl	8007abc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2207      	movs	r2, #7
 8008e7e:	4013      	ands	r3, r2
 8008e80:	d001      	beq.n	8008e86 <pvPortMalloc+0x136>
 8008e82:	b672      	cpsid	i
 8008e84:	e7fe      	b.n	8008e84 <pvPortMalloc+0x134>
	return pvReturn;
 8008e86:	68fb      	ldr	r3, [r7, #12]
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b006      	add	sp, #24
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20001d24 	.word	0x20001d24
 8008e94:	20001d38 	.word	0x20001d38
 8008e98:	20001d28 	.word	0x20001d28
 8008e9c:	20001d1c 	.word	0x20001d1c
 8008ea0:	20001d2c 	.word	0x20001d2c
 8008ea4:	20001d30 	.word	0x20001d30

08008ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d03a      	beq.n	8008f30 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eba:	2308      	movs	r3, #8
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	18d3      	adds	r3, r2, r3
 8008ec2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <vPortFree+0x90>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	d101      	bne.n	8008ed8 <vPortFree+0x30>
 8008ed4:	b672      	cpsid	i
 8008ed6:	e7fe      	b.n	8008ed6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <vPortFree+0x3c>
 8008ee0:	b672      	cpsid	i
 8008ee2:	e7fe      	b.n	8008ee2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <vPortFree+0x90>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4013      	ands	r3, r2
 8008eee:	d01f      	beq.n	8008f30 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11b      	bne.n	8008f30 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <vPortFree+0x90>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	43db      	mvns	r3, r3
 8008f02:	401a      	ands	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f08:	f7fe fdcc 	bl	8007aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <vPortFree+0x94>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	18d2      	adds	r2, r2, r3
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <vPortFree+0x94>)
 8008f18:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f000 f871 	bl	8009004 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <vPortFree+0x98>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <vPortFree+0x98>)
 8008f2a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8008f2c:	f7fe fdc6 	bl	8007abc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f30:	46c0      	nop			; (mov r8, r8)
 8008f32:	46bd      	mov	sp, r7
 8008f34:	b004      	add	sp, #16
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20001d38 	.word	0x20001d38
 8008f3c:	20001d28 	.word	0x20001d28
 8008f40:	20001d34 	.word	0x20001d34

08008f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f4a:	23c0      	movs	r3, #192	; 0xc0
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f50:	4b26      	ldr	r3, [pc, #152]	; (8008fec <prvHeapInit+0xa8>)
 8008f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2207      	movs	r2, #7
 8008f58:	4013      	ands	r3, r2
 8008f5a:	d00c      	beq.n	8008f76 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3307      	adds	r3, #7
 8008f60:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2207      	movs	r2, #7
 8008f66:	4393      	bics	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	4b1e      	ldr	r3, [pc, #120]	; (8008fec <prvHeapInit+0xa8>)
 8008f72:	18d3      	adds	r3, r2, r3
 8008f74:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <prvHeapInit+0xac>)
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f80:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <prvHeapInit+0xac>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	18d3      	adds	r3, r2, r3
 8008f8c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f8e:	2208      	movs	r2, #8
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	1a9b      	subs	r3, r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2207      	movs	r2, #7
 8008f9a:	4393      	bics	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <prvHeapInit+0xb0>)
 8008fa2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <prvHeapInit+0xb0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <prvHeapInit+0xb0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	1ad2      	subs	r2, r2, r3
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <prvHeapInit+0xb0>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <prvHeapInit+0xb4>)
 8008fd0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <prvHeapInit+0xb8>)
 8008fd8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <prvHeapInit+0xbc>)
 8008fdc:	2280      	movs	r2, #128	; 0x80
 8008fde:	0612      	lsls	r2, r2, #24
 8008fe0:	601a      	str	r2, [r3, #0]
}
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	b004      	add	sp, #16
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	46c0      	nop			; (mov r8, r8)
 8008fec:	2000111c 	.word	0x2000111c
 8008ff0:	20001d1c 	.word	0x20001d1c
 8008ff4:	20001d24 	.word	0x20001d24
 8008ff8:	20001d2c 	.word	0x20001d2c
 8008ffc:	20001d28 	.word	0x20001d28
 8009000:	20001d38 	.word	0x20001d38

08009004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800900c:	4b27      	ldr	r3, [pc, #156]	; (80090ac <prvInsertBlockIntoFreeList+0xa8>)
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	e002      	b.n	8009018 <prvInsertBlockIntoFreeList+0x14>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	429a      	cmp	r2, r3
 8009020:	d8f7      	bhi.n	8009012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d108      	bne.n	8009046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	18d2      	adds	r2, r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	18d2      	adds	r2, r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d118      	bne.n	800908c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <prvInsertBlockIntoFreeList+0xac>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d00d      	beq.n	8009082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	18d2      	adds	r2, r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	e008      	b.n	8009094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009082:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <prvInsertBlockIntoFreeList+0xac>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e003      	b.n	8009094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	429a      	cmp	r2, r3
 800909a:	d002      	beq.n	80090a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	46bd      	mov	sp, r7
 80090a6:	b004      	add	sp, #16
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	20001d1c 	.word	0x20001d1c
 80090b0:	20001d24 	.word	0x20001d24

080090b4 <AdcTask_init>:
static void AdcTask_convert(adc_shared_memory_t *pHandle);

static adc_shared_memory_t handle_adc;

int AdcTask_init(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af00      	add	r7, sp, #0
	osThreadId_t AdcTask;
    const osThreadAttr_t AdcTask_attributes = {
 80090ba:	003b      	movs	r3, r7
 80090bc:	0018      	movs	r0, r3
 80090be:	2324      	movs	r3, #36	; 0x24
 80090c0:	001a      	movs	r2, r3
 80090c2:	2100      	movs	r1, #0
 80090c4:	f000 fb96 	bl	80097f4 <memset>
 80090c8:	003b      	movs	r3, r7
 80090ca:	4a10      	ldr	r2, [pc, #64]	; (800910c <AdcTask_init+0x58>)
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	003b      	movs	r3, r7
 80090d0:	2280      	movs	r2, #128	; 0x80
 80090d2:	0092      	lsls	r2, r2, #2
 80090d4:	615a      	str	r2, [r3, #20]
 80090d6:	003b      	movs	r3, r7
 80090d8:	2219      	movs	r2, #25
 80090da:	619a      	str	r2, [r3, #24]
        .name = "AdcTask",
        .priority = (osPriority_t) osPriorityNormal1,
        .stack_size = 128 * 4
    };
	AdcTask = osThreadNew(AdcTask_main, NULL, &AdcTask_attributes);
 80090dc:	003a      	movs	r2, r7
 80090de:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <AdcTask_init+0x5c>)
 80090e0:	2100      	movs	r1, #0
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7fd fa80 	bl	80065e8 <osThreadNew>
 80090e8:	0003      	movs	r3, r0
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
	(void)AdcTask;

    ADC_Calibrate(&hadc1);
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <AdcTask_init+0x60>)
 80090ee:	0018      	movs	r0, r3
 80090f0:	f000 fb3c 	bl	800976c <ADC_Calibrate>
    ADC_Start(&hadc1, (uint32_t *)handle_adc.adc_raw_results, 5);
 80090f4:	4908      	ldr	r1, [pc, #32]	; (8009118 <AdcTask_init+0x64>)
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <AdcTask_init+0x60>)
 80090f8:	2205      	movs	r2, #5
 80090fa:	0018      	movs	r0, r3
 80090fc:	f000 fb43 	bl	8009786 <ADC_Start>

    return 1;
 8009100:	2301      	movs	r3, #1
}
 8009102:	0018      	movs	r0, r3
 8009104:	46bd      	mov	sp, r7
 8009106:	b00a      	add	sp, #40	; 0x28
 8009108:	bd80      	pop	{r7, pc}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	080099ec 	.word	0x080099ec
 8009110:	08009195 	.word	0x08009195
 8009114:	2000008c 	.word	0x2000008c
 8009118:	20001d3c 	.word	0x20001d3c

0800911c <AdcGet_voltage>:

uint16_t AdcGet_voltage(VoltageID id)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	0002      	movs	r2, r0
 8009124:	1dfb      	adds	r3, r7, #7
 8009126:	701a      	strb	r2, [r3, #0]
	return handle_adc.voltage_results[id];
 8009128:	1dfb      	adds	r3, r7, #7
 800912a:	781a      	ldrb	r2, [r3, #0]
 800912c:	4b03      	ldr	r3, [pc, #12]	; (800913c <AdcGet_voltage+0x20>)
 800912e:	320c      	adds	r2, #12
 8009130:	0052      	lsls	r2, r2, #1
 8009132:	5ad3      	ldrh	r3, [r2, r3]
}
 8009134:	0018      	movs	r0, r3
 8009136:	46bd      	mov	sp, r7
 8009138:	b002      	add	sp, #8
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20001d3c 	.word	0x20001d3c

08009140 <AdcGet_temperature>:

uint16_t AdcGet_temperature(TemperatureID id)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	0002      	movs	r2, r0
 8009148:	1dfb      	adds	r3, r7, #7
 800914a:	701a      	strb	r2, [r3, #0]
    return handle_adc.temperature_results[id];
 800914c:	1dfb      	adds	r3, r7, #7
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <AdcGet_temperature+0x24>)
 8009152:	3310      	adds	r3, #16
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	18d3      	adds	r3, r2, r3
 8009158:	3302      	adds	r3, #2
 800915a:	881b      	ldrh	r3, [r3, #0]
}
 800915c:	0018      	movs	r0, r3
 800915e:	46bd      	mov	sp, r7
 8009160:	b002      	add	sp, #8
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20001d3c 	.word	0x20001d3c

08009168 <AdcGet_current>:

uint16_t AdcGet_current(CurrentID id)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	0002      	movs	r2, r0
 8009170:	1dfb      	adds	r3, r7, #7
 8009172:	701a      	strb	r2, [r3, #0]
    return handle_adc.current_results[id];
 8009174:	1dfb      	adds	r3, r7, #7
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	4a05      	ldr	r2, [pc, #20]	; (8009190 <AdcGet_current+0x28>)
 800917a:	3314      	adds	r3, #20
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	18d3      	adds	r3, r2, r3
 8009180:	3304      	adds	r3, #4
 8009182:	2200      	movs	r2, #0
 8009184:	5e9b      	ldrsh	r3, [r3, r2]
 8009186:	b29b      	uxth	r3, r3
}
 8009188:	0018      	movs	r0, r3
 800918a:	46bd      	mov	sp, r7
 800918c:	b002      	add	sp, #8
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20001d3c 	.word	0x20001d3c

08009194 <AdcTask_main>:

static void AdcTask_main(void *argument){
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        AdcTask_convert(&handle_adc);
 800919c:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <AdcTask_main+0x1c>)
 800919e:	0018      	movs	r0, r3
 80091a0:	f000 f808 	bl	80091b4 <AdcTask_convert>
        osDelay(1000);
 80091a4:	23fa      	movs	r3, #250	; 0xfa
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	0018      	movs	r0, r3
 80091aa:	f7fd fab3 	bl	8006714 <osDelay>
        AdcTask_convert(&handle_adc);
 80091ae:	e7f5      	b.n	800919c <AdcTask_main+0x8>
 80091b0:	20001d3c 	.word	0x20001d3c

080091b4 <AdcTask_convert>:
    }
}

static void AdcTask_convert(adc_shared_memory_t *pHandle){
 80091b4:	b590      	push	{r4, r7, lr}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
    pHandle->voltage_results[VOLTAGE_VREFINT] = VDDA*VREFINT_CAL*1000/pHandle->adc_raw_results[4];
 80091bc:	4b29      	ldr	r3, [pc, #164]	; (8009264 <AdcTask_convert+0xb0>)
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	0018      	movs	r0, r3
 80091c2:	f7f7 fe41 	bl	8000e48 <__aeabi_i2f>
 80091c6:	1c03      	adds	r3, r0, #0
 80091c8:	4927      	ldr	r1, [pc, #156]	; (8009268 <AdcTask_convert+0xb4>)
 80091ca:	1c18      	adds	r0, r3, #0
 80091cc:	f7f7 fb2e 	bl	800082c <__aeabi_fmul>
 80091d0:	1c03      	adds	r3, r0, #0
 80091d2:	4926      	ldr	r1, [pc, #152]	; (800926c <AdcTask_convert+0xb8>)
 80091d4:	1c18      	adds	r0, r3, #0
 80091d6:	f7f7 fb29 	bl	800082c <__aeabi_fmul>
 80091da:	1c03      	adds	r3, r0, #0
 80091dc:	1c1c      	adds	r4, r3, #0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	891b      	ldrh	r3, [r3, #8]
 80091e2:	0018      	movs	r0, r3
 80091e4:	f7f7 fe30 	bl	8000e48 <__aeabi_i2f>
 80091e8:	1c03      	adds	r3, r0, #0
 80091ea:	1c19      	adds	r1, r3, #0
 80091ec:	1c20      	adds	r0, r4, #0
 80091ee:	f7f7 f953 	bl	8000498 <__aeabi_fdiv>
 80091f2:	1c03      	adds	r3, r0, #0
 80091f4:	1c18      	adds	r0, r3, #0
 80091f6:	f7f7 f937 	bl	8000468 <__aeabi_f2uiz>
 80091fa:	0003      	movs	r3, r0
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	841a      	strh	r2, [r3, #32]

    for (uint8_t i = VOLTAGE_BAT1; i < VOLTAGE_ADAPTER ; i++){
 8009202:	230f      	movs	r3, #15
 8009204:	18fb      	adds	r3, r7, r3
 8009206:	2200      	movs	r2, #0
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e020      	b.n	800924e <AdcTask_convert+0x9a>
        pHandle->voltage_results[i] = pHandle->adc_raw_results[i] * pHandle->voltage_results[VOLTAGE_VREFINT] * VOLTAGE_SCALE/ADC_FULL_SCALE;
 800920c:	240f      	movs	r4, #15
 800920e:	193b      	adds	r3, r7, r4
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	0052      	lsls	r2, r2, #1
 8009216:	5ad3      	ldrh	r3, [r2, r3]
 8009218:	001a      	movs	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	8c1b      	ldrh	r3, [r3, #32]
 800921e:	435a      	muls	r2, r3
 8009220:	0013      	movs	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	189b      	adds	r3, r3, r2
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	189b      	adds	r3, r3, r2
 800922a:	4911      	ldr	r1, [pc, #68]	; (8009270 <AdcTask_convert+0xbc>)
 800922c:	0018      	movs	r0, r3
 800922e:	f7f6 fff5 	bl	800021c <__divsi3>
 8009232:	0003      	movs	r3, r0
 8009234:	0019      	movs	r1, r3
 8009236:	193b      	adds	r3, r7, r4
 8009238:	781a      	ldrb	r2, [r3, #0]
 800923a:	b289      	uxth	r1, r1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	320c      	adds	r2, #12
 8009240:	0052      	lsls	r2, r2, #1
 8009242:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = VOLTAGE_BAT1; i < VOLTAGE_ADAPTER ; i++){
 8009244:	193b      	adds	r3, r7, r4
 8009246:	781a      	ldrb	r2, [r3, #0]
 8009248:	193b      	adds	r3, r7, r4
 800924a:	3201      	adds	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	230f      	movs	r3, #15
 8009250:	18fb      	adds	r3, r7, r3
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d9d9      	bls.n	800920c <AdcTask_convert+0x58>

    for (uint8_t i = CURRENT_BAT1; i < CURRENT_CHARGE + 1; i++){
        current_results[i] = adc_raw_results[ADC_CUR_BAT1 + i];
    }
    */
}
 8009258:	46c0      	nop			; (mov r8, r8)
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	46bd      	mov	sp, r7
 800925e:	b005      	add	sp, #20
 8009260:	bd90      	pop	{r4, r7, pc}
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	1fff75aa 	.word	0x1fff75aa
 8009268:	40400000 	.word	0x40400000
 800926c:	447a0000 	.word	0x447a0000
 8009270:	00000fff 	.word	0x00000fff

08009274 <BattControllerTask_init>:
bool flag_OVC = false, flag_OVV = false;

static void BattController_main(void *argument);
static void BattControllerApp_update(void);

int BattControllerTask_init(void){
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
    const osThreadAttr_t BattControlTask_attributes = {
 800927a:	1d3b      	adds	r3, r7, #4
 800927c:	0018      	movs	r0, r3
 800927e:	2324      	movs	r3, #36	; 0x24
 8009280:	001a      	movs	r2, r3
 8009282:	2100      	movs	r1, #0
 8009284:	f000 fab6 	bl	80097f4 <memset>
 8009288:	1d3b      	adds	r3, r7, #4
 800928a:	4a0b      	ldr	r2, [pc, #44]	; (80092b8 <BattControllerTask_init+0x44>)
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	1d3b      	adds	r3, r7, #4
 8009290:	2280      	movs	r2, #128	; 0x80
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	615a      	str	r2, [r3, #20]
 8009296:	1d3b      	adds	r3, r7, #4
 8009298:	2218      	movs	r2, #24
 800929a:	619a      	str	r2, [r3, #24]
        .name = "BattControlTask",
        .priority = (osPriority_t) osPriorityNormal,
        .stack_size = 128 * 4
    };
    BattControllerTask = osThreadNew(BattController_main, NULL, &BattControlTask_attributes);
 800929c:	1d3a      	adds	r2, r7, #4
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <BattControllerTask_init+0x48>)
 80092a0:	2100      	movs	r1, #0
 80092a2:	0018      	movs	r0, r3
 80092a4:	f7fd f9a0 	bl	80065e8 <osThreadNew>
 80092a8:	0002      	movs	r2, r0
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <BattControllerTask_init+0x4c>)
 80092ac:	601a      	str	r2, [r3, #0]
	(void)BattControllerTask;

	return 1;
 80092ae:	2301      	movs	r3, #1
}
 80092b0:	0018      	movs	r0, r3
 80092b2:	46bd      	mov	sp, r7
 80092b4:	b00a      	add	sp, #40	; 0x28
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	080099f4 	.word	0x080099f4
 80092bc:	080092c5 	.word	0x080092c5
 80092c0:	20001d6c 	.word	0x20001d6c

080092c4 <BattController_main>:

static void BattController_main(void *argument){
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	while (1){
		float voltage = AdcGet_voltage(VOLTAGE_BAT1)/1000.0;
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7ff ff25 	bl	800911c <AdcGet_voltage>
 80092d2:	0003      	movs	r3, r0
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7f8 f8f7 	bl	80014c8 <__aeabi_i2d>
 80092da:	2200      	movs	r2, #0
 80092dc:	4b11      	ldr	r3, [pc, #68]	; (8009324 <BattController_main+0x60>)
 80092de:	f7f7 fe05 	bl	8000eec <__aeabi_ddiv>
 80092e2:	0002      	movs	r2, r0
 80092e4:	000b      	movs	r3, r1
 80092e6:	0010      	movs	r0, r2
 80092e8:	0019      	movs	r1, r3
 80092ea:	f7f8 f91d 	bl	8001528 <__aeabi_d2f>
 80092ee:	1c03      	adds	r3, r0, #0
 80092f0:	60fb      	str	r3, [r7, #12]
		if (voltage > OVER_VOLTAGE) {
 80092f2:	490d      	ldr	r1, [pc, #52]	; (8009328 <BattController_main+0x64>)
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f7f7 f8a3 	bl	8000440 <__aeabi_fcmpgt>
 80092fa:	1e03      	subs	r3, r0, #0
 80092fc:	d003      	beq.n	8009306 <BattController_main+0x42>
			flag_OVV = true;
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <BattController_main+0x68>)
 8009300:	2201      	movs	r2, #1
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e008      	b.n	8009318 <BattController_main+0x54>
		}
		else if (voltage > VBAT_MAX){
 8009306:	490a      	ldr	r1, [pc, #40]	; (8009330 <BattController_main+0x6c>)
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7f7 f899 	bl	8000440 <__aeabi_fcmpgt>
 800930e:	1e03      	subs	r3, r0, #0
 8009310:	d002      	beq.n	8009318 <BattController_main+0x54>
			flag_OVV = false;
 8009312:	4b06      	ldr	r3, [pc, #24]	; (800932c <BattController_main+0x68>)
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
		}
		else if (voltage > V_THRESHOLD)
		{
//			Max1538_set_state(MAX1538_STATE_CHARGE_A);
		}
		osDelay(2000);
 8009318:	23fa      	movs	r3, #250	; 0xfa
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	0018      	movs	r0, r3
 800931e:	f7fd f9f9 	bl	8006714 <osDelay>
	while (1){
 8009322:	e7d3      	b.n	80092cc <BattController_main+0x8>
 8009324:	408f4000 	.word	0x408f4000
 8009328:	41500000 	.word	0x41500000
 800932c:	20001d70 	.word	0x20001d70
 8009330:	41480000 	.word	0x41480000

08009334 <heralink_main_init>:
#include "spi_slave.h"
#include "max1538.h"
#include "adc_convert.h"

int heralink_main_init (void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
	AdcTask_init();
 8009338:	f7ff febc 	bl	80090b4 <AdcTask_init>
	SlTask_init();
 800933c:	f000 f806 	bl	800934c <SlTask_init>
	BattControllerTask_init();
 8009340:	f7ff ff98 	bl	8009274 <BattControllerTask_init>
}
 8009344:	46c0      	nop			; (mov r8, r8)
 8009346:	0018      	movs	r0, r3
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <SlTask_init>:
	WRITE_FLAG,
	READ_FLAG
};

int SlTask_init(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af00      	add	r7, sp, #0
	osThreadId_t SlaveTask;
	const osThreadAttr_t SlaveTask_attributes = {
 8009352:	003b      	movs	r3, r7
 8009354:	0018      	movs	r0, r3
 8009356:	2324      	movs	r3, #36	; 0x24
 8009358:	001a      	movs	r2, r3
 800935a:	2100      	movs	r1, #0
 800935c:	f000 fa4a 	bl	80097f4 <memset>
 8009360:	003b      	movs	r3, r7
 8009362:	4a0e      	ldr	r2, [pc, #56]	; (800939c <SlTask_init+0x50>)
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	003b      	movs	r3, r7
 8009368:	22a0      	movs	r2, #160	; 0xa0
 800936a:	00d2      	lsls	r2, r2, #3
 800936c:	615a      	str	r2, [r3, #20]
 800936e:	003b      	movs	r3, r7
 8009370:	2218      	movs	r2, #24
 8009372:	619a      	str	r2, [r3, #24]
	  .name = "SlaveTask",
	  .priority = (osPriority_t) osPriorityNormal,
	  .stack_size = 128 * 10
	};
	SlaveTask = osThreadNew(SlTask_main, NULL, &SlaveTask_attributes);
 8009374:	003a      	movs	r2, r7
 8009376:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <SlTask_init+0x54>)
 8009378:	2100      	movs	r1, #0
 800937a:	0018      	movs	r0, r3
 800937c:	f7fd f934 	bl	80065e8 <osThreadNew>
 8009380:	0003      	movs	r3, r0
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
	Slave_ready_id = osEventFlagsNew(NULL);
 8009384:	2000      	movs	r0, #0
 8009386:	f7fd f9e1 	bl	800674c <osEventFlagsNew>
 800938a:	0002      	movs	r2, r0
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <SlTask_init+0x58>)
 800938e:	601a      	str	r2, [r3, #0]
	(void)SlaveTask;

	return 1;
 8009390:	2301      	movs	r3, #1
}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	b00a      	add	sp, #40	; 0x28
 8009398:	bd80      	pop	{r7, pc}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	08009a04 	.word	0x08009a04
 80093a0:	080093a9 	.word	0x080093a9
 80093a4:	20001e8c 	.word	0x20001e8c

080093a8 <SlTask_main>:

static void SlTask_main(void *argument)
{
 80093a8:	b5b0      	push	{r4, r5, r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
//	spi_read(&spi_handle, RxBuffer, 1);
//	spi_read_write(&spi_handle, dummy_read_write, RxBuffer, 1);
	uint8_t *tempBuffer, len;
	while (1){
		/* Test */
		SlTask_encode(shared_memory);
 80093b0:	4b4d      	ldr	r3, [pc, #308]	; (80094e8 <SlTask_main+0x140>)
 80093b2:	0018      	movs	r0, r3
 80093b4:	f000 f8a2 	bl	80094fc <SlTask_encode>
		osEventFlagsWait(Slave_ready_id, 0xDD, osFlagsWaitAny, osWaitForever);
 80093b8:	4b4c      	ldr	r3, [pc, #304]	; (80094ec <SlTask_main+0x144>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	2301      	movs	r3, #1
 80093be:	425b      	negs	r3, r3
 80093c0:	2200      	movs	r2, #0
 80093c2:	21dd      	movs	r1, #221	; 0xdd
 80093c4:	f7fd fa44 	bl	8006850 <osEventFlagsWait>
		uint8_t flag_decode = SlDecode_register(&RxBuffer[0]);
 80093c8:	2514      	movs	r5, #20
 80093ca:	197c      	adds	r4, r7, r5
 80093cc:	4b48      	ldr	r3, [pc, #288]	; (80094f0 <SlTask_main+0x148>)
 80093ce:	0018      	movs	r0, r3
 80093d0:	f000 f94b 	bl	800966a <SlDecode_register>
 80093d4:	0003      	movs	r3, r0
 80093d6:	7023      	strb	r3, [r4, #0]
		if (flag_decode == WRITE_FLAG){
 80093d8:	197b      	adds	r3, r7, r5
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d129      	bne.n	8009434 <SlTask_main+0x8c>
			for (uint8_t i = LOW_VOLTAGE_LOW_BYTE; i < BUZZER_ENABLE + 1; i++){
 80093e0:	2317      	movs	r3, #23
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	2210      	movs	r2, #16
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	e01e      	b.n	8009428 <SlTask_main+0x80>
				if (RxBuffer[0] == i){
 80093ea:	4b41      	ldr	r3, [pc, #260]	; (80094f0 <SlTask_main+0x148>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2117      	movs	r1, #23
 80093f0:	187a      	adds	r2, r7, r1
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d111      	bne.n	800941c <SlTask_main+0x74>
					tempBuffer = &shared_memory[i];
 80093f8:	187b      	adds	r3, r7, r1
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	4b3a      	ldr	r3, [pc, #232]	; (80094e8 <SlTask_main+0x140>)
 80093fe:	18d3      	adds	r3, r2, r3
 8009400:	613b      	str	r3, [r7, #16]
					len = 2;
 8009402:	210f      	movs	r1, #15
 8009404:	187b      	adds	r3, r7, r1
 8009406:	2202      	movs	r2, #2
 8009408:	701a      	strb	r2, [r3, #0]
					spi_read_write(&spi_handle, dummy_read_write, tempBuffer, len);
 800940a:	187b      	adds	r3, r7, r1
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	4938      	ldr	r1, [pc, #224]	; (80094f4 <SlTask_main+0x14c>)
 8009414:	4838      	ldr	r0, [pc, #224]	; (80094f8 <SlTask_main+0x150>)
 8009416:	f000 f9c7 	bl	80097a8 <spi_read_write>
					break;
 800941a:	e063      	b.n	80094e4 <SlTask_main+0x13c>
			for (uint8_t i = LOW_VOLTAGE_LOW_BYTE; i < BUZZER_ENABLE + 1; i++){
 800941c:	2117      	movs	r1, #23
 800941e:	187b      	adds	r3, r7, r1
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	187b      	adds	r3, r7, r1
 8009424:	3201      	adds	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	2317      	movs	r3, #23
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b14      	cmp	r3, #20
 8009430:	d9db      	bls.n	80093ea <SlTask_main+0x42>
 8009432:	e7bd      	b.n	80093b0 <SlTask_main+0x8>
				}
			}
		}
		else {
			for (uint8_t i = BAT1_VOLTAGE_LOW_BYTE; i < POWER_WARNING + 1; i++){
 8009434:	2316      	movs	r3, #22
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	2250      	movs	r2, #80	; 0x50
 800943a:	701a      	strb	r2, [r3, #0]
 800943c:	e021      	b.n	8009482 <SlTask_main+0xda>
				if (RxBuffer[0] == i){
 800943e:	4b2c      	ldr	r3, [pc, #176]	; (80094f0 <SlTask_main+0x148>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2116      	movs	r1, #22
 8009444:	187a      	adds	r2, r7, r1
 8009446:	7812      	ldrb	r2, [r2, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d114      	bne.n	8009476 <SlTask_main+0xce>
					tempBuffer = &shared_memory[i];
 800944c:	187b      	adds	r3, r7, r1
 800944e:	781a      	ldrb	r2, [r3, #0]
 8009450:	4b25      	ldr	r3, [pc, #148]	; (80094e8 <SlTask_main+0x140>)
 8009452:	18d3      	adds	r3, r2, r3
 8009454:	613b      	str	r3, [r7, #16]
					len = POWER_WARNING + 1 - i;
 8009456:	200f      	movs	r0, #15
 8009458:	183b      	adds	r3, r7, r0
 800945a:	187a      	adds	r2, r7, r1
 800945c:	7812      	ldrb	r2, [r2, #0]
 800945e:	216a      	movs	r1, #106	; 0x6a
 8009460:	1a8a      	subs	r2, r1, r2
 8009462:	701a      	strb	r2, [r3, #0]
					spi_read_write(&spi_handle, tempBuffer, dummy_read_write, len);
 8009464:	183b      	adds	r3, r7, r0
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	b29b      	uxth	r3, r3
 800946a:	4a22      	ldr	r2, [pc, #136]	; (80094f4 <SlTask_main+0x14c>)
 800946c:	6939      	ldr	r1, [r7, #16]
 800946e:	4822      	ldr	r0, [pc, #136]	; (80094f8 <SlTask_main+0x150>)
 8009470:	f000 f99a 	bl	80097a8 <spi_read_write>
					break;
 8009474:	e00a      	b.n	800948c <SlTask_main+0xe4>
			for (uint8_t i = BAT1_VOLTAGE_LOW_BYTE; i < POWER_WARNING + 1; i++){
 8009476:	2116      	movs	r1, #22
 8009478:	187b      	adds	r3, r7, r1
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	187b      	adds	r3, r7, r1
 800947e:	3201      	adds	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	2316      	movs	r3, #22
 8009484:	18fb      	adds	r3, r7, r3
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b69      	cmp	r3, #105	; 0x69
 800948a:	d9d8      	bls.n	800943e <SlTask_main+0x96>
				}
			}
			for (uint8_t i = LOW_VOLTAGE_LOW_BYTE; i < BUZZER_ENABLE + 1; i++){
 800948c:	2315      	movs	r3, #21
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	2210      	movs	r2, #16
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	e021      	b.n	80094da <SlTask_main+0x132>
				if (RxBuffer[0] == i){
 8009496:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <SlTask_main+0x148>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2115      	movs	r1, #21
 800949c:	187a      	adds	r2, r7, r1
 800949e:	7812      	ldrb	r2, [r2, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d114      	bne.n	80094ce <SlTask_main+0x126>
					tempBuffer = &shared_memory[i];
 80094a4:	187b      	adds	r3, r7, r1
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <SlTask_main+0x140>)
 80094aa:	18d3      	adds	r3, r2, r3
 80094ac:	613b      	str	r3, [r7, #16]
					len = BUZZER_ENABLE + 1 - i;
 80094ae:	200f      	movs	r0, #15
 80094b0:	183b      	adds	r3, r7, r0
 80094b2:	187a      	adds	r2, r7, r1
 80094b4:	7812      	ldrb	r2, [r2, #0]
 80094b6:	2115      	movs	r1, #21
 80094b8:	1a8a      	subs	r2, r1, r2
 80094ba:	701a      	strb	r2, [r3, #0]
					spi_read_write(&spi_handle, tempBuffer, dummy_read_write, len);
 80094bc:	183b      	adds	r3, r7, r0
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <SlTask_main+0x14c>)
 80094c4:	6939      	ldr	r1, [r7, #16]
 80094c6:	480c      	ldr	r0, [pc, #48]	; (80094f8 <SlTask_main+0x150>)
 80094c8:	f000 f96e 	bl	80097a8 <spi_read_write>
					break;
 80094cc:	e00a      	b.n	80094e4 <SlTask_main+0x13c>
			for (uint8_t i = LOW_VOLTAGE_LOW_BYTE; i < BUZZER_ENABLE + 1; i++){
 80094ce:	2115      	movs	r1, #21
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	187b      	adds	r3, r7, r1
 80094d6:	3201      	adds	r2, #1
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	2315      	movs	r3, #21
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b14      	cmp	r3, #20
 80094e2:	d9d8      	bls.n	8009496 <SlTask_main+0xee>
	while (1){
 80094e4:	e764      	b.n	80093b0 <SlTask_main+0x8>
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	20001d94 	.word	0x20001d94
 80094ec:	20001e8c 	.word	0x20001e8c
 80094f0:	20001d74 	.word	0x20001d74
 80094f4:	20001e5c 	.word	0x20001e5c
 80094f8:	20000010 	.word	0x20000010

080094fc <SlTask_encode>:
		}
	}
}

static void SlTask_encode(uint8_t *packet)
{
 80094fc:	b5b0      	push	{r4, r5, r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	uint8_t index_packet = BAT1_VOLTAGE_LOW_BYTE;
 8009504:	230f      	movs	r3, #15
 8009506:	18fb      	adds	r3, r7, r3
 8009508:	2250      	movs	r2, #80	; 0x50
 800950a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = BAT1_VOLTAGE_LOW_BYTE; i <= SYS_VOLTAGE_HIGH_BYTE; i+=2)
 800950c:	230e      	movs	r3, #14
 800950e:	18fb      	adds	r3, r7, r3
 8009510:	2250      	movs	r2, #80	; 0x50
 8009512:	701a      	strb	r2, [r3, #0]
 8009514:	e02b      	b.n	800956e <SlTask_encode+0x72>
	{
		packet[i] = AdcGet_voltage(index_packet - BAT1_VOLTAGE_LOW_BYTE);
 8009516:	240f      	movs	r4, #15
 8009518:	193b      	adds	r3, r7, r4
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	3b50      	subs	r3, #80	; 0x50
 800951e:	b2db      	uxtb	r3, r3
 8009520:	0018      	movs	r0, r3
 8009522:	f7ff fdfb 	bl	800911c <AdcGet_voltage>
 8009526:	0003      	movs	r3, r0
 8009528:	0019      	movs	r1, r3
 800952a:	250e      	movs	r5, #14
 800952c:	197b      	adds	r3, r7, r5
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	18d3      	adds	r3, r2, r3
 8009534:	b2ca      	uxtb	r2, r1
 8009536:	701a      	strb	r2, [r3, #0]
		packet[i+1] = AdcGet_voltage(index_packet - BAT1_VOLTAGE_LOW_BYTE) >> 8;
 8009538:	193b      	adds	r3, r7, r4
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	3b50      	subs	r3, #80	; 0x50
 800953e:	b2db      	uxtb	r3, r3
 8009540:	0018      	movs	r0, r3
 8009542:	f7ff fdeb 	bl	800911c <AdcGet_voltage>
 8009546:	0003      	movs	r3, r0
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	b299      	uxth	r1, r3
 800954c:	197b      	adds	r3, r7, r5
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	18d3      	adds	r3, r2, r3
 8009556:	b2ca      	uxtb	r2, r1
 8009558:	701a      	strb	r2, [r3, #0]
		index_packet++;
 800955a:	193b      	adds	r3, r7, r4
 800955c:	781a      	ldrb	r2, [r3, #0]
 800955e:	193b      	adds	r3, r7, r4
 8009560:	3201      	adds	r2, #1
 8009562:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = BAT1_VOLTAGE_LOW_BYTE; i <= SYS_VOLTAGE_HIGH_BYTE; i+=2)
 8009564:	197b      	adds	r3, r7, r5
 8009566:	197a      	adds	r2, r7, r5
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	3202      	adds	r2, #2
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	230e      	movs	r3, #14
 8009570:	18fb      	adds	r3, r7, r3
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b57      	cmp	r3, #87	; 0x57
 8009576:	d9ce      	bls.n	8009516 <SlTask_encode+0x1a>
	}
	index_packet = AIR_TEMPERATURE_LOW_BYTE;
 8009578:	230f      	movs	r3, #15
 800957a:	18fb      	adds	r3, r7, r3
 800957c:	2258      	movs	r2, #88	; 0x58
 800957e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = AIR_TEMPERATURE_LOW_BYTE; i <= BAT2_TEMPERATURE_HIGH_BYTE; i+=2)
 8009580:	230d      	movs	r3, #13
 8009582:	18fb      	adds	r3, r7, r3
 8009584:	2258      	movs	r2, #88	; 0x58
 8009586:	701a      	strb	r2, [r3, #0]
 8009588:	e02b      	b.n	80095e2 <SlTask_encode+0xe6>
	{
		packet[i]= AdcGet_temperature(index_packet - AIR_TEMPERATURE_LOW_BYTE);
 800958a:	240f      	movs	r4, #15
 800958c:	193b      	adds	r3, r7, r4
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	3b58      	subs	r3, #88	; 0x58
 8009592:	b2db      	uxtb	r3, r3
 8009594:	0018      	movs	r0, r3
 8009596:	f7ff fdd3 	bl	8009140 <AdcGet_temperature>
 800959a:	0003      	movs	r3, r0
 800959c:	0019      	movs	r1, r3
 800959e:	250d      	movs	r5, #13
 80095a0:	197b      	adds	r3, r7, r5
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	18d3      	adds	r3, r2, r3
 80095a8:	b2ca      	uxtb	r2, r1
 80095aa:	701a      	strb	r2, [r3, #0]
		packet[i+1] = AdcGet_temperature(index_packet - AIR_TEMPERATURE_LOW_BYTE) >> 8;
 80095ac:	193b      	adds	r3, r7, r4
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	3b58      	subs	r3, #88	; 0x58
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	0018      	movs	r0, r3
 80095b6:	f7ff fdc3 	bl	8009140 <AdcGet_temperature>
 80095ba:	0003      	movs	r3, r0
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	b299      	uxth	r1, r3
 80095c0:	197b      	adds	r3, r7, r5
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	18d3      	adds	r3, r2, r3
 80095ca:	b2ca      	uxtb	r2, r1
 80095cc:	701a      	strb	r2, [r3, #0]
		index_packet++;
 80095ce:	193b      	adds	r3, r7, r4
 80095d0:	781a      	ldrb	r2, [r3, #0]
 80095d2:	193b      	adds	r3, r7, r4
 80095d4:	3201      	adds	r2, #1
 80095d6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = AIR_TEMPERATURE_LOW_BYTE; i <= BAT2_TEMPERATURE_HIGH_BYTE; i+=2)
 80095d8:	197b      	adds	r3, r7, r5
 80095da:	197a      	adds	r2, r7, r5
 80095dc:	7812      	ldrb	r2, [r2, #0]
 80095de:	3202      	adds	r2, #2
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	230d      	movs	r3, #13
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b61      	cmp	r3, #97	; 0x61
 80095ea:	d9ce      	bls.n	800958a <SlTask_encode+0x8e>
	}
	index_packet = SYS_CURRENT_LOW_BYTE;
 80095ec:	230f      	movs	r3, #15
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	2262      	movs	r2, #98	; 0x62
 80095f2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = SYS_CURRENT_LOW_BYTE; i <= CHG_CURRENT_HIGH_BYTE; i+=2)
 80095f4:	230c      	movs	r3, #12
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	2262      	movs	r2, #98	; 0x62
 80095fa:	701a      	strb	r2, [r3, #0]
 80095fc:	e02b      	b.n	8009656 <SlTask_encode+0x15a>
	{
		packet[i]= AdcGet_current(index_packet - SYS_CURRENT_LOW_BYTE);
 80095fe:	240f      	movs	r4, #15
 8009600:	193b      	adds	r3, r7, r4
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	3b62      	subs	r3, #98	; 0x62
 8009606:	b2db      	uxtb	r3, r3
 8009608:	0018      	movs	r0, r3
 800960a:	f7ff fdad 	bl	8009168 <AdcGet_current>
 800960e:	0003      	movs	r3, r0
 8009610:	0019      	movs	r1, r3
 8009612:	250c      	movs	r5, #12
 8009614:	197b      	adds	r3, r7, r5
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	18d3      	adds	r3, r2, r3
 800961c:	b2ca      	uxtb	r2, r1
 800961e:	701a      	strb	r2, [r3, #0]
		packet[i+1] = AdcGet_current(index_packet - SYS_CURRENT_LOW_BYTE) >> 8;
 8009620:	193b      	adds	r3, r7, r4
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	3b62      	subs	r3, #98	; 0x62
 8009626:	b2db      	uxtb	r3, r3
 8009628:	0018      	movs	r0, r3
 800962a:	f7ff fd9d 	bl	8009168 <AdcGet_current>
 800962e:	0003      	movs	r3, r0
 8009630:	0a1b      	lsrs	r3, r3, #8
 8009632:	b299      	uxth	r1, r3
 8009634:	197b      	adds	r3, r7, r5
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	3301      	adds	r3, #1
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	18d3      	adds	r3, r2, r3
 800963e:	b2ca      	uxtb	r2, r1
 8009640:	701a      	strb	r2, [r3, #0]
		index_packet++;
 8009642:	193b      	adds	r3, r7, r4
 8009644:	781a      	ldrb	r2, [r3, #0]
 8009646:	193b      	adds	r3, r7, r4
 8009648:	3201      	adds	r2, #1
 800964a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = SYS_CURRENT_LOW_BYTE; i <= CHG_CURRENT_HIGH_BYTE; i+=2)
 800964c:	197b      	adds	r3, r7, r5
 800964e:	197a      	adds	r2, r7, r5
 8009650:	7812      	ldrb	r2, [r2, #0]
 8009652:	3202      	adds	r2, #2
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	230c      	movs	r3, #12
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b65      	cmp	r3, #101	; 0x65
 800965e:	d9ce      	bls.n	80095fe <SlTask_encode+0x102>
	}
}
 8009660:	46c0      	nop			; (mov r8, r8)
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	46bd      	mov	sp, r7
 8009666:	b004      	add	sp, #16
 8009668:	bdb0      	pop	{r4, r5, r7, pc}

0800966a <SlDecode_register>:

static uint8_t SlDecode_register(uint8_t *RxData){
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
	uint8_t tempData = *RxData & 0x7F;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	200f      	movs	r0, #15
 8009678:	183b      	adds	r3, r7, r0
 800967a:	217f      	movs	r1, #127	; 0x7f
 800967c:	400a      	ands	r2, r1
 800967e:	701a      	strb	r2, [r3, #0]
	if (tempData == *RxData){
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	183a      	adds	r2, r7, r0
 8009686:	7812      	ldrb	r2, [r2, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d101      	bne.n	8009690 <SlDecode_register+0x26>
		return READ_FLAG;
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <SlDecode_register+0x28>
	}
	else {
		return WRITE_FLAG;
 8009690:	2300      	movs	r3, #0
	}
}
 8009692:	0018      	movs	r0, r3
 8009694:	46bd      	mov	sp, r7
 8009696:	b004      	add	sp, #16
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	counter_error++;
 80096a4:	4b06      	ldr	r3, [pc, #24]	; (80096c0 <HAL_SPI_ErrorCallback+0x24>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2001      	movs	r0, #1
 80096ac:	2100      	movs	r1, #0
 80096ae:	1812      	adds	r2, r2, r0
 80096b0:	414b      	adcs	r3, r1
 80096b2:	4903      	ldr	r1, [pc, #12]	; (80096c0 <HAL_SPI_ErrorCallback+0x24>)
 80096b4:	600a      	str	r2, [r1, #0]
 80096b6:	604b      	str	r3, [r1, #4]
//	}
//	HAL_SPI_DMAStop(spi_handle.hspi);
//	__HAL_RCC_SPI1_FORCE_RESET();
//	__HAL_RCC_SPI1_RELEASE_RESET();
//	spi_read_write(&spi_handle, (uint8_t *)TxBuffer, (uint8_t *)RxBuffer, LEN_BUFFER);
}
 80096b8:	46c0      	nop			; (mov r8, r8)
 80096ba:	46bd      	mov	sp, r7
 80096bc:	b002      	add	sp, #8
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20001e80 	.word	0x20001e80

080096c4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	0002      	movs	r2, r0
 80096cc:	1dbb      	adds	r3, r7, #6
 80096ce:	801a      	strh	r2, [r3, #0]
	spi_ready = false;
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
	memset(RxBuffer, 0, LEN_BUFFER);
 80096d6:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 80096d8:	221e      	movs	r2, #30
 80096da:	2100      	movs	r1, #0
 80096dc:	0018      	movs	r0, r3
 80096de:	f000 f889 	bl	80097f4 <memset>
	HAL_SPI_DMAStop(spi_handle.hspi);
 80096e2:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7fb fc1e 	bl	8004f28 <HAL_SPI_DMAStop>
	__HAL_RCC_SPI1_FORCE_RESET();
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 80096ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	0149      	lsls	r1, r1, #5
 80096f6:	430a      	orrs	r2, r1
 80096f8:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_SPI1_RELEASE_RESET();
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 80096fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fe:	4b07      	ldr	r3, [pc, #28]	; (800971c <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 8009700:	4907      	ldr	r1, [pc, #28]	; (8009720 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8009702:	400a      	ands	r2, r1
 8009704:	631a      	str	r2, [r3, #48]	; 0x30
//	spi_read_write(&spi_handle, (uint8_t *)TxBuffer, &RxBuffer[0], 1);
}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	46bd      	mov	sp, r7
 800970a:	b002      	add	sp, #8
 800970c:	bd80      	pop	{r7, pc}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	20001e88 	.word	0x20001e88
 8009714:	20001d74 	.word	0x20001d74
 8009718:	20000010 	.word	0x20000010
 800971c:	40021000 	.word	0x40021000
 8009720:	ffffefff 	.word	0xffffefff

08009724 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	0002      	movs	r2, r0
 800972c:	1dbb      	adds	r3, r7, #6
 800972e:	801a      	strh	r2, [r3, #0]
	spi_ready = true;
 8009730:	4b09      	ldr	r3, [pc, #36]	; (8009758 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8009732:	2201      	movs	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(Slave_ready_id, 0xDD);
 8009736:	4b09      	ldr	r3, [pc, #36]	; (800975c <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	21dd      	movs	r1, #221	; 0xdd
 800973c:	0018      	movs	r0, r3
 800973e:	f7fd f847 	bl	80067d0 <osEventFlagsSet>
	spi_read_write(&spi_handle, &dummy_read_write, &RxBuffer[0], 1);
 8009742:	4a07      	ldr	r2, [pc, #28]	; (8009760 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8009744:	4907      	ldr	r1, [pc, #28]	; (8009764 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 8009746:	4808      	ldr	r0, [pc, #32]	; (8009768 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8009748:	2301      	movs	r3, #1
 800974a:	f000 f82d 	bl	80097a8 <spi_read_write>

}
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	46bd      	mov	sp, r7
 8009752:	b002      	add	sp, #8
 8009754:	bd80      	pop	{r7, pc}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	20001e88 	.word	0x20001e88
 800975c:	20001e8c 	.word	0x20001e8c
 8009760:	20001d74 	.word	0x20001d74
 8009764:	20001e5c 	.word	0x20001e5c
 8009768:	20000010 	.word	0x20000010

0800976c <ADC_Calibrate>:

#include "adc_driver.h"


uint8_t ADC_Calibrate(ADC_HandleTypeDef *padc)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	return HAL_ADCEx_Calibration_Start(padc);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	0018      	movs	r0, r3
 8009778:	f7f9 fd24 	bl	80031c4 <HAL_ADCEx_Calibration_Start>
 800977c:	0003      	movs	r3, r0
}
 800977e:	0018      	movs	r0, r3
 8009780:	46bd      	mov	sp, r7
 8009782:	b002      	add	sp, #8
 8009784:	bd80      	pop	{r7, pc}

08009786 <ADC_Start>:

uint8_t ADC_Start(ADC_HandleTypeDef *padc, uint32_t *buffer, uint32_t len)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
	return HAL_ADC_Start_DMA(padc, buffer, len);
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	0018      	movs	r0, r3
 800979a:	f7f9 f8a3 	bl	80028e4 <HAL_ADC_Start_DMA>
 800979e:	0003      	movs	r3, r0
}
 80097a0:	0018      	movs	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b004      	add	sp, #16
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <spi_read_write>:
{
	return HAL_SPI_Receive_DMA(spi->hspi, RxBuff, len);
}

uint8_t spi_read_write(SPIHandle *spi, uint8_t *TxBuff, uint8_t *RxBuff, uint16_t len)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	001a      	movs	r2, r3
 80097b6:	1cbb      	adds	r3, r7, #2
 80097b8:	801a      	strh	r2, [r3, #0]
	return HAL_SPI_TransmitReceive_DMA(spi->hspi, TxBuff, RxBuff, len);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6898      	ldr	r0, [r3, #8]
 80097be:	1cbb      	adds	r3, r7, #2
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	f7fb f9fd 	bl	8004bc4 <HAL_SPI_TransmitReceive_DMA>
 80097ca:	0003      	movs	r3, r0
}
 80097cc:	0018      	movs	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	b004      	add	sp, #16
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <__malloc_lock>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	4802      	ldr	r0, [pc, #8]	; (80097e0 <__malloc_lock+0xc>)
 80097d8:	f7f8 fd1f 	bl	800221a <__retarget_lock_acquire_recursive>
 80097dc:	bd10      	pop	{r4, pc}
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	2000034c 	.word	0x2000034c

080097e4 <__malloc_unlock>:
 80097e4:	b510      	push	{r4, lr}
 80097e6:	4802      	ldr	r0, [pc, #8]	; (80097f0 <__malloc_unlock+0xc>)
 80097e8:	f7f8 fd2b 	bl	8002242 <__retarget_lock_release_recursive>
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	2000034c 	.word	0x2000034c

080097f4 <memset>:
 80097f4:	0003      	movs	r3, r0
 80097f6:	1882      	adds	r2, r0, r2
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d100      	bne.n	80097fe <memset+0xa>
 80097fc:	4770      	bx	lr
 80097fe:	7019      	strb	r1, [r3, #0]
 8009800:	3301      	adds	r3, #1
 8009802:	e7f9      	b.n	80097f8 <memset+0x4>

08009804 <_reclaim_reent>:
 8009804:	4b2d      	ldr	r3, [pc, #180]	; (80098bc <_reclaim_reent+0xb8>)
 8009806:	b570      	push	{r4, r5, r6, lr}
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	0004      	movs	r4, r0
 800980c:	4283      	cmp	r3, r0
 800980e:	d042      	beq.n	8009896 <_reclaim_reent+0x92>
 8009810:	69c3      	ldr	r3, [r0, #28]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <_reclaim_reent+0x28>
 8009816:	2500      	movs	r5, #0
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	42ab      	cmp	r3, r5
 800981c:	d140      	bne.n	80098a0 <_reclaim_reent+0x9c>
 800981e:	69e3      	ldr	r3, [r4, #28]
 8009820:	6819      	ldr	r1, [r3, #0]
 8009822:	2900      	cmp	r1, #0
 8009824:	d002      	beq.n	800982c <_reclaim_reent+0x28>
 8009826:	0020      	movs	r0, r4
 8009828:	f000 f878 	bl	800991c <_free_r>
 800982c:	6961      	ldr	r1, [r4, #20]
 800982e:	2900      	cmp	r1, #0
 8009830:	d002      	beq.n	8009838 <_reclaim_reent+0x34>
 8009832:	0020      	movs	r0, r4
 8009834:	f000 f872 	bl	800991c <_free_r>
 8009838:	69e1      	ldr	r1, [r4, #28]
 800983a:	2900      	cmp	r1, #0
 800983c:	d002      	beq.n	8009844 <_reclaim_reent+0x40>
 800983e:	0020      	movs	r0, r4
 8009840:	f000 f86c 	bl	800991c <_free_r>
 8009844:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009846:	2900      	cmp	r1, #0
 8009848:	d002      	beq.n	8009850 <_reclaim_reent+0x4c>
 800984a:	0020      	movs	r0, r4
 800984c:	f000 f866 	bl	800991c <_free_r>
 8009850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009852:	2900      	cmp	r1, #0
 8009854:	d002      	beq.n	800985c <_reclaim_reent+0x58>
 8009856:	0020      	movs	r0, r4
 8009858:	f000 f860 	bl	800991c <_free_r>
 800985c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800985e:	2900      	cmp	r1, #0
 8009860:	d002      	beq.n	8009868 <_reclaim_reent+0x64>
 8009862:	0020      	movs	r0, r4
 8009864:	f000 f85a 	bl	800991c <_free_r>
 8009868:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800986a:	2900      	cmp	r1, #0
 800986c:	d002      	beq.n	8009874 <_reclaim_reent+0x70>
 800986e:	0020      	movs	r0, r4
 8009870:	f000 f854 	bl	800991c <_free_r>
 8009874:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009876:	2900      	cmp	r1, #0
 8009878:	d002      	beq.n	8009880 <_reclaim_reent+0x7c>
 800987a:	0020      	movs	r0, r4
 800987c:	f000 f84e 	bl	800991c <_free_r>
 8009880:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009882:	2900      	cmp	r1, #0
 8009884:	d002      	beq.n	800988c <_reclaim_reent+0x88>
 8009886:	0020      	movs	r0, r4
 8009888:	f000 f848 	bl	800991c <_free_r>
 800988c:	6a23      	ldr	r3, [r4, #32]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <_reclaim_reent+0x92>
 8009892:	0020      	movs	r0, r4
 8009894:	4798      	blx	r3
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	5949      	ldr	r1, [r1, r5]
 800989a:	2900      	cmp	r1, #0
 800989c:	d108      	bne.n	80098b0 <_reclaim_reent+0xac>
 800989e:	3504      	adds	r5, #4
 80098a0:	69e3      	ldr	r3, [r4, #28]
 80098a2:	68d9      	ldr	r1, [r3, #12]
 80098a4:	2d80      	cmp	r5, #128	; 0x80
 80098a6:	d1f7      	bne.n	8009898 <_reclaim_reent+0x94>
 80098a8:	0020      	movs	r0, r4
 80098aa:	f000 f837 	bl	800991c <_free_r>
 80098ae:	e7b6      	b.n	800981e <_reclaim_reent+0x1a>
 80098b0:	680e      	ldr	r6, [r1, #0]
 80098b2:	0020      	movs	r0, r4
 80098b4:	f000 f832 	bl	800991c <_free_r>
 80098b8:	0031      	movs	r1, r6
 80098ba:	e7ee      	b.n	800989a <_reclaim_reent+0x96>
 80098bc:	20000068 	.word	0x20000068

080098c0 <__libc_init_array>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	2600      	movs	r6, #0
 80098c4:	4c0c      	ldr	r4, [pc, #48]	; (80098f8 <__libc_init_array+0x38>)
 80098c6:	4d0d      	ldr	r5, [pc, #52]	; (80098fc <__libc_init_array+0x3c>)
 80098c8:	1b64      	subs	r4, r4, r5
 80098ca:	10a4      	asrs	r4, r4, #2
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	d109      	bne.n	80098e4 <__libc_init_array+0x24>
 80098d0:	2600      	movs	r6, #0
 80098d2:	f000 f86d 	bl	80099b0 <_init>
 80098d6:	4c0a      	ldr	r4, [pc, #40]	; (8009900 <__libc_init_array+0x40>)
 80098d8:	4d0a      	ldr	r5, [pc, #40]	; (8009904 <__libc_init_array+0x44>)
 80098da:	1b64      	subs	r4, r4, r5
 80098dc:	10a4      	asrs	r4, r4, #2
 80098de:	42a6      	cmp	r6, r4
 80098e0:	d105      	bne.n	80098ee <__libc_init_array+0x2e>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	00b3      	lsls	r3, r6, #2
 80098e6:	58eb      	ldr	r3, [r5, r3]
 80098e8:	4798      	blx	r3
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7ee      	b.n	80098cc <__libc_init_array+0xc>
 80098ee:	00b3      	lsls	r3, r6, #2
 80098f0:	58eb      	ldr	r3, [r5, r3]
 80098f2:	4798      	blx	r3
 80098f4:	3601      	adds	r6, #1
 80098f6:	e7f2      	b.n	80098de <__libc_init_array+0x1e>
 80098f8:	08009ba4 	.word	0x08009ba4
 80098fc:	08009ba4 	.word	0x08009ba4
 8009900:	08009ba8 	.word	0x08009ba8
 8009904:	08009ba4 	.word	0x08009ba4

08009908 <memcpy>:
 8009908:	2300      	movs	r3, #0
 800990a:	b510      	push	{r4, lr}
 800990c:	429a      	cmp	r2, r3
 800990e:	d100      	bne.n	8009912 <memcpy+0xa>
 8009910:	bd10      	pop	{r4, pc}
 8009912:	5ccc      	ldrb	r4, [r1, r3]
 8009914:	54c4      	strb	r4, [r0, r3]
 8009916:	3301      	adds	r3, #1
 8009918:	e7f8      	b.n	800990c <memcpy+0x4>
	...

0800991c <_free_r>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	0005      	movs	r5, r0
 8009920:	2900      	cmp	r1, #0
 8009922:	d010      	beq.n	8009946 <_free_r+0x2a>
 8009924:	1f0c      	subs	r4, r1, #4
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da00      	bge.n	800992e <_free_r+0x12>
 800992c:	18e4      	adds	r4, r4, r3
 800992e:	0028      	movs	r0, r5
 8009930:	f7ff ff50 	bl	80097d4 <__malloc_lock>
 8009934:	4a1d      	ldr	r2, [pc, #116]	; (80099ac <_free_r+0x90>)
 8009936:	6813      	ldr	r3, [r2, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d105      	bne.n	8009948 <_free_r+0x2c>
 800993c:	6063      	str	r3, [r4, #4]
 800993e:	6014      	str	r4, [r2, #0]
 8009940:	0028      	movs	r0, r5
 8009942:	f7ff ff4f 	bl	80097e4 <__malloc_unlock>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	42a3      	cmp	r3, r4
 800994a:	d908      	bls.n	800995e <_free_r+0x42>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	1821      	adds	r1, r4, r0
 8009950:	428b      	cmp	r3, r1
 8009952:	d1f3      	bne.n	800993c <_free_r+0x20>
 8009954:	6819      	ldr	r1, [r3, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	1809      	adds	r1, r1, r0
 800995a:	6021      	str	r1, [r4, #0]
 800995c:	e7ee      	b.n	800993c <_free_r+0x20>
 800995e:	001a      	movs	r2, r3
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <_free_r+0x4e>
 8009966:	42a3      	cmp	r3, r4
 8009968:	d9f9      	bls.n	800995e <_free_r+0x42>
 800996a:	6811      	ldr	r1, [r2, #0]
 800996c:	1850      	adds	r0, r2, r1
 800996e:	42a0      	cmp	r0, r4
 8009970:	d10b      	bne.n	800998a <_free_r+0x6e>
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	1809      	adds	r1, r1, r0
 8009976:	1850      	adds	r0, r2, r1
 8009978:	6011      	str	r1, [r2, #0]
 800997a:	4283      	cmp	r3, r0
 800997c:	d1e0      	bne.n	8009940 <_free_r+0x24>
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	1841      	adds	r1, r0, r1
 8009984:	6011      	str	r1, [r2, #0]
 8009986:	6053      	str	r3, [r2, #4]
 8009988:	e7da      	b.n	8009940 <_free_r+0x24>
 800998a:	42a0      	cmp	r0, r4
 800998c:	d902      	bls.n	8009994 <_free_r+0x78>
 800998e:	230c      	movs	r3, #12
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	e7d5      	b.n	8009940 <_free_r+0x24>
 8009994:	6820      	ldr	r0, [r4, #0]
 8009996:	1821      	adds	r1, r4, r0
 8009998:	428b      	cmp	r3, r1
 800999a:	d103      	bne.n	80099a4 <_free_r+0x88>
 800999c:	6819      	ldr	r1, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	1809      	adds	r1, r1, r0
 80099a2:	6021      	str	r1, [r4, #0]
 80099a4:	6063      	str	r3, [r4, #4]
 80099a6:	6054      	str	r4, [r2, #4]
 80099a8:	e7ca      	b.n	8009940 <_free_r+0x24>
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	20001e90 	.word	0x20001e90

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
